!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=34)}([function(e,t,n){"use strict";e.exports=n(16)},function(e,t,n){"use strict";(function(e){n.d(t,"b",function(){return a}),n.d(t,"a",function(){return l});var r=n(14),i=void 0!==e?e:{},o=Object(r.a)(i),a=(o.flush,o.hydrate,o.cx,o.merge,o.getRegisteredStyles,o.injectGlobal),l=(o.keyframes,o.css);o.sheet,o.caches}).call(this,n(4))},function(e,t,n){e.exports=n(23)()},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(17)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=l(n(27)),i=l(n(32)),o=l(n(10)),a=l(n(7));function l(e){return e&&e.__esModule?e:{default:e}}e.exports={Transition:a.default,TransitionGroup:o.default,ReplaceTransition:i.default,CSSTransition:r.default}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))i.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)o.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(2)),i=l(n(0)),o=l(n(3)),a=n(8);n(9);function l(e){return e&&e.__esModule?e:{default:e}}var u="unmounted";t.UNMOUNTED=u;var s="exited";t.EXITED=s;var c="entering";t.ENTERING=c;var f="entered";t.ENTERED=f;t.EXITING="exiting";var p=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var i,o=n.transitionGroup,a=o&&!o.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(i=s,r.appearStatus=c):i=f:i=t.unmountOnExit||t.mountOnEnter?u:s,r.state={status:i},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===u?{status:s}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==f&&(t=c):n!==c&&n!==f||(t="exiting")}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=o.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===s&&this.setState({status:u})},a.performEnter=function(e,t){var n=this,r=this.props.enter,i=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,o=this.getTimeouts();t||r?(this.props.onEnter(e,i),this.safeSetState({status:c},function(){n.props.onEntering(e,i),n.onTransitionEnd(e,o.enter,function(){n.safeSetState({status:f},function(){n.props.onEntered(e,i)})})})):this.safeSetState({status:f},function(){n.props.onEntered(e)})},a.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:s},function(){t.props.onExited(e)})})})):this.safeSetState({status:s},function(){t.props.onExited(e)})},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===u)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var o=i.default.Children.only(n);return i.default.cloneElement(o,r)},r}(i.default.Component);function d(){}p.contextTypes={transitionGroup:r.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:d,onEntering:d,onEntered:d,onExit:d,onExiting:d,onExited:d},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4;var h=(0,a.polyfill)(p);t.default=h},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function i(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function o(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,l=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==l){var u=e.displayName||e.name,s="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+s+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=i),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=o;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;var r;(r=n(2))&&r.__esModule;t.timeoutsShape=null;t.classNamesShape=null},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=l(n(2)),i=l(n(0)),o=n(8),a=n(33);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},f=function(e){var t,n;function r(t,n){var r,i=(r=e.call(this,t,n)||this).handleExited.bind(s(s(r)));return r.state={handleExited:i,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},o.componentDidMount=function(){this.appeared=!0,this.mounted=!0},o.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},o.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState(function(t){var n=u({},t.children);return delete n[e.key],{children:n}}))},o.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["component","childFactory"]),o=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o:i.default.createElement(t,r,o)},r}(i.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(e){return e}};var p=(0,o.polyfill)(f);t.default=p,e.exports=t.default},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,i,o,a,l,u,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(i[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){(function(t){for(var r=n(25),i="undefined"==typeof window?t:window,o=["moz","webkit"],a="AnimationFrame",l=i["request"+a],u=i["cancel"+a]||i["cancelRequest"+a],s=0;!l&&s<o.length;s++)l=i[o[s]+"Request"+a],u=i[o[s]+"Cancel"+a]||i[o[s]+"CancelRequest"+a];if(!l||!u){var c=0,f=0,p=[];l=function(e){if(0===p.length){var t=r(),n=Math.max(0,1e3/60-(t-c));c=n+t,setTimeout(function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(c)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return p.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}e.exports=function(e){return l.call(i,e)},e.exports.cancel=function(){u.apply(i,arguments)},e.exports.polyfill=function(e){e||(e=i),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,n(4))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=u(o),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s={position:"absolute",top:0,left:0,visibility:"hidden",height:0,overflow:"scroll",whiteSpace:"pre"},c=["extraWidth","injectStyles","inputClassName","inputRef","inputStyle","minWidth","onAutosize","placeholderIsMinWidth"],f=function(e,t){t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily,t.style.fontWeight=e.fontWeight,t.style.fontStyle=e.fontStyle,t.style.letterSpacing=e.letterSpacing,t.style.textTransform=e.textTransform},p=!("undefined"==typeof window||!window.navigator)&&/MSIE |Trident\/|Edge\//.test(window.navigator.userAgent),d=function(){return p?"_"+Math.random().toString(36).substr(2,12):void 0},h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.inputRef=function(e){n.input=e,"function"==typeof n.props.inputRef&&n.props.inputRef(e)},n.placeHolderSizerRef=function(e){n.placeHolderSizer=e},n.sizerRef=function(e){n.sizer=e},n.state={inputWidth:e.minWidth,inputId:e.id||d()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),i(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.copyInputStyles(),this.updateInputWidth()}},{key:"componentWillReceiveProps",value:function(e){var t=e.id;t!==this.props.id&&this.setState({inputId:t||d()})}},{key:"componentDidUpdate",value:function(e,t){t.inputWidth!==this.state.inputWidth&&"function"==typeof this.props.onAutosize&&this.props.onAutosize(this.state.inputWidth),this.updateInputWidth()}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"copyInputStyles",value:function(){if(this.mounted&&window.getComputedStyle){var e=this.input&&window.getComputedStyle(this.input);e&&(f(e,this.sizer),this.placeHolderSizer&&f(e,this.placeHolderSizer))}}},{key:"updateInputWidth",value:function(){if(this.mounted&&this.sizer&&void 0!==this.sizer.scrollWidth){var e=void 0;e=this.props.placeholder&&(!this.props.value||this.props.value&&this.props.placeholderIsMinWidth)?Math.max(this.sizer.scrollWidth,this.placeHolderSizer.scrollWidth)+2:this.sizer.scrollWidth+2,(e+="number"===this.props.type&&void 0===this.props.extraWidth?16:parseInt(this.props.extraWidth)||0)<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}}},{key:"getInput",value:function(){return this.input}},{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"select",value:function(){this.input.select()}},{key:"renderStyles",value:function(){var e=this.props.injectStyles;return p&&e?a.default.createElement("style",{dangerouslySetInnerHTML:{__html:"input#"+this.state.inputId+"::-ms-clear {display: none;}"}}):null}},{key:"render",value:function(){var e=[this.props.defaultValue,this.props.value,""].reduce(function(e,t){return null!=e?e:t}),t=r({},this.props.style);t.display||(t.display="inline-block");var n=r({boxSizing:"content-box",width:this.state.inputWidth+"px"},this.props.inputStyle),i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(this.props,[]);return function(e){c.forEach(function(t){return delete e[t]})}(i),i.className=this.props.inputClassName,i.id=this.state.inputId,i.style=n,a.default.createElement("div",{className:this.props.className,style:t},this.renderStyles(),a.default.createElement("input",r({},i,{ref:this.inputRef})),a.default.createElement("div",{ref:this.sizerRef,style:s},e),this.props.placeholder?a.default.createElement("div",{ref:this.placeHolderSizerRef,style:s},this.props.placeholder):null)}}]),t}();h.propTypes={className:l.default.string,defaultValue:l.default.any,extraWidth:l.default.oneOfType([l.default.number,l.default.string]),id:l.default.string,injectStyles:l.default.bool,inputClassName:l.default.string,inputRef:l.default.func,inputStyle:l.default.object,minWidth:l.default.oneOfType([l.default.number,l.default.string]),onAutosize:l.default.func,onChange:l.default.func,placeholder:l.default.string,placeholderIsMinWidth:l.default.bool,style:l.default.object,value:l.default.any},h.defaultProps={minWidth:1,injectStyles:!0},t.default=h},function(e,t,n){"use strict";var r=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},i={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var o=function(e){for(var t,n=e.length,r=n^n,i=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(i)|(255&e.charCodeAt(++i))<<8|(255&e.charCodeAt(++i))<<16|(255&e.charCodeAt(++i))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++i;switch(n){case 3:r^=(255&e.charCodeAt(i+2))<<16;case 2:r^=(255&e.charCodeAt(i+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(i)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),((r^=r>>>15)>>>0).toString(36)};var a=function(e){function t(e,t,r){var i=t.trim().split(h);t=i;var o=i.length,a=e.length;switch(a){case 0:case 1:var l=0;for(e=0===a?"":e[0]+" ";l<o;++l)t[l]=n(e,t[l],r).trim();break;default:var u=l=0;for(t=[];l<o;++l)for(var s=0;s<a;++s)t[u++]=n(e[s]+" ",i[l],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,o){var a=e+";",l=2*t+3*n+4*o;if(944===l){e=a.indexOf(":",9)+1;var u=a.substring(e,a.length-1).trim();return u=a.substring(0,e).trim()+u+";",1===A||2===A&&i(u,1)?"-webkit-"+u+u:u}if(0===A||2===A&&!i(a,1))return a;switch(l){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(x,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(u=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+u+a;case 1005:return p.test(a)?a.replace(f,":-webkit-")+a.replace(f,":-moz-")+a:a;case 1e3:switch(t=(u=a.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=a.replace(b,"tb");break;case 232:u=a.replace(b,"tb-rl");break;case 220:u=a.replace(b,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+u+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,l=(u=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:a=a.replace(u,"-webkit-"+u)+";"+a;break;case 207:case 102:a=a.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+a.replace(u,"-webkit-"+u)+";"+a.replace(u,"-ms-"+u+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return u=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+u+"-ms-flex-"+u+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(C,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(C,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===_.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,o).replace(":fill-available",":stretch"):a.replace(u,"-webkit-"+u)+a.replace(u,"-moz-"+u.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+o&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),P(2!==t?r:r.replace(T,"$1"),n,t)}function o(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function a(e,t,n,r,i,o,a,l,s,c){for(var f,p=0,d=t;p<I;++p)switch(f=N[p].call(u,e,d,n,r,i,o,a,l,s,c)){case void 0:case!1:case!0:case null:break;default:d=f}if(d!==t)return d}function l(e){return void 0!==(e=e.prefix)&&(P=null,e?"function"!=typeof e?A=1:(A=2,P=e):A=0),l}function u(e,n){var l=e;if(33>l.charCodeAt(0)&&(l=l.trim()),l=[l],0<I){var u=a(-1,n,l,l,k,S,0,0,0,0);void 0!==u&&"string"==typeof u&&(n=u)}var f=function e(n,l,u,f,p){for(var d,h,m,b,w,C=0,T=0,_=0,x=0,N=0,P=0,F=m=d=0,M=0,R=0,j=0,H=0,V=u.length,W=V-1,U="",B="",z="",q="";M<V;){if(h=u.charCodeAt(M),M===W&&0!==T+x+_+C&&(0!==T&&(h=47===T?10:47),x=_=C=0,V++,W++),0===T+x+_+C){if(M===W&&(0<R&&(U=U.replace(c,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=u.charAt(M)}h=59}switch(h){case 123:for(d=(U=U.trim()).charCodeAt(0),m=1,H=++M;M<V;){switch(h=u.charCodeAt(M)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(M+1)){case 42:case 47:e:{for(F=M+1;F<W;++F)switch(u.charCodeAt(F)){case 47:if(42===h&&42===u.charCodeAt(F-1)&&M+2!==F){M=F+1;break e}break;case 10:if(47===h){M=F+1;break e}}M=F}}break;case 91:h++;case 40:h++;case 34:case 39:for(;M++<W&&u.charCodeAt(M)!==h;);}if(0===m)break;M++}switch(m=u.substring(H,M),0===d&&(d=(U=U.replace(s,"").trim()).charCodeAt(0)),d){case 64:switch(0<R&&(U=U.replace(c,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:R=l;break;default:R=D}if(H=(m=e(l,R,m,h,p+1)).length,0<I&&(w=a(3,m,R=t(D,U,j),l,k,S,H,h,p,f),U=R.join(""),void 0!==w&&0===(H=(m=w.trim()).length)&&(h=0,m="")),0<H)switch(h){case 115:U=U.replace(E,o);case 100:case 109:case 45:m=U+"{"+m+"}";break;case 107:m=(U=U.replace(g,"$1 $2"))+"{"+m+"}",m=1===A||2===A&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=U+m,112===f&&(B+=m,m="")}else m="";break;default:m=e(l,t(l,U,j),m,f,p+1)}z+=m,m=j=R=F=d=0,U="",h=u.charCodeAt(++M);break;case 125:case 59:if(1<(H=(U=(0<R?U.replace(c,""):U).trim()).length))switch(0===F&&(d=U.charCodeAt(0),45===d||96<d&&123>d)&&(H=(U=U.replace(" ",":")).length),0<I&&void 0!==(w=a(1,U,l,n,k,S,B.length,f,p,f))&&0===(H=(U=w.trim()).length)&&(U="\0\0"),d=U.charCodeAt(0),h=U.charCodeAt(1),d){case 0:break;case 64:if(105===h||99===h){q+=U+u.charAt(M);break}default:58!==U.charCodeAt(H-1)&&(B+=r(U,d,h,U.charCodeAt(2)))}j=R=F=d=0,U="",h=u.charCodeAt(++M)}}switch(h){case 13:case 10:47===T?T=0:0===1+d&&107!==f&&0<U.length&&(R=1,U+="\0"),0<I*L&&a(0,U,l,n,k,S,B.length,f,p,f),S=1,k++;break;case 59:case 125:if(0===T+x+_+C){S++;break}default:switch(S++,b=u.charAt(M),h){case 9:case 32:if(0===x+C+T)switch(N){case 44:case 58:case 9:case 32:b="";break;default:32!==h&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===x+T+C&&(R=j=1,b="\f"+b);break;case 108:if(0===x+T+C+O&&0<F)switch(M-F){case 2:112===N&&58===u.charCodeAt(M-3)&&(O=N);case 8:111===P&&(O=P)}break;case 58:0===x+T+C&&(F=M);break;case 44:0===T+_+x+C&&(R=1,b+="\r");break;case 34:case 39:0===T&&(x=x===h?0:0===x?h:x);break;case 91:0===x+T+_&&C++;break;case 93:0===x+T+_&&C--;break;case 41:0===x+T+C&&_--;break;case 40:if(0===x+T+C){if(0===d)switch(2*N+3*P){case 533:break;default:d=1}_++}break;case 64:0===T+_+x+C+F+m&&(m=1);break;case 42:case 47:if(!(0<x+C+_))switch(T){case 0:switch(2*h+3*u.charCodeAt(M+1)){case 235:T=47;break;case 220:H=M,T=42}break;case 42:47===h&&42===N&&H+2!==M&&(33===u.charCodeAt(H+2)&&(B+=u.substring(H,M+1)),b="",T=0)}}0===T&&(U+=b)}P=N,N=h,M++}if(0<(H=B.length)){if(R=l,0<I&&void 0!==(w=a(2,B,R,n,k,S,H,f,p,f))&&0===(B=w).length)return q+B+z;if(B=R.join(",")+"{"+B+"}",0!=A*O){switch(2!==A||i(B,2)||(O=0),O){case 111:B=B.replace(y,":-moz-$1")+B;break;case 112:B=B.replace(v,"::-webkit-input-$1")+B.replace(v,"::-moz-$1")+B.replace(v,":-ms-input-$1")+B}O=0}}return q+B+z}(D,l,n,0,0);return 0<I&&void 0!==(u=a(-2,f,l,l,k,S,f.length,0,0,0))&&(f=u),O=0,S=k=1,f}var s=/^\0+/g,c=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,d=/([,: ])(transform)/g,h=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,E=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,C=/-self|flex-/g,T=/[^]*?(:[rp][el]a[\w-]+)[^]*/,_=/stretch|:\s*\w+\-(?:conte|avail)/,x=/([^-])(image-set\()/,S=1,k=1,O=0,A=1,D=[],N=[],I=0,P=null,L=0;return u.use=function e(t){switch(t){case void 0:case null:I=N.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:N[I++]=t;break;case Boolean:L=0|!!t}}return e},u.set=l,void 0!==e&&l(e),u},l=n(11),u=n.n(l),s=/[A-Z]|^ms/g,c=r(function(e){return e.replace(s,"-$&").toLowerCase()}),f=function(e,t){return null==t||"boolean"==typeof t?"":1===i[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},p=function e(t){for(var n=t.length,r=0,i="";r<n;r++){var o=t[r];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"function":0,a=e([o()]);break;case"object":if(Array.isArray(o))a=e(o);else for(var l in a="",o)o[l]&&l&&(a&&(a+=" "),a+=l);break;default:a=o}a&&(i&&(i+=" "),i+=a)}}return i},d="undefined"!=typeof document;function h(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key||""),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),(void 0!==e.container?e.container:document.head).appendChild(t),t}var m=function(){function e(e){this.isSpeedy=!0,this.tags=[],this.ctr=0,this.opts=e}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.tags[0]=h(this.opts),this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=h(this.opts);this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(h(this.opts))},t.flush=function(){this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0,this.injected=!1},e}();t.a=function(e,t){if(void 0!==e.__SECRET_EMOTION__)return e.__SECRET_EMOTION__;void 0===t&&(t={});var n,r,i=t.key||"css",l=u()(function(e){n+=e,d&&h.insert(e,v)});void 0!==t.prefix&&(r={prefix:t.prefix});var s={registered:{},inserted:{},nonce:t.nonce,key:i},h=new m(t);d&&h.inject();var g=new a(r);g.use(t.stylisPlugins)(l);var v="";function y(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":if(void 0!==e.__emotion_styles){var n=e.toString();return n}return y.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(w.has(e))return w.get(e);var t="";return Array.isArray(e)?e.forEach(function(e){t+=y.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==s.registered[e[n]]?t+=n+"{"+s.registered[e[n]]+"}":t+=c(n)+":"+f(n,e[n])+";":Array.isArray(e[n])&&"string"==typeof e[n][0]&&void 0===s.registered[e[n][0]]?e[n].forEach(function(e){t+=c(n)+":"+f(n,e)+";"}):t+=n+"{"+y.call(this,e[n],!1)+"}"},this),w.set(e,t),t}.call(this,e);default:var r=s.registered[e];return!1===t&&void 0!==r?r:e}}var b,E,w=new WeakMap,C=/label:\s*([^\s;\n{]+)\s*;/g,T=function(e){var t=!0,n="",r="";null==e||void 0===e.raw?(t=!1,n+=y.call(this,e,!1)):n+=e[0];for(var i=arguments.length,a=new Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];return a.forEach(function(r,i){n+=y.call(this,r,46===n.charCodeAt(n.length-1)),!0===t&&void 0!==e[i+1]&&(n+=e[i+1])},this),E=n,n=n.replace(C,function(e,t){return r+="-"+t,""}),b=function(e,t){return o(e+t)+t}(n,r),n};function _(e,t){void 0===s.inserted[b]&&(n="",g(e,t),s.inserted[b]=n)}var x=function(){var e=T.apply(this,arguments),t=i+"-"+b;return void 0===s.registered[t]&&(s.registered[t]=E),_("."+t,e),t};function S(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==s.registered[t]?e.push(t):n+=t+" "}),n}function k(e,t){var n=[],r=S(n,e);return n.length<2?e:r+x(n,t)}function O(e){s.inserted[e]=!0}if(d){var A=document.querySelectorAll("[data-emotion-"+i+"]");Array.prototype.forEach.call(A,function(e){h.tags[0].parentNode.insertBefore(e,h.tags[0]),e.getAttribute("data-emotion-"+i).split(" ").forEach(O)})}var D={flush:function(){d&&(h.flush(),h.inject()),s.inserted={},s.registered={}},hydrate:function(e){e.forEach(O)},cx:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return k(p(t))},merge:k,getRegisteredStyles:S,injectGlobal:function(){_("",T.apply(this,arguments))},keyframes:function(){var e=T.apply(this,arguments),t="animation-"+b;return _("","@keyframes "+t+"{"+e+"}"),t},css:x,sheet:h,caches:s};return e.__SECRET_EMOTION__=D,D}},function(e,t){!function(t){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",s="object"==typeof e,c=t.regeneratorRuntime;if(c)s&&(e.exports=c);else{(c=t.regeneratorRuntime=s?e.exports:{}).wrap=E;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",m={},g={};g[a]=function(){return this};var v=Object.getPrototypeOf,y=v&&v(v(N([])));y&&y!==r&&i.call(y,a)&&(g=y);var b=_.prototype=C.prototype=Object.create(g);T.prototype=b.constructor=_,_.constructor=T,_[u]=T.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===T||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,u in e||(e[u]="GeneratorFunction")),e.prototype=Object.create(b),e},c.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[l]=function(){return this},c.AsyncIterator=S,c.async=function(e,t,n,r){var i=new S(E(e,t,n,r));return c.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(b),b[u]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=N,D.prototype={constructor:D,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(A),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,i){return l.type="throw",l.arg=e,t.next=r,i&&(t.method="next",t.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],l=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),s=i.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;A(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:N(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),m}}}function E(e,t,n,r){var i=t&&t.prototype instanceof C?t:C,o=Object.create(i.prototype),a=new D(r||[]);return o._invoke=function(e,t,n){var r=f;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===i)throw o;return I()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var l=k(a,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var u=w(e,t,n);if("normal"===u.type){if(r=n.done?h:p,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,a),o}function w(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function C(){}function T(){}function _(){}function x(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function S(e){var t;this._invoke=function(n,r){function o(){return new Promise(function(t,o){!function t(n,r,o,a){var l=w(e[n],e,r);if("throw"!==l.type){var u=l.arg,s=u.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then(function(e){t("next",e,o,a)},function(e){t("throw",e,o,a)}):Promise.resolve(s).then(function(e){u.value=e,o(u)},a)}a(l.arg)}(n,r,t,o)})}return t=t?t.then(o,o):o()}}function k(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,k(e,t),"throw"===t.method))return m;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var i=w(r,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,m;var o=i.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,m):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,m)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function A(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function D(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function N(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(i.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return o.next=o}}return{next:I}}function I(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,s=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.concurrent_mode"):60111,d=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,g=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,i,o,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function w(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}function C(){}function T(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=w.prototype;var _=T.prototype=new C;_.constructor=T,r(_,w.prototype),_.isPureReactComponent=!0;var x={current:null,currentDispatcher:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var D=/\/+/g,N=[];function I(e,t,n,r){if(N.length){var i=N.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case a:u=!0}}if(u)return r(i,t,""===n?"."+F(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+F(l=t[s],s);u+=e(l,c,r,i)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+F(l,s++),r,i);else"object"===l&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,function(e){return e}):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(D,"$&/")+"/"),L(e,R,t=I(t,o,r,i)),P(t)}var H={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,M,t=I(null,null,t,n)),P(t)},count:function(e){return L(e,function(){return null},null)},toArray:function(e){var t=[];return j(e,t,null,function(e){return e}),t},only:function(e){return A(e)||y("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:T,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},Fragment:l,StrictMode:u,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&y("267",e);var i=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=x.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,i)&&!k.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){c=Array(i);for(var f=0;f<i;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.7.0",unstable_ConcurrentMode:p,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},V={default:H},W=V&&H||V;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.7.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(6),o=n(18);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,i,o,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function p(e,t,n,r,i,o,a,s,c){l=!1,u=null,function(e,t,n,r,i,o,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var i=void 0,o=n[r],l=t,u=r;y.hasOwnProperty(u)&&a("99",u),y[u]=o;var s=o.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&g(s[i],l,u);i=!0}else o.registrationName?(g(o.registrationName,l,u),i=!0):i=!1;i||a("98",r,e)}}}function g(e,t,n){b[e]&&a("100",e),b[e]=t,E[e]=t.eventTypes[n].dependencies}var v=[],y={},b={},E={},w=null,C=null,T=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,i,o,f,d,h){if(p.apply(this,arguments),l){if(l){var m=u;l=!1,u=null}else a("198"),m=void 0;s||(s=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function x(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var k=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var A={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function D(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function N(e){if(null!==e&&(k=x(k,e)),e=k,k=null,e&&(S(e,O),k&&a("95"),s))throw e=c,s=!1,c=null,e}var I=Math.random().toString(36).slice(2),P="__reactInternalInstance$"+I,L="__reactEventHandlers$"+I;function F(e){if(e[P])return e[P];for(;!e[P];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[P]).tag||6===e.tag?e:null}function M(e){return!(e=e[P])||5!==e.tag&&6!==e.tag?null:e}function R(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function j(e){return e[L]||null}function H(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function V(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=H(t);for(t=n.length;0<t--;)V(n[t],"captured",e);for(t=0;t<n.length;t++)V(n[t],"bubbled",e)}}function U(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&U(e._targetInst,null,e)}function z(e){S(e,W)}var q=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},K={},Y={};function Q(e){if(K[e])return K[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}q&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var X=Q("animationend"),J=Q("animationiteration"),Z=Q("animationstart"),ee=Q("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ie=null;function oe(){if(ie)return ie;var e,t,n=re,r=n.length,i="value"in ne?ne.value:ne.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return ie=i.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function ue(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}i(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var pe=ue.extend({data:null}),de=ue.extend({data:null}),he=[9,13,27,32],me=q&&"CompositionEvent"in window,ge=null;q&&"documentMode"in document&&(ge=document.documentMode);var ve=q&&"TextEvent"in window&&!ge,ye=q&&(!me||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function Ce(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var xe={eventTypes:Ee,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":i=Ee.compositionStart;break e;case"compositionend":i=Ee.compositionEnd;break e;case"compositionupdate":i=Ee.compositionUpdate;break e}i=void 0}else _e?Ce(e,n)&&(i=Ee.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=Ee.compositionStart);return i?(ye&&"ko"!==n.locale&&(_e||i!==Ee.compositionStart?i===Ee.compositionEnd&&_e&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,_e=!0)),i=pe.getPooled(i,t,n,r),o?i.data=o:null!==(o=Te(n))&&(i.data=o),z(i),o=i):o=null,(e=ve?function(e,t){switch(e){case"compositionend":return Te(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(_e)return"compositionend"===e||!me&&Ce(e,t)?(e=oe(),ie=re=ne=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(Ee.beforeInput,t,n,r)).data=e,z(t)):t=null,null===o?t:null===t?o:[o,t]}},Se=null,ke=null,Oe=null;function Ae(e){if(e=C(e)){"function"!=typeof Se&&a("280");var t=w(e.stateNode);Se(e.stateNode,e.type,t)}}function De(e){ke?Oe?Oe.push(e):Oe=[e]:ke=e}function Ne(){if(ke){var e=ke,t=Oe;if(Oe=ke=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Ie(e,t){return e(t)}function Pe(e,t,n){return e(t,n)}function Le(){}var Fe=!1;function Me(e,t){if(Fe)return e(t);Fe=!0;try{return Ie(e,t)}finally{Fe=!1,(null!==ke||null!==Oe)&&(Le(),Ne())}}var Re={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function je(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Re[e.type]:"textarea"===t}function He(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ue(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var ze=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,qe=/^(.*)[\\\/]/,Ge="function"==typeof Symbol&&Symbol.for,$e=Ge?Symbol.for("react.element"):60103,Ke=Ge?Symbol.for("react.portal"):60106,Ye=Ge?Symbol.for("react.fragment"):60107,Qe=Ge?Symbol.for("react.strict_mode"):60108,Xe=Ge?Symbol.for("react.profiler"):60114,Je=Ge?Symbol.for("react.provider"):60109,Ze=Ge?Symbol.for("react.context"):60110,et=Ge?Symbol.for("react.concurrent_mode"):60111,tt=Ge?Symbol.for("react.forward_ref"):60112,nt=Ge?Symbol.for("react.suspense"):60113,rt=Ge?Symbol.for("react.memo"):60115,it=Ge?Symbol.for("react.lazy"):60116,ot="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Qe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case it:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=lt(e.type);n=null,r&&(n=lt(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var i=ht.hasOwnProperty(t)?ht[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!ct.call(pt,e)||!ct.call(ft,e)&&(st.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Ct(e,t){wt(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var xt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=ue.getPooled(xt.change,e,t,n)).type="change",De(n),z(e),e}var kt=null,Ot=null;function At(e){N(e)}function Dt(e){if(Be(R(e)))return e}function Nt(e,t){if("change"===e)return t}var It=!1;function Pt(){kt&&(kt.detachEvent("onpropertychange",Lt),Ot=kt=null)}function Lt(e){"value"===e.propertyName&&Dt(Ot)&&Me(At,e=St(Ot,e,He(e)))}function Ft(e,t,n){"focus"===e?(Pt(),Ot=n,(kt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&Pt()}function Mt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dt(Ot)}function Rt(e,t){if("click"===e)return Dt(t)}function jt(e,t){if("input"===e||"change"===e)return Dt(t)}q&&(It=Ve("input")&&(!document.documentMode||9<document.documentMode));var Ht={eventTypes:xt,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var i=t?R(t):window,o=void 0,a=void 0,l=i.nodeName&&i.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===i.type?o=Nt:je(i)?It?o=jt:(o=Mt,a=Ft):(l=i.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Rt),o&&(o=o(e,t)))return St(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&_t(i,"number",i.value)}},Vt=ue.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ut(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Ut}var zt=0,qt=0,Gt=!1,$t=!1,Kt=Vt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=zt;return zt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,$t?"mousemove"===e.type?e.screenY-t:0:($t=!0,0)}}),Yt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Qt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?F(t):null):o=null,o===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,l=Qt.mouseLeave,u=Qt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,l=Qt.pointerLeave,u=Qt.pointerEnter,s="pointer");var c=null==o?i:R(o);if(i=null==t?i:R(t),(e=a.getPooled(l,o,n,r)).type=s+"leave",e.target=c,e.relatedTarget=i,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=c,r=t,o&&r)e:{for(i=r,s=0,a=t=o;a;a=H(a))s++;for(a=0,u=i;u;u=H(u))a++;for(;0<s-a;)t=H(t),s--;for(;0<a-s;)i=H(i),a--;for(;s--;){if(t===i||t===i.alternate)break e;t=H(t),i=H(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(s=o.alternate)||s!==i);)t.push(o),o=H(o);for(o=[];r&&r!==i&&(null===(s=r.alternate)||s!==i);)o.push(r),r=H(r);for(r=0;r<t.length;r++)U(t[r],"bubbled",e);for(r=o.length;0<r--;)U(o[r],"captured",n);return[e,n]}},Jt=Object.prototype.hasOwnProperty;function Zt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var i=n.return,o=i?i.alternate:null;if(!i||!o)break;if(i.child===o.child){for(var l=i.child;l;){if(l===n)return nn(i),e;if(l===r)return nn(i),t;l=l.sibling}a("188")}if(n.return!==r.return)n=i,r=o;else{l=!1;for(var u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Vt.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Vt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=Vt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},yn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),gn.forEach(function(e){bn(e,!1)});var En={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var i=yn[e];if(!i)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Vt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=ue}return z(t=e.getPooled(i,t,n,r)),t}},wn=En.isInteractiveTopLevelEventType,Cn=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=F(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=He(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,l=0;l<v.length;l++){var u=v[l];u&&(u=u.extractEvents(r,t,o,i))&&(a=x(a,u))}N(a)}}var _n=!0;function xn(e,t){if(!t)return null;var n=(wn(e)?kn:On).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(wn(e)?kn:On).bind(null,e);t.addEventListener(e,n,!0)}function kn(e,t){Pe(On,e,t)}function On(e,t){if(_n){var n=He(t);if(null===(n=F(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Cn.length){var r=Cn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Me(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Cn.length&&Cn.push(e)}}}var An={},Dn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Dn++,An[e[Nn]]={}),An[e[Nn]]}function Pn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fn(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function Mn(){for(var e=window,t=Pn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Pn(e.document)}return t}function Rn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var jn=q&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vn=null,Wn=null,Un=null,Bn=!1;function zn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==Vn||Vn!==Pn(n)?null:("selectionStart"in(n=Vn)&&Rn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Un&&en(Un,n)?null:(Un=n,(e=ue.getPooled(Hn.select,Wn,e,t)).type="select",e.target=Vn,z(e),e))}var qn={eventTypes:Hn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=In(o),i=E.onSelect;for(var a=0;a<i.length;a++){var l=i[a];if(!o.hasOwnProperty(l)||!o[l]){o=!1;break e}}o=!0}i=!o}if(i)return null;switch(o=t?R(t):window,e){case"focus":(je(o)||"true"===o.contentEditable)&&(Vn=o,Wn=t,Un=null);break;case"blur":Un=Wn=Vn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,zn(n,r);case"selectionchange":if(jn)break;case"keydown":case"keyup":return zn(n,r)}return null}};function Gn(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function $n(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Kn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Qn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Xn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}A.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=j,C=M,T=R,A.injectEventPluginsByName({SimpleEventPlugin:En,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ht,SelectEventPlugin:qn,BeforeInputEventPlugin:xe});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var or={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||or.hasOwnProperty(e)&&or[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(or).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),or[t]=or[e]})});var sr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.hasOwnProperty(i)||!n[i]){switch(i){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Ve(i)&&Sn(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(i)&&xn(i,e)}n[i]=!0}}}function dr(){}var hr=null,mr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function wr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Cr=[],Tr=-1;function _r(e){0>Tr||(e.current=Cr[Tr],Cr[Tr]=null,Tr--)}function xr(e,t){Cr[++Tr]=e.current,e.current=t}var Sr={},kr={current:Sr},Or={current:!1},Ar=Sr;function Dr(e,t){var n=e.type.contextTypes;if(!n)return Sr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Nr(e){return null!=(e=e.childContextTypes)}function Ir(e){_r(Or),_r(kr)}function Pr(e){_r(Or),_r(kr)}function Lr(e,t,n){kr.current!==Sr&&a("168"),xr(kr,t),xr(Or,n)}function Fr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||a("108",lt(t)||"Unknown",o);return i({},n,r)}function Mr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Sr,Ar=kr.current,xr(kr,t),xr(Or,Or.current),!0}function Rr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Fr(e,t,Ar),r.__reactInternalMemoizedMergedChildContext=t,_r(Or),_r(kr),xr(kr,t)):_r(Or),xr(Or,n)}var jr=null,Hr=null;function Vr(e){return function(t){try{return e(t)}catch(e){}}}function Wr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ur(e,t,n,r){return new Wr(e,t,n,r)}function Br(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zr(e,t){var n=e.alternate;return null===n?((n=Ur(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function qr(e,t,n,r,i,o){var l=2;if(r=e,"function"==typeof e)Br(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ye:return Gr(n.children,i,o,t);case et:return $r(n,3|i,o,t);case Qe:return $r(n,2|i,o,t);case Xe:return(e=Ur(12,n,t,4|i)).elementType=Xe,e.type=Xe,e.expirationTime=o,e;case nt:return(e=Ur(13,n,t,i)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case it:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Ur(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Gr(e,t,n,r){return(e=Ur(7,e,r,t)).expirationTime=n,e}function $r(e,t,n,r){return e=Ur(8,e,r,t),t=0==(1&t)?Qe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Kr(e,t,n){return(e=Ur(6,e,null,t)).expirationTime=n,e}function Yr(e,t,n){return(t=Ur(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Zr(t,e)}function Xr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Zr(t,e)}function Jr(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function Zr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,i=t.earliestPendingTime,o=t.latestPingedTime;0===(i=0!==i?i:o)&&(0===e||r<e)&&(i=r),0!==(e=i)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=i,t.expirationTime=e}var ei=!1;function ti(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ni(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ri(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ii(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function oi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=ti(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=ti(e.memoizedState),i=n.updateQueue=ti(n.memoizedState)):r=e.updateQueue=ni(i):null===i&&(i=n.updateQueue=ni(r));null===i||r===i?ii(r,t):null===r.lastUpdate||null===i.lastUpdate?(ii(r,t),ii(i,t)):(ii(r,t),i.lastUpdate=t)}function ai(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ti(e.memoizedState):li(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function li(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=ni(t)),t}function ui(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case 2:ei=!0}return r}function si(e,t,n,r,i){ei=!1;for(var o=(t=li(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=o;null!==u;){var c=u.expirationTime;c<i?(null===a&&(a=u,o=s),l<c&&(l=c)):(s=ui(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<i?(null===c&&(c=u,null===a&&(o=s)),l<f&&(l=f)):(s=ui(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=s),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function ci(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),fi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,fi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function fi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function pi(e,t){return{value:e,source:t,stack:ut(t)}}var di={current:null},hi=null,mi=null,gi=null;function vi(e,t){var n=e.type._context;xr(di,n._currentValue),n._currentValue=t}function yi(e){var t=di.current;_r(di),e.type._context._currentValue=t}function bi(e){hi=e,gi=mi=null,e.firstContextDependency=null}function Ei(e,t){return gi!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(gi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===mi?(null===hi&&a("293"),hi.firstContextDependency=mi=t):mi=mi.next=t),e._currentValue}var wi={},Ci={current:wi},Ti={current:wi},_i={current:wi};function xi(e){return e===wi&&a("174"),e}function Si(e,t){xr(_i,t),xr(Ti,e),xr(Ci,wi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}_r(Ci),xr(Ci,t)}function ki(e){_r(Ci),_r(Ti),_r(_i)}function Oi(e){xi(_i.current);var t=xi(Ci.current),n=er(t,e.type);t!==n&&(xr(Ti,e),xr(Ci,n))}function Ai(e){Ti.current===e&&(_r(Ci),_r(Ti))}function Di(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ni=ze.ReactCurrentOwner,Ii=(new r.Component).refs;function Pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Li={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),i=ri(r=Jo(r,e));i.payload=t,null!=n&&(i.callback=n),$o(),oi(e,i),ta(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),i=ri(r=Jo(r,e));i.tag=1,i.payload=t,null!=n&&(i.callback=n),$o(),oi(e,i),ta(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Sa(),r=ri(n=Jo(n,e));r.tag=2,null!=t&&(r.callback=t),$o(),oi(e,r),ta(e,n)}};function Fi(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(i,o))}function Mi(e,t,n){var r=!1,i=Sr,o=t.contextType;return"object"==typeof o&&null!==o?o=Ni.currentDispatcher.readContext(o):(i=Nr(t)?Ar:kr.current,o=(r=null!=(r=t.contextTypes))?Dr(e,i):Sr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Li,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ri(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Li.enqueueReplaceState(t,t.state,null)}function ji(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Ii;var o=t.contextType;"object"==typeof o&&null!==o?i.context=Ni.currentDispatcher.readContext(o):(o=Nr(t)?Ar:kr.current,i.context=Dr(e,o)),null!==(o=e.updateQueue)&&(si(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(Pi(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Li.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(si(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Hi=Array.isArray;function Vi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===Ii&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function Wi(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ui(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=zr(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Kr(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Vi(e,t,n),r.return=e,r):((r=qr(n.type,n.key,n.props,null,e.mode,r)).ref=Vi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Gr(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Kr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=qr(t.type,t.key,t.props,null,e.mode,n)).ref=Vi(e,null,t),n.return=e,n;case Ke:return(t=Yr(t,e.mode,n)).return=e,t}if(Hi(t)||at(t))return(t=Gr(t,e.mode,n,null)).return=e,t;Wi(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===i?n.type===Ye?f(e,t,n.props.children,r,i):s(e,t,n,r):null;case Ke:return n.key===i?c(e,t,n,r):null}if(Hi(n)||at(n))return null!==i?null:f(e,t,n,r,null);Wi(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,i,r.key):s(t,e,r,i);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Hi(r)||at(r))return f(t,e=e.get(n)||null,r,i,null);Wi(t,r)}return null}function m(i,a,l,u){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=d(i,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(i,f),s;if(null===f){for(;m<l.length;m++)(f=p(i,l[m],u))&&(a=o(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(i,f);m<l.length;m++)(g=h(f,i,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(i,e)}),s}function g(i,l,u,s){var c=at(u);"function"!=typeof c&&a("150"),null==(u=c.call(u))&&a("151");for(var f=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=d(i,m,y.value,s);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(i,m),l=o(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=p(i,y.value,s))&&(l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(i,m);!y.done;g++,y=u.next())null!==(y=h(m,i,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(i,e)}),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===Ye&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case $e:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?o.type===Ye:s.elementType===o.type){n(e,s.sibling),(r=i(s,o.type===Ye?o.props.children:o.props)).ref=Vi(e,s,o),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}o.type===Ye?((r=Gr(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=qr(o.type,o.key,o.props,null,e.mode,u)).ref=Vi(e,r,o),u.return=e,e=u)}return l(e);case Ke:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yr(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Kr(o,e.mode,u)).return=e,e=r),l(e);if(Hi(o))return m(e,r,o,u);if(at(o))return g(e,r,o,u);if(c&&Wi(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:a("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var Bi=Ui(!0),zi=Ui(!1),qi=null,Gi=null,$i=!1;function Ki(e,t){var n=Ur(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Qi(e){if($i){var t=Gi;if(t){var n=t;if(!Yi(e,t)){if(!(t=Er(n))||!Yi(e,t))return e.effectTag|=2,$i=!1,void(qi=e);Ki(qi,n)}qi=e,Gi=wr(t)}else e.effectTag|=2,$i=!1,qi=e}}function Xi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;qi=e}function Ji(e){if(e!==qi)return!1;if(!$i)return Xi(e),$i=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=Gi;t;)Ki(e,t),t=Er(t);return Xi(e),Gi=qi?Er(e.stateNode):null,!0}function Zi(){Gi=qi=null,$i=!1}var eo=ze.ReactCurrentOwner;function to(e,t,n,r){t.child=null===e?zi(t,null,n,r):Bi(t,e.child,n,r)}function no(e,t,n,r,i){n=n.render;var o=t.ref;return bi(t),r=n(r,o),t.effectTag|=1,to(e,t,r,i),t.child}function ro(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Br(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=qr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,io(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(i,r)&&e.ref===t.ref)?fo(e,t,o):(t.effectTag|=1,(e=zr(a,r)).ref=t.ref,e.return=t,t.child=e)}function io(e,t,n,r,i,o){return null!==e&&i<o&&en(e.memoizedProps,r)&&e.ref===t.ref?fo(e,t,o):ao(e,t,n,r,o)}function oo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ao(e,t,n,r,i){var o=Nr(n)?Ar:kr.current;return o=Dr(t,o),bi(t),n=n(r,o),t.effectTag|=1,to(e,t,n,i),t.child}function lo(e,t,n,r,i){if(Nr(n)){var o=!0;Mr(t)}else o=!1;if(bi(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Mi(t,n,r),ji(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Ni.currentDispatcher.readContext(s):s=Dr(t,s=Nr(n)?Ar:kr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Ri(t,a,r,s),ei=!1;var p=t.memoizedState;u=a.state=p;var d=t.updateQueue;null!==d&&(si(t,d,r,a,i),u=t.memoizedState),l!==r||p!==u||Or.current||ei?("function"==typeof c&&(Pi(t,n,c,r),u=t.memoizedState),(l=ei||Fi(t,n,l,r,p,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:Di(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ni.currentDispatcher.readContext(s):s=Dr(t,s=Nr(n)?Ar:kr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Ri(t,a,r,s),ei=!1,u=t.memoizedState,p=a.state=u,null!==(d=t.updateQueue)&&(si(t,d,r,a,i),p=t.memoizedState),l!==r||u!==p||Or.current||ei?("function"==typeof c&&(Pi(t,n,c,r),p=t.memoizedState),(c=ei||Fi(t,n,l,r,u,p,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return uo(e,t,n,r,o,i)}function uo(e,t,n,r,i,o){oo(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Rr(t,n,!1),fo(e,t,o);r=t.stateNode,eo.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Bi(t,e.child,null,o),t.child=Bi(t,null,l,o)):to(e,t,l,o),t.memoizedState=r.state,i&&Rr(t,n,!0),t.child}function so(e){var t=e.stateNode;t.pendingContext?Lr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lr(0,t.context,!1),Si(e,t.containerInfo)}function co(e,t,n){var r=t.mode,i=t.pendingProps,o=t.memoizedState;if(0==(64&t.effectTag)){o=null;var a=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=i.fallback;e=Gr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Gr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=zi(t,null,i.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=i.fallback,i=zr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(i.child=a)),r=i.sibling=zr(l,n,l.expirationTime),n=i,i.childExpirationTime=0,n.return=r.return=t):n=r=Bi(t,r.child,i.children,n)):(l=e.child,a?(a=i.fallback,(i=Gr(null,r,0,null)).child=l,0==(1&t.mode)&&(i.child=null!==t.memoizedState?t.child.child:t.child),(r=i.sibling=Gr(a,r,n,null)).effectTag|=2,n=i,i.childExpirationTime=0,n.return=r.return=t):r=n=Bi(t,l,i.children,n)),t.stateNode=e.stateNode;return t.memoizedState=o,t.child=n,r}function fo(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=zr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function po(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Or.current&&r<n){switch(t.tag){case 3:so(t),Zi();break;case 5:Oi(t);break;case 1:Nr(t.type)&&Mr(t);break;case 4:Si(t,t.stateNode.containerInfo);break;case 10:vi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?co(e,t,n):null!==(t=fo(e,t,n))?t.sibling:null}return fo(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var i=Dr(t,kr.current);if(bi(t),i=r(e,i),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Nr(r)){var o=!0;Mr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&Pi(t,r,l,e),i.updater=Li,t.stateNode=i,i._reactInternalFiber=t,ji(t,r,e,n),t=uo(null,t,r,!0,o,n)}else t.tag=0,to(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(i),t.type=e,i=t.tag=function(e){if("function"==typeof e)return Br(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=Di(e,o),l=void 0,i){case 0:l=ao(null,t,e,o,n);break;case 1:l=lo(null,t,e,o,n);break;case 11:l=no(null,t,e,o,n);break;case 14:l=ro(null,t,e,Di(e.type,o),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,i=t.pendingProps,ao(e,t,r,i=t.elementType===r?i:Di(r,i),n);case 1:return r=t.type,i=t.pendingProps,lo(e,t,r,i=t.elementType===r?i:Di(r,i),n);case 3:return so(t),null===(r=t.updateQueue)&&a("282"),i=null!==(i=t.memoizedState)?i.element:null,si(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(Zi(),t=fo(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(Gi=wr(t.stateNode.containerInfo),qi=t,i=$i=!0),i?(t.effectTag|=2,t.child=zi(t,null,r,n)):(to(e,t,r,n),Zi()),t=t.child),t;case 5:return Oi(t),null===e&&Qi(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,l=i.children,vr(r,i)?l=null:null!==o&&vr(r,o)&&(t.effectTag|=16),oo(e,t),1!==n&&1&t.mode&&i.hidden?(t.expirationTime=1,t=null):(to(e,t,l,n),t=t.child),t;case 6:return null===e&&Qi(t),null;case 13:return co(e,t,n);case 4:return Si(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bi(t,null,r,n):to(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,no(e,t,r,i=t.elementType===r?i:Di(r,i),n);case 7:return to(e,t,t.pendingProps,n),t.child;case 8:case 12:return to(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,l=t.memoizedProps,vi(t,o=i.value),null!==l){var u=l.value;if(0===(o=u===o&&(0!==u||1/u==1/o)||u!=u&&o!=o?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===i.children&&!Or.current){t=fo(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){if(null!==(u=l.firstContextDependency))do{if(u.context===r&&0!=(u.observedBits&o)){if(1===l.tag){var s=ri(n);s.tag=2,oi(l,s)}l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var c=l.return;null!==c;){if(s=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}c=c.return}}s=l.child,u=u.next}while(null!==u);else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}to(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,bi(t),r=r(i=Ei(i,o.unstable_observedBits)),t.effectTag|=1,to(e,t,r,n),t.child;case 14:return o=Di(i=t.type,t.pendingProps),ro(e,t,i,o=Di(i.type,o),r,n);case 15:return io(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Di(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Nr(r)?(e=!0,Mr(t)):e=!1,bi(t),Mi(t,r,i),ji(t,r,i,n),uo(null,t,r,!0,e,n);default:a("156")}}function ho(e){e.effectTag|=4}var mo=void 0,go=void 0,vo=void 0,yo=void 0;mo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},go=function(){},vo=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(xi(Ci.current),e=null,n){case"input":a=bt(l,a),r=bt(l,r),e=[];break;case"option":a=Gn(l,a),r=Gn(l,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Kn(l,a),r=Kn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=dr)}cr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&pr(o,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),o=e,(t.updateQueue=o)&&ho(t)}},yo=function(e,t,n,r){n!==r&&ho(t)};var bo="function"==typeof WeakSet?WeakSet:Set;function Eo(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function wo(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Xo(e,t)}else t.current=null}function Co(e){switch("function"==typeof Hr&&Hr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var i=e;try{r()}catch(e){Xo(i,e)}}n=n.next}while(n!==t)}break;case 1:if(wo(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Xo(e,t)}break;case 5:wo(e);break;case 4:xo(e)}}function To(e){return 5===e.tag||3===e.tag||4===e.tag}function _o(e){e:{for(var t=e.return;null!==t;){if(To(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||To(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(n)if(r){var o=t,l=i.stateNode,u=n;8===o.nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else t.insertBefore(i.stateNode,n);else r?(l=t,u=i.stateNode,8===l.nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=dr)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function xo(e){for(var t=e,n=!1,r=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,i=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,l=o;;)if(Co(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===o)break;for(;null===l.sibling;){if(null===l.return||l.return===o)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}i?(o=r,l=t.stateNode,8===o.nodeType?o.parentNode.removeChild(l):o.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,i=!0):Co(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function So(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var i=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&function(e,t,n,r,i){e[L]=i,"input"===n&&"radio"===i.type&&null!=i.name&&wt(e,i),fr(n,r),r=fr(n,i);for(var o=0;o<t.length;o+=2){var a=t[o],l=t[o+1];"style"===a?ur(e,l):"dangerouslySetInnerHTML"===a?rr(e,l):"children"===a?ir(e,l):vt(e,a,l,r)}switch(n){case"input":Ct(e,i);break;case"textarea":Qn(e,i);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(n=i.value)?$n(e,!!i.multiple,n,!1):t!==!!i.multiple&&(null!=i.defaultValue?$n(e,!!i.multiple,i.defaultValue,!0):$n(e,!!i.multiple,i.multiple?[]:"",!1))}}(n,o,i,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Sa())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=lr("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new bo),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Jo(t=Sa(),e),null!==(e=ea(e,t))&&(Qr(e,t),0!==(t=e.expirationTime)&&ka(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var ko="function"==typeof WeakMap?WeakMap:Map;function Oo(e,t,n){(n=ri(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ma(r),Eo(e,t)},n}function Ao(e,t,n){(n=ri(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qo?qo=new Set([this]):qo.add(this));var n=t.value,i=t.stack;Eo(e,t),this.componentDidCatch(n,{componentStack:null!==i?i:""})}),n}function Do(e){switch(e.tag){case 1:Nr(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return ki(),Pr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Ai(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return ki(),null;case 10:return yi(e),null;default:return null}}var No={readContext:Ei},Io=ze.ReactCurrentOwner,Po=1073741822,Lo=0,Fo=!1,Mo=null,Ro=null,jo=0,Ho=-1,Vo=!1,Wo=null,Uo=!1,Bo=null,zo=null,qo=null;function Go(){if(null!==Mo)for(var e=Mo.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:ki(),Pr();break;case 5:Ai(t);break;case 4:ki();break;case 10:yi(t)}e=e.return}Ro=null,jo=0,Ho=-1,Vo=!1,Mo=null}function $o(){null!==zo&&(o.unstable_cancelCallback(Bo),zo())}function Ko(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Mo=e;e:{var o=t,l=jo,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Nr(t.type)&&Ir();break;case 3:ki(),Pr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==o&&null!==o.child||(Ji(t),t.effectTag&=-3),go(t);break;case 5:Ai(t);var s=xi(_i.current);if(l=t.type,null!==o&&null!=t.stateNode)vo(o,t,l,u,s),o.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=xi(Ci.current);if(Ji(t)){o=(u=t).stateNode;var f=u.type,p=u.memoizedProps,d=s;switch(o[P]=u,o[L]=p,l=void 0,s=f){case"iframe":case"object":xn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)xn(te[f],o);break;case"source":xn("error",o);break;case"img":case"image":case"link":xn("error",o),xn("load",o);break;case"form":xn("reset",o),xn("submit",o);break;case"details":xn("toggle",o);break;case"input":Et(o,p),xn("invalid",o),pr(d,"onChange");break;case"select":o._wrapperState={wasMultiple:!!p.multiple},xn("invalid",o),pr(d,"onChange");break;case"textarea":Yn(o,p),xn("invalid",o),pr(d,"onChange")}for(l in cr(s,p),f=null,p)p.hasOwnProperty(l)&&(c=p[l],"children"===l?"string"==typeof c?o.textContent!==c&&(f=["children",c]):"number"==typeof c&&o.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(l)&&null!=c&&pr(d,l));switch(s){case"input":Ue(o),Tt(o,p,!0);break;case"textarea":Ue(o),Xn(o);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(o.onclick=dr)}l=f,u.updateQueue=l,(u=null!==l)&&ho(t)}else{p=t,o=l,d=u,f=9===s.nodeType?s:s.ownerDocument,c===Jn.html&&(c=Zn(o)),c===Jn.html?"script"===o?((o=f.createElement("div")).innerHTML="<script><\/script>",f=o.removeChild(o.firstChild)):"string"==typeof d.is?f=f.createElement(o,{is:d.is}):(f=f.createElement(o),"select"===o&&d.multiple&&(f.multiple=!0)):f=f.createElementNS(c,o),(o=f)[P]=p,o[L]=u,mo(o,t,!1,!1),d=o;var h=s,m=fr(f=l,p=u);switch(f){case"iframe":case"object":xn("load",d),s=p;break;case"video":case"audio":for(s=0;s<te.length;s++)xn(te[s],d);s=p;break;case"source":xn("error",d),s=p;break;case"img":case"image":case"link":xn("error",d),xn("load",d),s=p;break;case"form":xn("reset",d),xn("submit",d),s=p;break;case"details":xn("toggle",d),s=p;break;case"input":Et(d,p),s=bt(d,p),xn("invalid",d),pr(h,"onChange");break;case"option":s=Gn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},s=i({},p,{value:void 0}),xn("invalid",d),pr(h,"onChange");break;case"textarea":Yn(d,p),s=Kn(d,p),xn("invalid",d),pr(h,"onChange");break;default:s=p}cr(f,s),c=void 0;var g=f,v=d,y=s;for(c in y)if(y.hasOwnProperty(c)){var E=y[c];"style"===c?ur(v,E):"dangerouslySetInnerHTML"===c?null!=(E=E?E.__html:void 0)&&rr(v,E):"children"===c?"string"==typeof E?("textarea"!==g||""!==E)&&ir(v,E):"number"==typeof E&&ir(v,""+E):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=E&&pr(h,c):null!=E&&vt(v,c,E,m))}switch(f){case"input":Ue(d),Tt(d,p,!1);break;case"textarea":Ue(d),Xn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+yt(p.value));break;case"select":(s=d).multiple=!!p.multiple,null!=(d=p.value)?$n(s,!!p.multiple,d,!1):null!=p.defaultValue&&$n(s,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof s.onClick&&(d.onclick=dr)}(u=gr(l,u))&&ho(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:o&&null!=t.stateNode?yo(o,t,o.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),o=xi(_i.current),xi(Ci.current),Ji(t)?(l=(u=t).stateNode,o=u.memoizedProps,l[P]=u,(u=l.nodeValue!==o)&&ho(t)):(l=t,(u=(9===o.nodeType?o:o.ownerDocument).createTextNode(u))[P]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Mo=t;break e}u=null!==u,l=null!==o&&null!==o.memoizedState,null!==o&&!u&&l&&(null!==(o=o.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=o,o.nextEffect=s):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(u!==l||0==(1&t.effectTag)&&u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:ki(),go(t);break;case 10:yi(t);break;case 9:case 14:break;case 17:Nr(t.type)&&Ir();break;default:a("156")}Mo=null}if(t=e,1===jo||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(o=l.expirationTime)>u&&(u=o),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==Mo)return Mo;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Do(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Yo(e){var t=po(e.alternate,e,jo);return e.memoizedProps=e.pendingProps,null===t&&(t=Ko(e)),Io.current=null,t}function Qo(e,t){Fo&&a("243"),$o(),Fo=!0,Io.currentDispatcher=No;var n=e.nextExpirationTimeToWorkOn;n===jo&&e===Ro&&null!==Mo||(Go(),jo=n,Mo=zr((Ro=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Mo&&!Da();)Mo=Yo(Mo);else for(;null!==Mo;)Mo=Yo(Mo)}catch(t){if(gi=mi=hi=null,null===Mo)r=!0,Ma(t);else{null===Mo&&a("271");var i=Mo,o=i.return;if(null!==o){e:{var l=e,u=o,s=i,c=t;if(o=jo,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=u;var p=-1,d=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){d=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?p=0:(-1===p||h<p)&&(p=h))}c=c.return}while(null!==c);c=u;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(null===(u=c.updateQueue)?c.updateQueue=new Set([f]):u.add(f),0==(1&c.mode)){c.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((o=ri(1073741823)).tag=2,oi(s,o))),s.expirationTime=1073741823;break e}null===(s=l.pingCache)?(s=l.pingCache=new ko,u=new Set,s.set(f,u)):void 0===(u=s.get(f))&&(u=new Set,s.set(f,u)),u.has(o)||(u.add(o),s=Zo.bind(null,l,f,o),f.then(s,s)),-1===p?l=1073741823:(-1===d&&(d=10*(1073741822-Jr(l,o))-5e3),l=d+p),0<=l&&Ho<l&&(Ho=l),c.effectTag|=2048,c.expirationTime=o;break e}c=c.return}while(null!==c);c=Error((lt(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(s))}Vo=!0,c=pi(c,s),l=u;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=o,ai(l,o=Oo(l,c,o));break e;case 1:if(f=c,p=l.type,d=l.stateNode,0==(64&l.effectTag)&&("function"==typeof p.getDerivedStateFromError||null!==d&&"function"==typeof d.componentDidCatch&&(null===qo||!qo.has(d)))){l.effectTag|=2048,l.expirationTime=o,ai(l,o=Ao(l,f,o));break e}}l=l.return}while(null!==l)}Mo=Ko(i);continue}r=!0,Ma(t)}}break}if(Fo=!1,gi=mi=hi=Io.currentDispatcher=null,r)Ro=null,e.finishedWork=null;else if(null!==Mo)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Ro=null,Vo){if(i=e.latestPendingTime,o=e.latestSuspendedTime,l=e.latestPingedTime,0!==i&&i<n||0!==o&&o<n||0!==l&&l<n)return Xr(e,n),void xa(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void xa(e,r,n,t,-1)}t&&-1!==Ho?(Xr(e,n),(t=10*(1073741822-Jr(e,n)))<Ho&&(Ho=t),t=10*(1073741822-Sa()),t=Ho-t,xa(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Xo(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qo||!qo.has(r)))return oi(n,e=Ao(n,e=pi(t,e),1073741823)),void ta(n,1073741823);break;case 3:return oi(n,e=Oo(n,e=pi(t,e),1073741823)),void ta(n,1073741823)}n=n.return}3===e.tag&&(oi(e,n=Oo(e,n=pi(t,e),1073741823)),ta(e,1073741823))}function Jo(e,t){return 0!==Lo?e=Lo:Fo?e=Uo?1073741823:jo:1&t.mode?(e=ma?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Ro&&e===jo&&--e):e=1073741823,ma&&(0===ca||e<ca)&&(ca=e),e}function Zo(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ro&&jo===n?Ro=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),Zr(n,e),0!==(n=e.expirationTime)&&ka(e,n)))}function ea(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return i}function ta(e,t){null!==(e=ea(e,t))&&(!Fo&&0!==jo&&t>jo&&Go(),Qr(e,t),Fo&&!Uo&&Ro===e||ka(e,e.expirationTime),wa>Ea&&(wa=0,a("185")))}function na(e,t,n,r,i){var o=Lo;Lo=1073741823;try{return e(t,n,r,i)}finally{Lo=o}}var ra=null,ia=null,oa=0,aa=void 0,la=!1,ua=null,sa=0,ca=0,fa=!1,pa=null,da=!1,ha=!1,ma=!1,ga=null,va=o.unstable_now(),ya=1073741822-(va/10|0),ba=ya,Ea=50,wa=0,Ca=null;function Ta(){ya=1073741822-((o.unstable_now()-va)/10|0)}function _a(e,t){if(0!==oa){if(t<oa)return;null!==aa&&o.unstable_cancelCallback(aa)}oa=t,e=o.unstable_now()-va,aa=o.unstable_scheduleCallback(Na,{timeout:10*(1073741822-t)-e})}function xa(e,t,n,r,i){e.expirationTime=r,0!==i||Da()?0<i&&(e.timeoutHandle=yr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,Ta(),ba=ya,Pa(e,n)}.bind(null,e,t,n),i)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Sa(){return la?ba:(Oa(),0!==sa&&1!==sa||(Ta(),ba=ya),ba)}function ka(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ia?(ra=ia=e,e.nextScheduledRoot=e):(ia=ia.nextScheduledRoot=e).nextScheduledRoot=ra):t>e.expirationTime&&(e.expirationTime=t),la||(da?ha&&(ua=e,sa=1073741823,La(e,1073741823,!1)):1073741823===t?Ia(1073741823,!1):_a(e,t))}function Oa(){var e=0,t=null;if(null!==ia)for(var n=ia,r=ra;null!==r;){var i=r.expirationTime;if(0===i){if((null===n||null===ia)&&a("244"),r===r.nextScheduledRoot){ra=ia=r.nextScheduledRoot=null;break}if(r===ra)ra=i=r.nextScheduledRoot,ia.nextScheduledRoot=i,r.nextScheduledRoot=null;else{if(r===ia){(ia=n).nextScheduledRoot=ra,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(i>e&&(e=i,t=r),r===ia)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ua=t,sa=e}var Aa=!1;function Da(){return!!Aa||!!o.unstable_shouldYield()&&(Aa=!0)}function Na(){try{if(!Da()&&null!==ra){Ta();var e=ra;do{var t=e.expirationTime;0!==t&&ya<=t&&(e.nextExpirationTimeToWorkOn=ya),e=e.nextScheduledRoot}while(e!==ra)}Ia(0,!0)}finally{Aa=!1}}function Ia(e,t){if(Oa(),t)for(Ta(),ba=ya;null!==ua&&0!==sa&&e<=sa&&!(Aa&&ya>sa);)La(ua,sa,ya>sa),Oa(),Ta(),ba=ya;else for(;null!==ua&&0!==sa&&e<=sa;)La(ua,sa,!1),Oa();if(t&&(oa=0,aa=null),0!==sa&&_a(ua,sa),wa=0,Ca=null,null!==ga)for(e=ga,ga=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){fa||(fa=!0,pa=e)}}if(fa)throw e=pa,pa=null,fa=!1,e}function Pa(e,t){la&&a("253"),ua=e,sa=t,La(e,t,!1),Ia(1073741823,!1)}function La(e,t,n){if(la&&a("245"),la=!0,n){var r=e.finishedWork;null!==r?Fa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Qo(e,n),null!==(r=e.finishedWork)&&(Da()?e.finishedWork=r:Fa(e,r,t)))}else null!==(r=e.finishedWork)?Fa(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Qo(e,n),null!==(r=e.finishedWork)&&Fa(e,r,t));la=!1}function Fa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===ga?ga=[r]:ga.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===Ca?wa++:(Ca=e,wa=0),Uo=Fo=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var i=t.childExpirationTime;if(r=i>r?i:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(i=e.latestPendingTime)&&(i>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(i=e.earliestSuspendedTime)?Qr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Qr(e,r)):r>i&&Qr(e,r)),Zr(0,e),Io.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=_n,Rn(i=Mn())){if("selectionStart"in i)var o={start:i.selectionStart,end:i.selectionEnd};else e:{var l=(o=(o=i.ownerDocument)&&o.defaultView||window).getSelection&&o.getSelection();if(l&&0!==l.rangeCount){o=l.anchorNode;var u=l.anchorOffset,s=l.focusNode;l=l.focusOffset;try{o.nodeType,s.nodeType}catch(e){o=null;break e}var c=0,f=-1,p=-1,d=0,h=0,m=i,g=null;t:for(;;){for(var v;m!==o||0!==u&&3!==m.nodeType||(f=c+u),m!==s||0!==l&&3!==m.nodeType||(p=c+l),3===m.nodeType&&(c+=m.nodeValue.length),null!==(v=m.firstChild);)g=m,m=v;for(;;){if(m===i)break t;if(g===o&&++d===u&&(f=c),g===s&&++h===l&&(p=c),null!==(v=m.nextSibling))break;g=(m=g).parentNode}m=v}o=-1===f||-1===p?null:{start:f,end:p}}else o=null}o=o||{start:0,end:0}}else o=null;for(mr={focusedElem:i,selectionRange:o},_n=!1,Wo=r;null!==Wo;){i=!1,o=void 0;try{for(;null!==Wo;){if(256&Wo.effectTag)e:{var y=Wo.alternate;switch((u=Wo).tag){case 0:case 11:case 15:break e;case 1:if(256&u.effectTag&&null!==y){var b=y.memoizedProps,E=y.memoizedState,w=u.stateNode,C=w.getSnapshotBeforeUpdate(u.elementType===u.type?b:Di(u.type,b),E);w.__reactInternalSnapshotBeforeUpdate=C}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Wo=Wo.nextEffect}}catch(e){i=!0,o=e}i&&(null===Wo&&a("178"),Xo(Wo,o),null!==Wo&&(Wo=Wo.nextEffect))}for(Wo=r;null!==Wo;){y=!1,b=void 0;try{for(;null!==Wo;){var T=Wo.effectTag;if(16&T&&ir(Wo.stateNode,""),128&T){var _=Wo.alternate;if(null!==_){var x=_.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(14&T){case 2:_o(Wo),Wo.effectTag&=-3;break;case 6:_o(Wo),Wo.effectTag&=-3,So(Wo.alternate,Wo);break;case 4:So(Wo.alternate,Wo);break;case 8:xo(E=Wo),E.return=null,E.child=null,E.memoizedState=null,E.updateQueue=null;var S=E.alternate;null!==S&&(S.return=null,S.child=null,S.memoizedState=null,S.updateQueue=null)}Wo=Wo.nextEffect}}catch(e){y=!0,b=e}y&&(null===Wo&&a("178"),Xo(Wo,b),null!==Wo&&(Wo=Wo.nextEffect))}if(x=mr,_=Mn(),T=x.focusedElem,y=x.selectionRange,_!==T&&T&&T.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(T.ownerDocument.documentElement,T)){null!==y&&Rn(T)&&(_=y.start,void 0===(x=y.end)&&(x=_),"selectionStart"in T?(T.selectionStart=_,T.selectionEnd=Math.min(x,T.value.length)):(x=(_=T.ownerDocument||document)&&_.defaultView||window).getSelection&&(x=x.getSelection(),b=T.textContent.length,S=Math.min(y.start,b),y=void 0===y.end?S:Math.min(y.end,b),!x.extend&&S>y&&(b=y,y=S,S=b),b=Fn(T,S),E=Fn(T,y),b&&E&&(1!==x.rangeCount||x.anchorNode!==b.node||x.anchorOffset!==b.offset||x.focusNode!==E.node||x.focusOffset!==E.offset)&&((_=_.createRange()).setStart(b.node,b.offset),x.removeAllRanges(),S>y?(x.addRange(_),x.extend(E.node,E.offset)):(_.setEnd(E.node,E.offset),x.addRange(_))))),_=[];for(x=T;x=x.parentNode;)1===x.nodeType&&_.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<_.length;T++)(x=_[T]).element.scrollLeft=x.left,x.element.scrollTop=x.top}for(mr=null,_n=!!hr,hr=null,e.current=t,Wo=r;null!==Wo;){r=!1,T=void 0;try{for(_=n;null!==Wo;){var k=Wo.effectTag;if(36&k){var O=Wo.alternate;switch(S=_,(x=Wo).tag){case 0:case 11:case 15:break;case 1:var A=x.stateNode;if(4&x.effectTag)if(null===O)A.componentDidMount();else{var D=x.elementType===x.type?O.memoizedProps:Di(x.type,O.memoizedProps);A.componentDidUpdate(D,O.memoizedState,A.__reactInternalSnapshotBeforeUpdate)}var N=x.updateQueue;null!==N&&ci(0,N,A);break;case 3:var I=x.updateQueue;if(null!==I){if(y=null,null!==x.child)switch(x.child.tag){case 5:y=x.child.stateNode;break;case 1:y=x.child.stateNode}ci(0,I,y)}break;case 5:var P=x.stateNode;null===O&&4&x.effectTag&&gr(x.type,x.memoizedProps)&&P.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&k){var L=Wo.ref;if(null!==L){var F=Wo.stateNode;switch(Wo.tag){case 5:var M=F;break;default:M=F}"function"==typeof L?L(M):L.current=M}}Wo=Wo.nextEffect}}catch(e){r=!0,T=e}r&&(null===Wo&&a("178"),Xo(Wo,T),null!==Wo&&(Wo=Wo.nextEffect))}Fo=Uo=!1,"function"==typeof jr&&jr(t.stateNode),k=t.expirationTime,0===(t=(t=t.childExpirationTime)>k?t:k)&&(qo=null),e.expirationTime=t,e.finishedWork=null}function Ma(e){null===ua&&a("246"),ua.expirationTime=0,fa||(fa=!0,pa=e)}function Ra(e,t){var n=da;da=!0;try{return e(t)}finally{(da=n)||la||Ia(1073741823,!1)}}function ja(e,t){if(da&&!ha){ha=!0;try{return e(t)}finally{ha=!1}}return e(t)}function Ha(e,t,n){if(ma)return e(t,n);da||la||0===ca||(Ia(ca,!1),ca=0);var r=ma,i=da;da=ma=!0;try{return e(t,n)}finally{ma=r,(da=i)||la||Ia(1073741823,!1)}}function Va(e,t,n,r,i){var o=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Nr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var u=n.type;if(Nr(u)){n=Fr(n,u,l);break e}}n=l}else n=Sr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(i=ri(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),$o(),oi(o,i),ta(o,r),r}function Wa(e,t,n,r){var i=t.current;return Va(e,t,n,i=Jo(Sa(),i),r)}function Ua(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ba(e){var t=1073741822-25*(1+((1073741822-Sa()+500)/25|0));t>=Po&&(t=Po-1),this._expirationTime=Po=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function za(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function qa(e,t,n){e={current:t=Ur(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ga(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $a(e,t,n,r,i){Ga(n)||a("200");var o=n._reactRootContainer;if(o){if("function"==typeof i){var l=i;i=function(){var e=Ua(o._internalRoot);l.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new qa(e,!1,t)}(n,r),"function"==typeof i){var u=i;i=function(){var e=Ua(o._internalRoot);u.call(e)}}ja(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)})}return Ua(o._internalRoot)}function Ka(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ga(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=j(r);i||a("90"),Be(r),Ct(r,i)}}}break;case"textarea":Qn(e,n);break;case"select":null!=(t=n.value)&&$n(e,!!n.multiple,t,!1)}},Ba.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new za;return Va(e,t,null,n,r._onCommit),r},Ba.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ba.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;null===r&&a("251"),r._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Pa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Ba.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},za.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},za.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},qa.prototype.render=function(e,t){var n=this._internalRoot,r=new za;return null!==(t=void 0===t?null:t)&&r.then(t),Wa(e,n,null,r._onCommit),r},qa.prototype.unmount=function(e){var t=this._internalRoot,n=new za;return null!==(e=void 0===e?null:e)&&n.then(e),Wa(null,t,null,n._onCommit),n},qa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,i=new za;return null!==(n=void 0===n?null:n)&&i.then(n),Wa(t,r,e,i._onCommit),i},qa.prototype.createBatch=function(){var e=new Ba(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ie=Ra,Pe=Ha,Le=function(){la||0===ca||(Ia(ca,!1),ca=0)};var Ya={createPortal:Ka,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return $a(null,e,t,!0,n)},render:function(e,t,n){return $a(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),$a(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ga(e)||a("40"),!!e._reactRootContainer&&(ja(function(){$a(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ka.apply(void 0,arguments)},unstable_batchedUpdates:Ra,unstable_interactiveUpdates:Ha,flushSync:function(e,t){la&&a("187");var n=da;da=!0;try{return na(e,t)}finally{da=n,Ia(1073741823,!1)}},unstable_createRoot:function(e,t){return Ga(e)||a("299","unstable_createRoot"),new qa(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=da;da=!0;try{na(e)}finally{(da=t)||la||Ia(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[M,R,j,A.injectEventPluginsByName,y,z,function(e){S(e,B)},De,Ne,On,N]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);jr=Vr(function(e){return t.onCommitFiberRoot(n,e)}),Hr=Vr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(i({},e,{overrideProps:null,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:F,bundleType:0,version:"16.7.0",rendererPackageName:"react-dom"});var Qa={default:Ya},Xa=Qa&&Ya||Qa;e.exports=Xa.default||Xa},function(e,t,n){"use strict";e.exports=n(19)},function(e,t,n){"use strict";(function(e){
/** @license React v0.12.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,i=3,o=-1,a=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?T():u=!0,C(p,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=i,l=a;i=e,a=t;try{var u=r()}finally{i=o,a=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function p(e){l=!0;var i=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{c()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{c()}while(null!==n&&!_())}finally{l=!1,r=i,null!==n?s():u=!1,f()}}var d,h,m=Date,g="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,y="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function E(e){d=y(function(t){v(h),e(t)}),h=g(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return m.now()};var C,T,_,x=null;if("undefined"!=typeof window?x=window:void 0!==e&&(x=e),x&&x._schedMock){var S=x._schedMock;C=S[0],T=S[1],_=S[2],t.unstable_now=S[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var k=null,O=function(e){if(null!==k)try{k(e)}finally{k=null}};C=function(e){null!==k?setTimeout(C,0,e):(k=e,setTimeout(O,0,!1))},T=function(){k=null},_=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var A=null,D=!1,N=-1,I=!1,P=!1,L=0,F=33,M=33;_=function(){return L<=t.unstable_now()};var R=new MessageChannel,j=R.port2;R.port1.onmessage=function(){D=!1;var e=A,n=N;A=null,N=-1;var r=t.unstable_now(),i=!1;if(0>=L-r){if(!(-1!==n&&n<=r))return I||(I=!0,E(H)),A=e,void(N=n);i=!0}if(null!==e){P=!0;try{e(i)}finally{P=!1}}};var H=function(e){if(null!==A){E(H);var t=e-L+M;t<M&&F<M?(8>t&&(t=8),M=t<F?F:t):F=t,L=e+M,D||(D=!0,j.postMessage(void 0))}else I=!1};C=function(e,t){A=e,N=t,P||0>t?j.postMessage(void 0):I||(I=!0,E(H))},T=function(){A=null,D=!1,N=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=i,a=o;i=e,o=t.unstable_now();try{return n()}finally{i=r,o=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==o?o:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(i){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:i,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=i;return function(){var r=i,a=o;i=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{i=r,o=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return i},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||_())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(4))},function(e,t,n){
/*!
  * Bootstrap v4.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){o(e,t,n[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var l=function(e){var t="transitionend";function n(t){var n=this,i=!1;return e(this).one(r.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||r.triggerTransitionEnd(n)},t),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=e.getAttribute("href")||"");try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),r=parseFloat(n);return r?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],a=t[i],l=a&&r.isElement(a)?"element":(u=a,{}.toString.call(u).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(l))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+l+'" but expected type "'+o+'".')}var u}};return e.fn.emulateTransitionEnd=n,e.event.special[r.TRANSITION_END]={bindType:t,delegateType:t,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},r}(t),u=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},r={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){var t=this._element;e&&(t=this._getRootElement(e));var n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var n=l.getSelectorFromElement(t),i=!1;return n&&(i=document.querySelector(n)),i||(i=e(t).closest("."+r.ALERT)[0]),i},o._triggerCloseEvent=function(t){var r=e.Event(n.CLOSE);return e(t).trigger(r),r},o._removeElement=function(t){var n=this;if(e(t).removeClass(r.SHOW),e(t).hasClass(r.FADE)){var i=l.getTransitionDurationFromElement(t);e(t).one(l.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(i)}else this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),s=function(e){var t="button",n=e.fn[t],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},l=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(o.DATA_TOGGLE)[0];if(i){var a=this._element.querySelector(o.INPUT);if(a){if("radio"===a.type)if(a.checked&&this._element.classList.contains(r.ACTIVE))t=!1;else{var l=i.querySelector(o.ACTIVE);l&&e(l).removeClass(r.ACTIVE)}if(t){if(a.hasAttribute("disabled")||i.hasAttribute("disabled")||a.classList.contains("disabled")||i.classList.contains("disabled"))return;a.checked=!this._element.classList.contains(r.ACTIVE),e(a).trigger("change")}a.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(r.ACTIVE)),t&&e(this._element).toggleClass(r.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()})},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(a.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(r.BUTTON)||(n=e(n).closest(o.BUTTON)),l._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(o.BUTTON)[0];e(n).toggleClass(r.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=l._jQueryInterface,e.fn[t].Constructor=l,e.fn[t].noConflict=function(){return e.fn[t]=n,l._jQueryInterface},l}(t),c=function(e){var t="carousel",n="bs.carousel",r="."+n,o=e.fn[t],u={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},s={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},d={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function o(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=this._element.querySelector(d.INDICATORS),this._addEventListeners()}var h=o.prototype;return h.next=function(){this._isSliding||this._slide(c.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(c.PREV)},h.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(d.NEXT_PREV)&&(l.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=this._element.querySelector(d.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(f.SLID,function(){return n.to(t)});else{if(r===t)return this.pause(),void this.cycle();var i=t>r?c.NEXT:c.PREV;this._slide(i,this._items[t])}},h.dispose=function(){e(this._element).off(r),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=a({},u,e),l.typeCheckConfig(t,e,s),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(f.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(f.MOUSEENTER,function(e){return t.pause(e)}).on(f.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(f.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(d.ITEM)):[],this._items.indexOf(e)},h._getItemByDirection=function(e,t){var n=e===c.NEXT,r=e===c.PREV,i=this._getItemIndex(t),o=this._items.length-1,a=r&&0===i||n&&i===o;if(a&&!this._config.wrap)return t;var l=e===c.PREV?-1:1,u=(i+l)%this._items.length;return-1===u?this._items[this._items.length-1]:this._items[u]},h._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(d.ACTIVE_ITEM)),o=e.Event(f.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(d.ACTIVE));e(n).removeClass(p.ACTIVE);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(p.ACTIVE)}},h._slide=function(t,n){var r,i,o,a=this,u=this._element.querySelector(d.ACTIVE_ITEM),s=this._getItemIndex(u),h=n||u&&this._getItemByDirection(t,u),m=this._getItemIndex(h),g=Boolean(this._interval);if(t===c.NEXT?(r=p.LEFT,i=p.NEXT,o=c.LEFT):(r=p.RIGHT,i=p.PREV,o=c.RIGHT),h&&e(h).hasClass(p.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(h,o);if(!v.isDefaultPrevented()&&u&&h){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(f.SLID,{relatedTarget:h,direction:o,from:s,to:m});if(e(this._element).hasClass(p.SLIDE)){e(h).addClass(i),l.reflow(h),e(u).addClass(r),e(h).addClass(r);var b=l.getTransitionDurationFromElement(u);e(u).one(l.TRANSITION_END,function(){e(h).removeClass(r+" "+i).addClass(p.ACTIVE),e(u).removeClass(p.ACTIVE+" "+i+" "+r),a._isSliding=!1,setTimeout(function(){return e(a._element).trigger(y)},0)}).emulateTransitionEnd(b)}else e(u).removeClass(p.ACTIVE),e(h).addClass(p.ACTIVE),this._isSliding=!1,e(this._element).trigger(y);g&&this.cycle()}}},o._jQueryInterface=function(t){return this.each(function(){var r=e(this).data(n),i=a({},u,e(this).data());"object"==typeof t&&(i=a({},i,t));var l="string"==typeof t?t:i.slide;if(r||(r=new o(this,i),e(this).data(n,r)),"number"==typeof t)r.to(t);else if("string"==typeof l){if(void 0===r[l])throw new TypeError('No method named "'+l+'"');r[l]()}else i.interval&&(r.pause(),r.cycle())})},o._dataApiClickHandler=function(t){var r=l.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(p.CAROUSEL)){var u=a({},e(i).data(),e(this).data()),s=this.getAttribute("data-slide-to");s&&(u.interval=!1),o._jQueryInterface.call(e(i),u),s&&e(i).data(n).to(s),t.preventDefault()}}},i(o,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}}]),o}();return e(document).on(f.CLICK_DATA_API,d.DATA_SLIDE,h._dataApiClickHandler),e(window).on(f.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(d.DATA_RIDE)),n=0,r=t.length;n<r;n++){var i=e(t[n]);h._jQueryInterface.call(i,i.data())}}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=o,h._jQueryInterface},h}(t),f=function(e){var t="collapse",n="bs.collapse",r=e.fn[t],o={toggle:!0,parent:""},u={toggle:"boolean",parent:"(string|element)"},s={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},f={WIDTH:"width",HEIGHT:"height"},p={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},d=function(){function r(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=[].slice.call(document.querySelectorAll(p.DATA_TOGGLE)),i=0,o=r.length;i<o;i++){var a=r[i],u=l.getSelectorFromElement(a),s=[].slice.call(document.querySelectorAll(u)).filter(function(e){return e===t});null!==u&&s.length>0&&(this._selector=u,this._triggerArray.push(a))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var d=r.prototype;return d.toggle=function(){e(this._element).hasClass(c.SHOW)?this.hide():this.show()},d.show=function(){var t,i,o=this;if(!(this._isTransitioning||e(this._element).hasClass(c.SHOW)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(p.ACTIVES)).filter(function(e){return e.getAttribute("data-parent")===o._config.parent})).length&&(t=null),t&&(i=e(t).not(this._selector).data(n))&&i._isTransitioning))){var a=e.Event(s.SHOW);if(e(this._element).trigger(a),!a.isDefaultPrevented()){t&&(r._jQueryInterface.call(e(t).not(this._selector),"hide"),i||e(t).data(n,null));var u=this._getDimension();e(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[u]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var f=u[0].toUpperCase()+u.slice(1),d="scroll"+f,h=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,function(){e(o._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),o._element.style[u]="",o.setTransitioning(!1),e(o._element).trigger(s.SHOWN)}).emulateTransitionEnd(h),this._element.style[u]=this._element[d]+"px"}}},d.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(c.SHOW)){var n=e.Event(s.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",l.reflow(this._element),e(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var a=this._triggerArray[o],u=l.getSelectorFromElement(a);if(null!==u){var f=e([].slice.call(document.querySelectorAll(u)));f.hasClass(c.SHOW)||e(a).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[r]="";var p=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,function(){t.setTransitioning(!1),e(t._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(s.HIDDEN)}).emulateTransitionEnd(p)}}},d.setTransitioning=function(e){this._isTransitioning=e},d.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},d._getConfig=function(e){return(e=a({},o,e)).toggle=Boolean(e.toggle),l.typeCheckConfig(t,e,u),e},d._getDimension=function(){var t=e(this._element).hasClass(f.WIDTH);return t?f.WIDTH:f.HEIGHT},d._getParent=function(){var t=this,n=null;l.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return e(o).each(function(e,n){t._addAriaAndCollapsedClass(r._getTargetFromElement(n),[n])}),n},d._addAriaAndCollapsedClass=function(t,n){if(t){var r=e(t).hasClass(c.SHOW);n.length&&e(n).toggleClass(c.COLLAPSED,!r).attr("aria-expanded",r)}},r._getTargetFromElement=function(e){var t=l.getSelectorFromElement(e);return t?document.querySelector(t):null},r._jQueryInterface=function(t){return this.each(function(){var i=e(this),l=i.data(n),u=a({},o,i.data(),"object"==typeof t&&t?t:{});if(!l&&u.toggle&&/show|hide/.test(t)&&(u.toggle=!1),l||(l=new r(this,u),i.data(n,l)),"string"==typeof t){if(void 0===l[t])throw new TypeError('No method named "'+t+'"');l[t]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return o}}]),r}();return e(document).on(s.CLICK_DATA_API,p.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var r=e(this),i=l.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(i));e(o).each(function(){var t=e(this),i=t.data(n),o=i?"toggle":r.data();d._jQueryInterface.call(t,o)})}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=r,d._jQueryInterface},d}(t),p=function(e){var t="dropdown",r="bs.dropdown",o="."+r,u=e.fn[t],s=new RegExp("38|40|27"),c={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},f={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},p={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},d={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=u.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(f.DISABLED)){var t=u._getParentFromElement(this._element),r=e(this._menu).hasClass(f.SHOW);if(u._clearMenus(),!r){var i={relatedTarget:this._element},o=e.Event(c.SHOW,i);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;"parent"===this._config.reference?a=t:l.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(t).addClass(f.POSITION_STATIC),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(p.NAVBAR_NAV).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(f.SHOW),e(t).toggleClass(f.SHOW).trigger(e.Event(c.SHOWN,i))}}}},g.dispose=function(){e.removeData(this._element,r),e(this._element).off(o),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(c.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(n){return n=a({},this.constructor.Default,e(this._element).data(),n),l.typeCheckConfig(t,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(p.MENU))}return this._menu},g._getPlacement=function(){var t=e(this._element.parentNode),n=d.BOTTOM;return t.hasClass(f.DROPUP)?(n=d.TOP,e(this._menu).hasClass(f.MENURIGHT)&&(n=d.TOPEND)):t.hasClass(f.DROPRIGHT)?n=d.RIGHT:t.hasClass(f.DROPLEFT)?n=d.LEFT:e(this._menu).hasClass(f.MENURIGHT)&&(n=d.BOTTOMEND),n},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},u._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r),i="object"==typeof t?t:null;if(n||(n=new u(this,i),e(this).data(r,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},u._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=[].slice.call(document.querySelectorAll(p.DATA_TOGGLE)),i=0,o=n.length;i<o;i++){var a=u._getParentFromElement(n[i]),l=e(n[i]).data(r),s={relatedTarget:n[i]};if(t&&"click"===t.type&&(s.clickEvent=t),l){var d=l._menu;if(e(a).hasClass(f.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(a,t.target))){var h=e.Event(c.HIDE,s);e(a).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),n[i].setAttribute("aria-expanded","false"),e(d).removeClass(f.SHOW),e(a).removeClass(f.SHOW).trigger(e.Event(c.HIDDEN,s)))}}}},u._getParentFromElement=function(e){var t,n=l.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(p.MENU).length)):s.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(f.DISABLED))){var n=u._getParentFromElement(this),r=e(n).hasClass(f.SHOW);if((r||27===t.which&&32===t.which)&&(!r||27!==t.which&&32!==t.which)){var i=[].slice.call(n.querySelectorAll(p.VISIBLE_ITEMS));if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var a=n.querySelector(p.DATA_TOGGLE);e(a).trigger("focus")}e(this).trigger("click")}}},i(u,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return m}}]),u}();return e(document).on(c.KEYDOWN_DATA_API,p.DATA_TOGGLE,g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,p.MENU,g._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,g._clearMenus).on(c.CLICK_DATA_API,p.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(c.CLICK_DATA_API,p.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=u,g._jQueryInterface},g}(t),d=function(e){var t="modal",n=".bs.modal",r=e.fn.modal,o={backdrop:!0,keyboard:!0,focus:!0,show:!0},u={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},s={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},p=function(){function r(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(f.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var p=r.prototype;return p.toggle=function(e){return this._isShown?this.hide():this.show(e)},p.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){e(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var r=e.Event(s.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(s.CLICK_DISMISS,f.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(s.MOUSEDOWN_DISMISS,function(){e(n._element).one(s.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},p.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var r=e.Event(s.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(c.FADE);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(s.FOCUSIN),e(this._element).removeClass(c.SHOW),e(this._element).off(s.CLICK_DISMISS),e(this._dialog).off(s.MOUSEDOWN_DISMISS),i){var o=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(o)}else this._hideModal()}}},p.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},p.handleUpdate=function(){this._adjustDialog()},p._getConfig=function(e){return e=a({},o,e),l.typeCheckConfig(t,e,u),e},p._showElement=function(t){var n=this,r=e(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,r&&l.reflow(this._element),e(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var i=e.Event(s.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};if(r){var a=l.getTransitionDurationFromElement(this._element);e(this._dialog).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},p._enforceFocus=function(){var t=this;e(document).off(s.FOCUSIN).on(s.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},p._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(s.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(s.KEYDOWN_DISMISS)},p._setResizeEvent=function(){var t=this;this._isShown?e(window).on(s.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(s.RESIZE)},p._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(c.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(s.HIDDEN)})},p._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},p._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,r&&this._backdrop.classList.add(r),e(this._backdrop).appendTo(document.body),e(this._element).on(s.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),r&&l.reflow(this._backdrop),e(this._backdrop).addClass(c.SHOW),!t)return;if(!r)return void t();var i=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(c.SHOW);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(c.FADE)){var a=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else t&&t()},p._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},p._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},p._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},p._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(f.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(f.STICKY_CONTENT));e(n).each(function(n,r){var i=r.style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(r).each(function(n,r){var i=r.style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")});var i=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}},p._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(f.FIXED_CONTENT));e(t).each(function(t,n){var r=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=r||""});var n=[].slice.call(document.querySelectorAll(""+f.STICKY_CONTENT));e(n).each(function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")});var r=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},p._getScrollbarWidth=function(){var e=document.createElement("div");e.className=c.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},r._jQueryInterface=function(t,n){return this.each(function(){var i=e(this).data("bs.modal"),l=a({},o,e(this).data(),"object"==typeof t&&t?t:{});if(i||(i=new r(this,l),e(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}else l.show&&i.show(n)})},i(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return o}}]),r}();return e(document).on(s.CLICK_DATA_API,f.DATA_TOGGLE,function(t){var n,r=this,i=l.getSelectorFromElement(this);i&&(n=document.querySelector(i));var o=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var u=e(n).one(s.SHOW,function(t){t.isDefaultPrevented()||u.one(s.HIDDEN,function(){e(r).is(":visible")&&r.focus()})});p._jQueryInterface.call(e(n),o,this)}),e.fn.modal=p._jQueryInterface,e.fn.modal.Constructor=p,e.fn.modal.noConflict=function(){return e.fn.modal=r,p._jQueryInterface},p}(t),h=function(e){var t="tooltip",r=".bs.tooltip",o=e.fn[t],u=new RegExp("(^|\\s)bs-tooltip\\S+","g"),s={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},f={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},p={SHOW:"show",OUT:"out"},d={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},h={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function o(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=o.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!i)return;var o=this.getTipElement(),a=l.getUID(this.constructor.NAME);o.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&e(o).addClass(h.FADE);var u="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,s=this._getAttachment(u);this.addAttachmentClass(s);var c=!1===this.config.container?document.body:e(document).find(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(c),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var f=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===p.OUT&&t._leave(null,t)};if(e(this.tip).hasClass(h.FADE)){var d=l.getTransitionDurationFromElement(this.tip);e(this.tip).one(l.TRANSITION_END,f).emulateTransitionEnd(d)}else f()}},v.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==p.SHOW&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(r).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,e(this.tip).hasClass(h.FADE)){var a=l.getTransitionDurationFromElement(r);e(r).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(m.TOOLTIP_INNER)),this.getTitle()),e(t).removeClass(h.FADE+" "+h.SHOW)},v.setElementContent=function(t,n){var r=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?r?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[r?"html":"text"](n)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return c[e.toUpperCase()]},v._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==g.MANUAL){var r=n===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===p.SHOW?n._hoverState=p.SHOW:(clearTimeout(n._timeout),n._hoverState=p.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===p.SHOW&&n.show()},n.config.delay.show):n.show())},v._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=p.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===p.OUT&&n.hide()},n.config.delay.hide):n.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(n){return"number"==typeof(n=a({},this.constructor.Default,e(this.element).data(),"object"==typeof n&&n?n:{})).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),l.typeCheckConfig(t,n,this.constructor.DefaultType),n},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(u);null!==n&&n.length&&t.removeClass(n.join(""))},v._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),r="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,r),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(o,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return f}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return s}}]),o}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=o,v._jQueryInterface},v}(t),m=function(e){var t="popover",n=".bs.popover",r=e.fn[t],o=new RegExp("(^|\\s)bs-popover\\S+","g"),l=a({},h.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),u=a({},h.DefaultType,{content:"(string|element|function)"}),s={FADE:"fade",SHOW:"show"},c={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},p=function(r){var a,p;function d(){return r.apply(this,arguments)||this}p=r,(a=d).prototype=Object.create(p.prototype),a.prototype.constructor=a,a.__proto__=p;var h=d.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(c.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(c.CONTENT),n),t.removeClass(s.FADE+" "+s.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(o);null!==n&&n.length>0&&t.removeClass(n.join(""))},d._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new d(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(d,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return u}}]),d}(h);return e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=r,p._jQueryInterface},p}(t),g=function(e){var t="scrollspy",n=e.fn[t],r={offset:10,method:"auto",target:""},o={offset:"number",method:"string",target:"(string|element)"},u={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},s={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},f={OFFSET:"offset",POSITION:"position"},p=function(){function n(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(u.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var p=n.prototype;return p.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?f.OFFSET:f.POSITION,r="auto"===this._config.method?n:this._config.method,i=r===f.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=[].slice.call(document.querySelectorAll(this._selector));o.map(function(t){var n,o=l.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[r]().top+i,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},p.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},p._getConfig=function(n){if("string"!=typeof(n=a({},r,"object"==typeof n&&n?n:{})).target){var i=e(n.target).attr("id");i||(i=l.getUID(t),e(n.target).attr("id",i)),n.target="#"+i}return l.typeCheckConfig(t,n,o),n},p._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},p._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},p._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},p._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length,o=i;o--;){var a=this._activeTarget!==this._targets[o]&&e>=this._offsets[o]&&(void 0===this._offsets[o+1]||e<this._offsets[o+1]);a&&this._activate(this._targets[o])}}},p._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var r=e([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass(s.DROPDOWN_ITEM)?(r.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(s.ACTIVE),r.addClass(s.ACTIVE)):(r.addClass(s.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(s.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(s.ACTIVE)),e(this._scrollElement).trigger(u.ACTIVATE,{relatedTarget:t})},p._clear=function(){var t=[].slice.call(document.querySelectorAll(this._selector));e(t).filter(c.ACTIVE).removeClass(s.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.scrollspy"),i="object"==typeof t&&t;if(r||(r=new n(this,i),e(this).data("bs.scrollspy",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return r}}]),n}();return e(window).on(u.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(c.DATA_SPY)),n=t.length,r=n;r--;){var i=e(t[r]);p._jQueryInterface.call(i,i.data())}}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=n,p._jQueryInterface},p}(t),v=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},a=function(){function t(e){this._element=e}var a=t.prototype;return a.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(r.ACTIVE)||e(this._element).hasClass(r.DISABLED))){var i,a,u=e(this._element).closest(o.NAV_LIST_GROUP)[0],s=l.getSelectorFromElement(this._element);if(u){var c="UL"===u.nodeName?o.ACTIVE_UL:o.ACTIVE;a=(a=e.makeArray(e(u).find(c)))[a.length-1]}var f=e.Event(n.HIDE,{relatedTarget:this._element}),p=e.Event(n.SHOW,{relatedTarget:a});if(a&&e(a).trigger(f),e(this._element).trigger(p),!p.isDefaultPrevented()&&!f.isDefaultPrevented()){s&&(i=document.querySelector(s)),this._activate(this._element,u);var d=function(){var r=e.Event(n.HIDDEN,{relatedTarget:t._element}),i=e.Event(n.SHOWN,{relatedTarget:a});e(a).trigger(r),e(t._element).trigger(i)};i?this._activate(i,i.parentNode,d):d()}}},a.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},a._activate=function(t,n,i){var a=this,u=("UL"===n.nodeName?e(n).find(o.ACTIVE_UL):e(n).children(o.ACTIVE))[0],s=i&&u&&e(u).hasClass(r.FADE),c=function(){return a._transitionComplete(t,u,i)};if(u&&s){var f=l.getTransitionDurationFromElement(u);e(u).one(l.TRANSITION_END,c).emulateTransitionEnd(f)}else c()},a._transitionComplete=function(t,n,i){if(n){e(n).removeClass(r.SHOW+" "+r.ACTIVE);var a=e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];a&&e(a).removeClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(r.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),l.reflow(t),e(t).addClass(r.SHOW),t.parentNode&&e(t.parentNode).hasClass(r.DROPDOWN_MENU)){var u=e(t).closest(o.DROPDOWN)[0];if(u){var s=[].slice.call(u.querySelectorAll(o.DROPDOWN_TOGGLE));e(s).addClass(r.ACTIVE)}t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),t}();return e(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),a._jQueryInterface.call(e(this),"show")}),e.fn.tab=a._jQueryInterface,e.fn.tab.Constructor=a,e.fn.tab.noConflict=function(){return e.fn.tab=t,a._jQueryInterface},a}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=l,e.Alert=u,e.Button=s,e.Carousel=c,e.Collapse=f,e.Dropdown=p,e.Modal=d,e.Popover=m,e.Scrollspy=g,e.Tab=v,e.Tooltip=h,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(21),n(22))},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,l=Object.getPrototypeOf,u=o.slice,s=o.concat,c=o.push,f=o.indexOf,p={},d=p.toString,h=p.hasOwnProperty,m=h.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},E={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,i=(t=t||a).createElement("script");if(i.text=e,n)for(r in E)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[d.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function x(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.3.1",constructor:T,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},l=1,u=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[l]||{},l++),"object"==typeof a||y(a)||(a={}),l===u&&(a=this,l--);l<u;l++)if(null!=(e=arguments[l]))for(t in e)n=a[t],a!==(r=e[t])&&(s&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&T.isPlainObject(n)?n:{},a[t]=T.extend(s,o,r)):void 0!==r&&(a[t]=r));return a},T.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(x(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?T.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(x(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return s.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,i,o,a,l,u,s,c,f,p,d,h,m,g,v,y,b,E="sizzle"+1*new Date,w=e.document,C=0,T=0,_=ae(),x=ae(),S=ae(),k=function(e,t){return e===t&&(f=!0),0},O={}.hasOwnProperty,A=[],D=A.pop,N=A.push,I=A.push,P=A.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+M+"*\\]",H=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",V=new RegExp(M+"+","g"),W=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),U=new RegExp("^"+M+"*,"+M+"*"),B=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),q=new RegExp(H),G=new RegExp("^"+R+"$"),$={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},ie=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(A=P.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){I={apply:A.length?function(e,t){N.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,l,s,c,f,h,v,y=t&&t.ownerDocument,C=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,m)){if(11!==C&&(f=X.exec(e)))if(o=f[1]){if(9===C){if(!(s=t.getElementById(o)))return r;if(s.id===o)return r.push(s),r}else if(y&&(s=y.getElementById(o))&&b(t,s)&&s.id===o)return r.push(s),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!g||!g.test(e))){if(1!==C)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=E),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+ve(h[l]);v=h.join(","),y=J.test(e)&&me(t.parentNode)||t}if(v)try{return I.apply(r,y.querySelectorAll(v)),r}catch(e){}finally{c===E&&t.removeAttribute("id")}}}return u(e.replace(W,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[E]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function se(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return le(function(t){return t=+t,le(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,m=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=E,!d.getElementsByName||!d.getElementsByName(E).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+M+"*(?:value|"+F+")"),e.querySelectorAll("[id~="+E+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||g.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),b=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&b(w,e)?-1:t===d||t.ownerDocument===w&&b(w,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?L(c,e)-L(c,t):0;if(i===o)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?ce(a[r],l[r]):a[r]===w?-1:l[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&O.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(k),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:le,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&q.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(V," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,p,d,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!u&&!l,b=!1;if(g){if(o){for(;m;){for(p=t;p=p[m];)if(l?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(d=(s=(c=(f=(p=g)[E]||(p[E]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===C&&s[1])&&s[2],p=d&&g.childNodes[d];p=++d&&p&&p[m]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[C,d,b];break}}else if(y&&(b=d=(s=(c=(f=(p=t)[E]||(p[E]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===C&&s[1]),!1===b)for(;(p=++d&&p&&p[m]||(b=d=0)||h.pop())&&((l?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(f=p[E]||(p[E]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[C,b]),p!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[E]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=L(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:le(function(e){var t=[],n=[],r=l(e.replace(W,"$1"));return r[E]?le(function(e,t,n,i){for(var o,a=r(e,null,i,[]),l=e.length;l--;)(o=a[l])&&(e[l]=!(t[l]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return oe(e,t).length>0}}),contains:le(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:le(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,l=T++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var s,c,f,p=[C,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[E]||(t[E]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[o])&&s[0]===C&&s[1]===l)return p[2]=s[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,i){for(var o,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(o=e[l])&&(n&&!n(o,r,i)||(a.push(o),s&&t.push(l)));return a}function we(e,t,n,r,i,o){return r&&!r[E]&&(r=we(r)),i&&!i[E]&&(i=we(i,o)),le(function(o,a,l,u){var s,c,f,p=[],d=[],h=a.length,m=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!o&&t?m:Ee(m,p,e,l,u),v=n?i||(o?e:h||r)?[]:a:g;if(n&&n(g,v,l,u),r)for(s=Ee(v,d),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[d[c]]=!(g[d[c]]=f));if(o){if(i||e){if(i){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(g[c]=f);i(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=i?L(o,f):p[c])>-1&&(o[s]=!(a[s]=f))}}else v=Ee(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):I.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=ye(function(e){return e===t},l,!0),f=ye(function(e){return L(t,e)>-1},l,!0),p=[function(e,n,r){var i=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[ye(be(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[E]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return we(u>1&&be(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(W,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return be(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=oe.tokenize=function(e,t){var n,i,o,a,l,u,s,c=x[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(i=U.exec(l))||(i&&(l=l.slice(i[0].length)||l),u.push(o=[])),n=!1,(i=B.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),l=l.slice(n.length)),r.filter)!(i=$[a].exec(l))||s[a]&&!(i=s[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?oe.error(e):x(e,u).slice(0)},l=oe.compile=function(e,t){var n,i=[],o=[],l=S[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Ce(t[n]))[E]?i.push(l):o.push(l);(l=S(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,l,u,c){var f,h,g,v=0,y="0",b=o&&[],E=[],w=s,T=o||i&&r.find.TAG("*",c),_=C+=null==w?1:Math.random()||.1,x=T.length;for(c&&(s=a===d||a||c);y!==x&&null!=(f=T[y]);y++){if(i&&f){for(h=0,a||f.ownerDocument===d||(p(f),l=!m);g=e[h++];)if(g(f,a||d,l)){u.push(f);break}c&&(C=_)}n&&((f=!g&&f)&&v--,o&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,E,a,l);if(o){if(v>0)for(;y--;)b[y]||E[y]||(E[y]=D.call(u));E=Ee(E)}I.apply(u,E),c&&!o&&E.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(C=_,s=w),b};return n?le(o):o}(o,i))).selector=e}return l},u=oe.select=function(e,t,n,i){var o,u,s,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=$.needsContext.test(e)?0:u.length;o--&&(s=u[o],!r.relative[c=s.type]);)if((f=r.find[c])&&(i=f(s.matches[0].replace(Z,ee),J.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return I.apply(n,i),n;break}}return(p||l(e,d))(i,t,!m,n,!t||J.test(e)&&me(t.parentNode)||t),n},n.sortStable=E.split("").sort(k).join("")===E,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||se("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||se("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||se(F,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var k=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=T.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){return y(t)?T.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?T.grep(e,function(e){return e===t!==n}):"string"!=typeof t?T.grep(e,function(e){return f.call(t,e)>-1!==n}):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&A.test(e)?T(e):e||[],!1).length}});var P,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),N.test(r[1])&&T.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,P=T(a);var F=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&T(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(T(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return D(e,"iframe")?e.contentDocument:(D(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(e,t){T.fn[e]=function(n,r){var i=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(M[e]||T.uniqueSort(i),F.test(e)&&i.reverse()),this.pushStack(i)}});var j=/[^\x20\t\r\n\f]+/g;function H(e){return e}function V(e){throw e}function W(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(j)||[],function(e,n){t[n]=!0}),t}(e):T.extend({},e);var t,n,r,i,o=[],a=[],l=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},s={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){T.each(n,function(n,r){y(r)?e.unique&&s.has(r)||o.push(r):r&&r.length&&"string"!==C(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return T.Deferred(function(n){T.each(t,function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var l=this,u=arguments,s=function(){var n,s;if(!(e<o)){if((n=r.apply(l,u))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(s)?i?s.call(n,a(o,t,H,i),a(o,t,V,i)):(o++,s.call(n,a(o,t,H,i),a(o,t,V,i),a(o,t,H,t.notifyWith))):(r!==H&&(l=void 0,u=[n]),(i||t.resolveWith)(l,u))}},c=i?s:function(){try{s()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(r!==V&&(l=void 0,u=[n]),t.rejectWith(l,u))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred(function(n){t[0][3].add(a(0,n,y(i)?i:H,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:H)),t[2][3].add(a(0,n,y(r)?r:V))}).promise()},promise:function(e){return null!=e?T.extend(e,i):i}},o={};return T.each(t,function(e,n){var a=n[2],l=n[5];i[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=u.call(arguments),o=T.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)W(i[n],a(n),o.reject);return o.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&U.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout(function(){throw e})};var B=T.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),T.ready()}T.fn.ready=function(e){return B.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||B.resolveWith(a,[T]))}}),T.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var q=function(e,t,n,r,i,o,a){var l=0,u=e.length,s=null==n;if("object"===C(n))for(l in i=!0,n)q(e,t,l,n[l],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),s&&(a?(t.call(e,r),t=null):(s=t,t=function(e,t,n){return s.call(T(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return i?e:s?t.call(e):u?t(e[0],n):o},G=/^-ms-/,$=/-([a-z])/g;function K(e,t){return t.toUpperCase()}function Y(e){return e.replace(G,"ms-").replace($,K)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=T.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(r in t)i[Y(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(j)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Z.set(this,e)}):q(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){T.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:T.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each(function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,a=this.length,l=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&T.contains(e.ownerDocument,e)&&"none"===T.css(e,"display")},le=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,l=r?function(){return r.cur()}:function(){return T.css(e,t,"")},u=l(),s=n&&n[3]||(T.cssNumber[t]?"":"px"),c=(T.cssNumber[t]||"px"!==s&&+u)&&ie.exec(T.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)T.style(e,t,c+s),(1-o)*(1-(o=l()/u||.5))<=0&&(a=0),c/=o;c*=2,T.style(e,t,c+s),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=i)),i}var se={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=se[r];return i||(t=n.body.appendChild(n.createElement(r)),i=T.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),se[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?T(this).show():T(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?T.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye,be,Ee=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,l,u,s,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===C(o))T.merge(p,o.nodeType?[o]:o);else if(Ee.test(o)){for(a=a||f.appendChild(t.createElement("div")),l=(de.exec(o)||["",""])[1].toLowerCase(),u=me[l]||me._default,a.innerHTML=u[1]+T.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;T.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(s=T.contains(o.ownerDocument,o),a=ge(f.appendChild(o),"script"),s&&ve(a),n)for(c=0;o=a[c++];)he.test(o.type||"")&&n.push(o);return f}ye=a.createDocumentFragment().appendChild(a.createElement("div")),(be=a.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ye.appendChild(be),v.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Ce=a.documentElement,Te=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function ke(){return!1}function Oe(){try{return a.activeElement}catch(e){}}function Ae(e,t,n,r,i,o){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,l,n,r,t[l],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each(function(){T.event.add(this,t,i,r,n)})}T.event={global:{},add:function(e,t,n,r,i){var o,a,l,u,s,c,f,p,d,h,m,g=J.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(Ce,i),n.guid||(n.guid=T.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(j)||[""]).length;s--;)d=m=(l=xe.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d&&(f=T.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=T.event.special[d]||{},c=T.extend({type:d,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),T.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,l,u,s,c,f,p,d,h,m,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(s=(t=(t||"").match(j)||[""]).length;s--;)if(d=m=(l=xe.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d){for(f=T.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!i&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||T.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)T.event.remove(e,d+t[s],n,r,!0);T.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,l=T.event.fix(e),u=new Array(arguments.length),s=(J.get(this,"events")||{})[l.type]||[],c=T.event.special[l.type]||{};for(u[0]=l,t=1;t<arguments.length;t++)u[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=T.event.handlers.call(this,l,s),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(s)>-1:T.find(i,this,null,[s]).length),a[i]&&o.push(r);o.length&&l.push({elem:s,handlers:o})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Oe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Oe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&D(this,"input"))return this.click(),!1},_default:function(e){return D(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||T.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),T.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){T.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Fe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Re(e,t){var n,r,i,o,a,l,u,s;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),s=o.events))for(i in delete a.handle,a.events={},s)for(n=0,r=s[i].length;n<r;n++)T.event.add(t,i,s[i][n]);Z.hasData(e)&&(l=Z.access(e),u=T.extend({},l),Z.set(t,u))}}function je(e,t,n,r){t=s.apply([],t);var i,o,a,l,u,c,f=0,p=e.length,d=p-1,h=t[0],m=y(h);if(m||p>1&&"string"==typeof h&&!v.checkClone&&Ie.test(h))return e.each(function(i){var o=e.eq(i);m&&(t[0]=h.call(this,i,o.html())),je(o,t,n,r)});if(p&&(o=(i=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(l=(a=T.map(ge(i,"script"),Fe)).length;f<p;f++)u=i,f!==d&&(u=T.clone(u,!0,!0),l&&T.merge(a,ge(u,"script"))),n.call(e[f],u,f);if(l)for(c=a[a.length-1].ownerDocument,T.map(a,Me),f=0;f<l;f++)u=a[f],he.test(u.type||"")&&!J.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(u.src):w(u.textContent.replace(Pe,""),c,u))}return e}function He(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(ge(r)),r.parentNode&&(n&&T.contains(r.ownerDocument,r)&&ve(ge(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,l,u,s,c=e.cloneNode(!0),f=T.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)l=o[r],u=a[r],s=void 0,"input"===(s=u.nodeName.toLowerCase())&&pe.test(l.type)?u.checked=l.checked:"input"!==s&&"textarea"!==s||(u.defaultValue=l.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)Re(o[r],a[r]);else Re(e,c);return(a=ge(c,"script")).length>0&&ve(a,!f&&ge(e,"script")),c},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),T.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return q(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return je(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!me[(de.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){T.fn[e]=function(e){for(var n,r=[],i=T(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var Ve=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ue=new RegExp(oe.join("|"),"i");function Be(e,t,n){var r,i,o,a,l=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||T.contains(e.ownerDocument,e)||(a=T.style(e,t)),!v.pixelBoxStyles()&&Ve.test(a)&&Ue.test(t)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ce.appendChild(s).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",l=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",Ce.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,l,u,s=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),l},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var qe=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,$e={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"},Ye=["Webkit","Moz","ms"],Qe=a.createElement("div").style;function Xe(e){var t=T.cssProps[e];return t||(t=T.cssProps[e]=function(e){if(e in Qe)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Qe)return e}(e)||e),t}function Je(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=T.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=T.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=T.css(e,"border"+oe[a]+"Width",!0,i))):(u+=T.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=T.css(e,"border"+oe[a]+"Width",!0,i):l+=T.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-l-.5))),u}function et(e,t,n){var r=We(e),i=Be(e,t,r),o="border-box"===T.css(e,"boxSizing",!1,r),a=o;if(Ve.test(i)){if(!n)return i;i="auto"}return a=a&&(v.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===T.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,l=Y(t),u=Ge.test(t),s=e.style;if(u||(t=Xe(l)),a=T.cssHooks[t]||T.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:s[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(T.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var i,o,a,l=Y(t);return Ge.test(t)||(t=Xe(l)),(a=T.cssHooks[t]||T.cssHooks[l])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Be(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!qe.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):le(e,$e,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=We(e),a="border-box"===T.css(e,"boxSizing",!1,o),l=r&&Ze(e,t,r,a,o);return a&&v.scrollboxSize()===o.position&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),l&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),Je(0,n,l)}}}),T.cssHooks.marginLeft=ze(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(T.cssHooks[e+t].set=Je)}),T.fn.extend({css:function(e,t){return q(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=We(e),i=t.length;a<i;a++)o[t[a]]=T.css(e,t[a],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,arguments.length>1)}}),T.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=tt.prototype.init,T.fx.step={};var nt,rt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){rt&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,T.fx.interval),T.fx.tick())}function lt(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function st(e,t,n){for(var r,i=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o=0,a=ct.prefilters.length,l=T.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||lt(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),o=0,a=s.tweens.length;o<a;o++)s.tweens[o].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=Y(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,s.opts.specialEasing);o<a;o++)if(r=ct.prefilters[o].call(s,e,c,s.opts))return y(r.stop)&&(T._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,st,s),y(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),T.fx.timer(T.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}T.Animation=T.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(j);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,l,u,s,c,f="width"in t||"height"in t,p=this,d={},h=e.style,m=e.nodeType&&ae(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,T.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}d[r]=g&&g[r]||T.style(e,r)}if((u=!T.isEmptyObject(t))||!T.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=g&&g.display)&&(s=J.get(e,"display")),"none"===(c=T.css(e,"display"))&&(s?c=s:(fe([e],!0),s=e.style.display||s,c=T.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===T.css(e,"float")&&(u||(p.done(function(){h.display=s}),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:s}),o&&(g.hidden=!m),m&&fe([e],!0),p.done(function(){for(r in m||fe([e]),J.remove(e,"fxshow"),d)T.style(e,r,d[r])})),u=st(m?g[r]:0,r,p),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=T.isEmptyObject(e),o=T.speed(t,n,r),a=function(){var t=ct(this,T.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=T.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||T.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),T.each(["toggle","show","hide"],function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),T.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),nt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){rt||(rt=!0,at())},T.fx.stop=function(){rt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ft,pt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return q(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(j);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||T.find.attr;pt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=pt[a],pt[a]=i,i=null!=n(e,t,r)?a:null,pt[a]=o),i}});var dt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function mt(e){return(e.match(j)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}T.fn.extend({prop:function(e,t){return q(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,r,i,o,a,l,u=0;if(y(e))return this.each(function(t){T(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;n=this[u++];)if(i=gt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(l=mt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,i,o,a,l,u=0;if(y(e))return this.each(function(t){T(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[u++];)if(i=gt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(l=mt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){T(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=T(this),a=vt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;T.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,T(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,function(e){return null==e?"":e+""})),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(yt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:mt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=T(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,Et=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,i){var o,l,u,s,c,f,p,d,m=[r||a],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(l=d=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!bt.test(g+T.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[T.expando]?e:new T.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),p=T.event.special[g]||{},i||!p.trigger||!1!==p.trigger.apply(r,t))){if(!i&&!p.noBubble&&!b(r)){for(s=p.delegateType||g,bt.test(s+g)||(l=l.parentNode);l;l=l.parentNode)m.push(l),u=l;u===(r.ownerDocument||a)&&m.push(u.defaultView||u.parentWindow||n)}for(o=0;(l=m[o++])&&!e.isPropagationStopped();)d=l,e.type=o>1?s:p.bindType||g,(f=(J.get(l,"events")||{})[e.type]&&J.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&Q(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!Q(r)||c&&y(r[g])&&!b(r)&&((u=r[c])&&(r[c]=null),T.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,Et),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,Et),T.event.triggered=void 0,u&&(r[c]=u)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var wt=n.location,Ct=Date.now(),Tt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var _t=/\[\]$/,xt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;function Ot(e,t,n,r){var i;if(Array.isArray(t))T.each(t,function(t,i){n||_t.test(e)?r(e,i):Ot(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==C(t))r(e,t);else for(i in t)Ot(e+"["+i+"]",t[i],n,r)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){i(this.name,this.value)});else for(n in e)Ot(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&kt.test(this.nodeName)&&!St.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(xt,"\r\n")}}):{name:t.name,value:n.replace(xt,"\r\n")}}).get()}});var At=/%20/g,Dt=/#.*$/,Nt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Ft={},Mt={},Rt="*/".concat("*"),jt=a.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(j)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Vt(e,t,n,r){var i={},o=e===Mt;function a(l){var u;return i[l]=!0,T.each(e[l]||[],function(e,l){var s=l(t,n,r);return"string"!=typeof s||o||i[s]?o?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}jt.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,T.ajaxSettings),t):Wt(T.ajaxSettings,e)},ajaxPrefilter:Ht(Ft),ajaxTransport:Ht(Mt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,l,u,s,c,f,p,d,h=T.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?T(m):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),b=h.statusCode||{},E={},w={},C="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=It.exec(o);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,E[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),x(0,t),this}};if(v.promise(_),h.url=((e||h.url||wt.href)+"").replace(Lt,wt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(j)||[""],null==h.crossDomain){s=a.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=jt.protocol+"//"+jt.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),Vt(Ft,h,t,_),c)return _;for(p in(f=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pt.test(h.type),i=h.url.replace(Dt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(d=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Tt.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Nt,"$1"),d=(Tt.test(i)?"&":"?")+"_="+Ct+++d),h.url=i+d),h.ifModified&&(T.lastModified[i]&&_.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&_.setRequestHeader("If-None-Match",T.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]),h.headers)_.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(m,_,h)||c))return _.abort();if(C="abort",y.add(h.complete),_.done(h.success),_.fail(h.error),r=Vt(Mt,h,t,_)){if(_.readyState=1,f&&g.trigger("ajaxSend",[_,h]),c)return _;h.async&&h.timeout>0&&(u=n.setTimeout(function(){_.abort("timeout")},h.timeout));try{c=!1,r.send(E,x)}catch(e){if(c)throw e;x(-1,e)}}else x(-1,"No Transport");function x(e,t,a,l){var s,p,d,E,w,C=t;c||(c=!0,u&&n.clearTimeout(u),r=void 0,o=l||"",_.readyState=e>0?4:0,s=e>=200&&e<300||304===e,a&&(E=function(e,t,n){for(var r,i,o,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in l)if(l[i]&&l[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,_,a)),E=function(e,t,n,r){var i,o,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=s[u+" "+o]||s["* "+o]))for(i in s)if((l=i.split(" "))[1]===o&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[i]:!0!==s[i]&&(o=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,E,_,s),s?(h.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=w),(w=_.getResponseHeader("etag"))&&(T.etag[i]=w)),204===e||"HEAD"===h.type?C="nocontent":304===e?C="notmodified":(C=E.state,p=E.data,s=!(d=E.error))):(d=C,!e&&C||(C="error",e<0&&(e=0))),_.status=e,_.statusText=(t||C)+"",s?v.resolveWith(m,[p,C,_]):v.rejectWith(m,[_,C,d]),_.statusCode(b),b=void 0,f&&g.trigger(s?"ajaxSuccess":"ajaxError",[_,h,s?p:d]),y.fireWith(m,[_,C]),f&&(g.trigger("ajaxComplete",[_,h]),--T.active||T.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,t){T[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:i,data:n,success:r},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){T(this).wrapInner(e.call(this,t))}):this.each(function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){T(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Bt=T.ajaxSettings.xhr();v.cors=!!Bt&&"withCredentials"in Bt,v.ajax=Bt=!!Bt,T.ajaxTransport(function(e){var t,r;if(v.cors||Bt&&!e.crossDomain)return{send:function(i,o){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)l.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?o(0,"error"):o(l.status,l.statusText):o(Ut[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),T.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=T("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var zt,qt=[],Gt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||T.expando+"_"+Ct++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,l=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?T(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,qt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0}),"script"}),v.createHTMLDocument=((zt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(e,t,n){var r,i,o,a=this,l=e.indexOf(" ");return l>-1&&(r=mt(e.slice(l)),e=e.slice(0,l)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&T.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(e,t,n){var r,i,o,a,l,u,s=T.css(e,"position"),c=T(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),o=T.css(e,"top"),u=T.css(e,"left"),("absolute"===s||"fixed"===s)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),y(t)&&(t=t.call(e,n,T.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+i),"using"in t?t.using.call(e,f):c.css(f)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||Ce})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return q(this,function(e,r,i){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),T.each(["top","left"],function(e,t){T.cssHooks[t]=ze(v.pixelPosition,function(e,n){if(n)return n=Be(e,t),Ve.test(n)?T(e).position()[t]+"px":n})}),T.each({Height:"height",Width:"width"},function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),l=n||(!0===i||!0===o?"margin":"border");return q(this,function(t,n,i){var o;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?T.css(t,n,l):T.style(t,n,i,l)},t,a?i:void 0,a)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=u.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=D,T.isFunction=y,T.isWindow=b,T.camelCase=Y,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var $t=n.jQuery,Kt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Kt),e&&n.jQuery===T&&(n.jQuery=$t),T},i||(n.jQuery=n.$=T),T})},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.6
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function s(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(s(e))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?f:10===e?p:f||p}function h(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,l,u=o.commonAncestorContainer;if(e!==u&&t!==u||r.contains(i))return"BODY"===(l=(a=u).nodeName)||"HTML"!==l&&h(a.firstElementChild)!==a?h(u):u;var s=m(e);return s.host?g(s.host,t):g(e,m(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function E(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:b("Height",t,n,r),width:b("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),T=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function x(e){return _({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?E(e.ownerDocument):{},a=o.width||e.clientWidth||i.right-i.left,l=o.height||e.clientHeight||i.bottom-i.top,s=e.offsetWidth-a,c=e.offsetHeight-l;if(s||c){var f=u(e);s-=y(f,"x"),c-=y(f,"y"),i.width-=s,i.height-=c}return x(i)}function k(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===t.nodeName,o=S(e),a=S(t),l=c(e),s=u(t),f=parseFloat(s.borderTopWidth,10),p=parseFloat(s.borderLeftWidth,10);n&&i&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=x({top:o.top-a.top-f,left:o.left-a.left-p,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(s.marginTop,10),g=parseFloat(s.marginLeft,10);h.top-=f-m,h.bottom-=f-m,h.left-=p-g,h.right-=p-g,h.marginTop=m,h.marginLeft=g}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),i=v(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(h,t)),h}function O(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function A(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?O(e):g(e,t);if("viewport"===r)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=k(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:v(n),l=t?0:v(n,"left");return x({top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:i,height:o})}(a,i);else{var l=void 0;"scrollParent"===r?"BODY"===(l=c(s(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var f=k(l,a,i);if("HTML"!==l.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===u(t,"position")||e(s(t)))}(a))o=f;else{var p=E(e.ownerDocument),d=p.height,h=p.width;o.top+=f.top-f.marginTop,o.bottom=d+f.top,o.left+=f.left-f.marginLeft,o.right=h+f.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function D(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=A(n,r,o,i),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(l).map(function(e){return _({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),s=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=s.length>0?s[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function N(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return k(n,r?O(t):g(t,n),r)}function I(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function P(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function L(e,t,n){n=n.split("-")[0];var r=I(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",l=o?"left":"top",u=o?"height":"width",s=o?"width":"height";return i[a]=t[a]+t[u]/2-r[u]/2,i[l]=n===l?t[l]-r[s]:t[P(l)],i}function F(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function M(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=F(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=x(t.offsets.popper),t.offsets.reference=x(t.offsets.reference),t=n(t,e))}),t}function R(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function j(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function H(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,r){n.updateBound=r,H(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(c(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function W(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,H(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function B(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}var z=n&&/Firefox/i.test(navigator.userAgent);function q(e,t,n){var r=F(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],$=G.slice(3);function K(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=$.indexOf(e),r=$.slice(n+1).concat($.slice(0,n));return t?r.reverse():r}var Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Q(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(F(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1!==l?[a.slice(0,l).concat([a[l].split(u)[0]]),[a[l].split(u)[1]].concat(a.slice(l+1))]:[a];return(s=s.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return x(l)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var X={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,l=-1!==["bottom","top"].indexOf(n),u=l?"left":"top",s=l?"width":"height",c={start:T({},u,o[u]),end:T({},u,o[u]+o[s]-a[s])};e.offsets.popper=_({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,l=r.split("-")[0],u=void 0;return u=U(+n)?[+n,0]:Q(n,o,a,l),"left"===l?(o.top+=u[0],o.left-=u[1]):"right"===l?(o.top+=u[0],o.left+=u[1]):"top"===l?(o.left+=u[0],o.top-=u[1]):"bottom"===l&&(o.left+=u[0],o.top+=u[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=j("transform"),i=e.instance.popper.style,o=i.top,a=i.left,l=i[r];i.top="",i.left="",i[r]="";var u=A(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=l,t.boundaries=u;var s=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),T({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),T({},n,r)}};return s.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=_({},c,f[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),l=a?"right":"bottom",u=a?"left":"top",s=a?"width":"height";return n[l]<o(r[u])&&(e.offsets.popper[u]=o(r[u])-n[s]),n[u]>o(r[l])&&(e.offsets.popper[u]=o(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!q(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,l=o.reference,s=-1!==["left","right"].indexOf(i),c=s?"height":"width",f=s?"Top":"Left",p=f.toLowerCase(),d=s?"left":"top",h=s?"bottom":"right",m=I(r)[c];l[h]-m<a[p]&&(e.offsets.popper[p]-=a[p]-(l[h]-m)),l[p]+m>a[h]&&(e.offsets.popper[p]+=l[p]+m-a[h]),e.offsets.popper=x(e.offsets.popper);var g=l[p]+l[c]/2-m/2,v=u(e.instance.popper),y=parseFloat(v["margin"+f],10),b=parseFloat(v["border"+f+"Width"],10),E=g-e.offsets.popper[p]-y-b;return E=Math.max(Math.min(a[c]-m,E),0),e.arrowElement=r,e.offsets.arrow=(T(n={},p,Math.round(E)),T(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(R(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=A(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=P(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case Y.FLIP:a=[r,i];break;case Y.CLOCKWISE:a=K(r);break;case Y.COUNTERCLOCKWISE:a=K(r,!0);break;default:a=t.behavior}return a.forEach(function(l,u){if(r!==l||a.length===u+1)return e;r=e.placement.split("-")[0],i=P(r);var s=e.offsets.popper,c=e.offsets.reference,f=Math.floor,p="left"===r&&f(s.right)>f(c.left)||"right"===r&&f(s.left)<f(c.right)||"top"===r&&f(s.bottom)>f(c.top)||"bottom"===r&&f(s.top)<f(c.bottom),d=f(s.left)<f(n.left),h=f(s.right)>f(n.right),m=f(s.top)<f(n.top),g=f(s.bottom)>f(n.bottom),v="left"===r&&d||"right"===r&&h||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===o&&d||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&g);(p||v||b)&&(e.flipped=!0,(p||v)&&(r=a[u+1]),b&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=_({},e.offsets.popper,L(e.instance.popper,e.offsets.reference,e.placement)),e=M(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(l?i[a?"width":"height"]:0),e.placement=P(t),e.offsets.popper=x(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!q(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=F(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=F(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,l=h(e.instance.popper),u=S(l),s={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=-1!==["left","right"].indexOf(e.placement),a=-1!==e.placement.indexOf("-"),l=i.width%2==r.width%2,u=i.width%2==1&&r.width%2==1,s=function(e){return e},c=t?o||a||l?Math.round:Math.floor:s,f=t?Math.round:s;return{left:c(u&&!a&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:c(r.right)}}(e,window.devicePixelRatio<2||!z),f="bottom"===n?"top":"bottom",p="right"===r?"left":"right",d=j("transform"),m=void 0,g=void 0;if(g="bottom"===f?"HTML"===l.nodeName?-l.clientHeight+c.bottom:-u.height+c.bottom:c.top,m="right"===p?"HTML"===l.nodeName?-l.clientWidth+c.right:-u.width+c.right:c.left,a&&d)s[d]="translate3d("+m+"px, "+g+"px, 0)",s[f]=0,s[p]=0,s.willChange="transform";else{var v="bottom"===f?-1:1,y="right"===p?-1:1;s[f]=g*v,s[p]=m*y,s.willChange=f+", "+p}var b={"x-placement":e.placement};return e.attributes=_({},b,e.attributes),e.styles=_({},s,e.styles),e.arrowStyles=_({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return B(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&B(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=N(i,t,e,n.positionFixed),a=D(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),B(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=_({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=_({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return _({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return C(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=N(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=D(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=L(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=M(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[j("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=V(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=G,J.Defaults=X,t.default=J}.call(this,n(4))},function(e,t,n){"use strict";var r=n(24);function i(){}e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=i,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){(function(){var n,r,i,o,a,l;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-a)/1e6},r=t.hrtime,o=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),l=1e9*t.uptime(),a=o-l):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(this,n(26))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=l(p);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;!function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}t.default=e}(n(2));var r=l(n(28)),i=l(n(31)),o=l(n(0)),a=l(n(7));n(9);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,r.default)(e,t)})},c=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,i.default)(e,t)})},f=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).onEnter=function(e,n){var r=t.getClassNames(n?"appear":"enter").className;t.removeClasses(e,"exit"),s(e,r),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=t.getClassNames(n?"appear":"enter").activeClassName;t.reflowAndAddClass(e,r),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=t.getClassNames("enter").doneClassName;t.removeClasses(e,n?"appear":"enter"),s(e,r),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){var n=t.getClassNames("exit").className;t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),s(e,n),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){var n=t.getClassNames("exit").activeClassName;t.reflowAndAddClass(e,n),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){var n=t.getClassNames("exit").doneClassName;t.removeClasses(e,"exit"),s(e,n),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"!=typeof n?n[e]:n+"-"+e;return{className:r,activeClassName:"string"!=typeof n?n[e+"Active"]:r+"-active",doneClassName:"string"!=typeof n?n[e+"Done"]:r+"-done"}},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.removeClasses=function(e,t){var n=this.getClassNames(t),r=n.className,i=n.activeClassName,o=n.doneClassName;r&&c(e,r),i&&c(e,i),o&&c(e,o)},i.reflowAndAddClass=function(e,t){t&&(e&&e.scrollTop,s(e,t))},i.render=function(){var e=u({},this.props);return delete e.classNames,o.default.createElement(a.default,u({},e,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(o.default.Component);f.propTypes={};var p=f;t.default=p,e.exports=t.default},function(e,t,n){"use strict";var r=n(29);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,i.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var i=r(n(30));e.exports=t.default},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;a(n(2));var r=a(n(0)),i=n(3),o=a(n(10));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t,n;function a(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).handleEnter=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEnter",0,n)},t.handleEntering=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntering",0,n)},t.handleEntered=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntered",0,n)},t.handleExit=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExit",1,n)},t.handleExiting=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExiting",1,n)},t.handleExited=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExited",1,n)},t}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var l=a.prototype;return l.handleLifecycle=function(e,t,n){var o,a=this.props.children,l=r.default.Children.toArray(a)[t];l.props[e]&&(o=l.props)[e].apply(o,n),this.props[e]&&this.props[e]((0,i.findDOMNode)(this))},l.render=function(){var e=this.props,t=e.children,n=e.in,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["children","in"]),a=r.default.Children.toArray(t),l=a[0],u=a[1];return delete i.onEnter,delete i.onEntering,delete i.onEntered,delete i.onExit,delete i.onExiting,delete i.onExited,r.default.createElement(o.default,i,n?r.default.cloneElement(l,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(u,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);l.propTypes={};var u=l;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=i,t.mergeChildMappings=o,t.getInitialChildMapping=function(e,t){return i(e.children,function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})})},t.getNextChildMapping=function(e,t,n){var l=i(e.children),u=o(t,l);return Object.keys(u).forEach(function(i){var o=u[i];if((0,r.isValidElement)(o)){var s=i in t,c=i in l,f=t[i],p=(0,r.isValidElement)(f)&&!f.props.in;!c||s&&!p?c||!s||p?c&&s&&(0,r.isValidElement)(f)&&(u[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:f.props.in,exit:a(o,"exit",e),enter:a(o,"enter",e)})):u[i]=(0,r.cloneElement)(o,{in:!1}):u[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:!0,exit:a(o,"exit",e),enter:a(o,"enter",e)})}}),u};var r=n(0);function i(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)}),n}function o(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,i=Object.create(null),o=[];for(var a in e)a in t?o.length&&(i[a]=o,o=[]):o.push(a);var l={};for(var u in t){if(i[u])for(r=0;r<i[u].length;r++){var s=i[u][r];l[i[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){"use strict";n.r(t);n(15);var r=n(0),i=n.n(r),o=n(3),a=n.n(o),l=(n(20),n(35),n(41),n(2)),u=n.n(l),s=function(e,t){return e.length===t.length&&e.every(function(e,n){return r=e,i=t[n],r===i;var r,i})};var c=function(e,t){var n;void 0===t&&(t=s);var r,i=[],o=!1;return function(){for(var a=arguments.length,l=new Array(a),u=0;u<a;u++)l[u]=arguments[u];return o&&n===this&&t(l,i)?r:(r=e.apply(this,l),o=!0,n=this,i=l,r)}},f=n(1),p=n(12),d=n.n(p),h=n(13),m=n.n(h),g=n(5);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(){return(C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){w(e,t,n[t])})}return e}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?O(e):t}function D(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var N=function(){};function I(e,t){return t?"-"===t[0]?e+t:e+"__"+t:e}var P=function(e){return Array.isArray(e)?e.filter(Boolean):"object"===v(e)&&null!==e?[e]:[]};function L(e){return[document.documentElement,document.body,window].indexOf(e)>-1}function F(e){return L(e)?window.pageYOffset:e.scrollTop}function M(e,t){L(e)?window.scrollTo(0,t):e.scrollTop=t}function R(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:N,i=F(e),o=t-i,a=10,l=0;!function t(){var u,s=o*((u=(u=l+=a)/n-1)*u*u+1)+i;M(e,s),l<n?d()(t):r(e)}()}function j(){try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}}function H(e){var t=e.maxHeight,n=e.menuEl,r=e.minHeight,i=e.placement,o=e.shouldScroll,a=e.isFixedPosition,l=e.theme.spacing,u=function(e){var t=getComputedStyle(e),n="absolute"===t.position,r=/(auto|scroll)/,i=document.documentElement;if("fixed"===t.position)return i;for(var o=e;o=o.parentElement;)if(t=getComputedStyle(o),(!n||"static"!==t.position)&&r.test(t.overflow+t.overflowY+t.overflowX))return o;return i}(n),s={placement:"bottom",maxHeight:t};if(!n||!n.offsetParent)return s;var c=u.getBoundingClientRect().height,f=n.getBoundingClientRect(),p=f.bottom,d=f.height,h=f.top,m=n.offsetParent.getBoundingClientRect().top,g=window.innerHeight,v=F(u),y=parseInt(getComputedStyle(n).marginBottom,10),b=parseInt(getComputedStyle(n).marginTop,10),E=m-b,w=g-h,C=E+v,T=c-v-h,_=p-g+v+y,x=v+h-b;switch(i){case"auto":case"bottom":if(w>=d)return{placement:"bottom",maxHeight:t};if(T>=d&&!a)return o&&R(u,_,160),{placement:"bottom",maxHeight:t};if(!a&&T>=r||a&&w>=r)return o&&R(u,_,160),{placement:"bottom",maxHeight:a?w-y:T-y};if("auto"===i||a){var S=t,k=a?E:C;return k>=r&&(S=Math.min(k-y-l.controlHeight,t)),{placement:"top",maxHeight:S}}if("bottom"===i)return M(u,_),{placement:"bottom",maxHeight:t};break;case"top":if(E>=d)return{placement:"top",maxHeight:t};if(C>=d&&!a)return o&&R(u,x,160),{placement:"top",maxHeight:t};if(!a&&C>=r||a&&E>=r){var O=t;return(!a&&C>=r||a&&E>=r)&&(O=a?E-b:C-b),o&&R(u,x,160),{placement:"top",maxHeight:O}}return{placement:"bottom",maxHeight:t};default:throw new Error('Invalid placement provided "'.concat(i,'".'))}return s}var V=function(e){return"auto"===e?"bottom":e},W=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"state",{maxHeight:n.props.maxMenuHeight,placement:null}),w(O(O(n)),"getPlacement",function(e){var t=n.props,r=t.minMenuHeight,i=t.maxMenuHeight,o=t.menuPlacement,a=t.menuPosition,l=t.menuShouldScrollIntoView,u=t.theme,s=n.context.getPortalPlacement;if(e){var c="fixed"===a,f=H({maxHeight:i,menuEl:e,minHeight:r,placement:o,shouldScroll:l&&!c,isFixedPosition:c,theme:u});s&&s(f),n.setState(f)}}),w(O(O(n)),"getUpdatedProps",function(){var e=n.props.menuPlacement,t=n.state.placement||V(e);return T({},n.props,{placement:t,maxHeight:n.state.maxHeight})}),n}return _(t,r["Component"]),E(t,[{key:"render",value:function(){return(0,this.props.children)({ref:this.getPlacement,placerProps:this.getUpdatedProps()})}}]),t}();w(W,"contextTypes",{getPortalPlacement:u.a.func});var U=function(e){var t=e.theme,n=t.spacing.baseUnit;return{color:t.colors.neutral40,padding:"".concat(2*n,"px ").concat(3*n,"px"),textAlign:"center"}},B=U,z=U,q=function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return i.a.createElement("div",C({className:r(Object(f.a)(o("noOptionsMessage",e)),{"menu-notice":!0,"menu-notice--no-options":!0},n)},a),t)};q.defaultProps={children:"No options"};var G=function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return i.a.createElement("div",C({className:r(Object(f.a)(o("loadingMessage",e)),{"menu-notice":!0,"menu-notice--loading":!0},n)},a),t)};G.defaultProps={children:"Loading..."};var $=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"state",{placement:null}),w(O(O(n)),"getPortalPlacement",function(e){var t=e.placement;t!==V(n.props.menuPlacement)&&n.setState({placement:t})}),n}return _(t,r["Component"]),E(t,[{key:"getChildContext",value:function(){return{getPortalPlacement:this.getPortalPlacement}}},{key:"render",value:function(){var e=this.props,t=e.appendTo,n=e.children,r=e.controlElement,a=e.menuPlacement,l=e.menuPosition,u=e.getStyles,s="fixed"===l;if(!t&&!s||!r)return null;var c=this.state.placement||V(a),p=function(e){var t=e.getBoundingClientRect();return{bottom:t.bottom,height:t.height,left:t.left,right:t.right,top:t.top,width:t.width}}(r),d=s?0:window.pageYOffset,h={offset:p[c]+d,position:l,rect:p},m=i.a.createElement("div",{className:Object(f.a)(u("menuPortal",h))},n);return t?Object(o.createPortal)(m,t):m}}]),t}();w($,"childContextTypes",{getPortalPlacement:u.a.func});var K=Array.isArray,Y=Object.keys,Q=Object.prototype.hasOwnProperty;function X(e,t){try{return function e(t,n){if(t===n)return!0;if(t&&n&&"object"==v(t)&&"object"==v(n)){var r,i,o,a=K(t),l=K(n);if(a&&l){if((i=t.length)!=n.length)return!1;for(r=i;0!=r--;)if(!e(t[r],n[r]))return!1;return!0}if(a!=l)return!1;var u=t instanceof Date,s=n instanceof Date;if(u!=s)return!1;if(u&&s)return t.getTime()==n.getTime();var c=t instanceof RegExp,f=n instanceof RegExp;if(c!=f)return!1;if(c&&f)return t.toString()==n.toString();var p=Y(t);if((i=p.length)!==Y(n).length)return!1;for(r=i;0!=r--;)if(!Q.call(n,p[r]))return!1;for(r=i;0!=r--;)if(!("_owner"===(o=p[r])&&t.$$typeof||e(t[o],n[o])))return!1;return!0}return t!=t&&n!=n}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i))return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}var J=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}],Z=function(e){for(var t=0;t<J.length;t++)e=e.replace(J[t].letters,J[t].base);return e},ee=function(e){return e.replace(/^\s+|\s+$/g,"")},te=function(e){return"".concat(e.label," ").concat(e.value)},ne=function(e){return i.a.createElement("span",C({className:Object(f.a)({zIndex:9999,border:0,clip:"rect(1px, 1px, 1px, 1px)",height:1,width:1,position:"absolute",overflow:"hidden",padding:0,whiteSpace:"nowrap",backgroundColor:"red",color:"blue"})},e))},re=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"render",value:function(){var e=this.props,t=(e.in,e.out,e.onExited,e.appear,e.enter,e.exit,e.innerRef),n=(e.emotion,k(e,["in","out","onExited","appear","enter","exit","innerRef","emotion"]));return i.a.createElement("input",C({ref:t},n,{className:Object(f.a)({background:0,border:0,fontSize:"inherit",outline:0,padding:0,width:1,color:"transparent",left:-100,opacity:0,position:"relative",transform:"scale(0)"})}))}}]),t}(),ie=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"componentDidMount",value:function(){this.props.innerRef(Object(o.findDOMNode)(this))}},{key:"componentWillUnmount",value:function(){this.props.innerRef(null)}},{key:"render",value:function(){return this.props.children}}]),t}(),oe=["boxSizing","height","overflow","paddingRight","position"],ae={boxSizing:"border-box",overflow:"hidden",position:"relative",height:"100%"};function le(e){e.preventDefault()}function ue(e){e.stopPropagation()}function se(){var e=this.scrollTop,t=this.scrollHeight,n=e+this.offsetHeight;0===e?this.scrollTop=1:n===t&&(this.scrollTop=e-1)}function ce(){return"ontouchstart"in window||navigator.maxTouchPoints}var fe=!("undefined"==typeof window||!window.document||!window.document.createElement),pe=0,de=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"originalStyles",{}),w(O(O(n)),"listenerOptions",{capture:!1,passive:!1}),n}return _(t,r["Component"]),E(t,[{key:"componentDidMount",value:function(){var e=this;if(fe){var t=this.props,n=t.accountForScrollbars,r=t.touchScrollTarget,i=document.body,o=i&&i.style;if(n&&oe.forEach(function(t){var n=o&&o[t];e.originalStyles[t]=n}),n&&pe<1){var a=parseInt(this.originalStyles.paddingRight,10)||0,l=document.body?document.body.clientWidth:0,u=window.innerWidth-l+a||0;Object.keys(ae).forEach(function(e){var t=ae[e];o&&(o[e]=t)}),o&&(o.paddingRight="".concat(u,"px"))}i&&ce()&&(i.addEventListener("touchmove",le,this.listenerOptions),r&&(r.addEventListener("touchstart",se,this.listenerOptions),r.addEventListener("touchmove",ue,this.listenerOptions))),pe+=1}}},{key:"componentWillUnmount",value:function(){var e=this;if(fe){var t=this.props,n=t.accountForScrollbars,r=t.touchScrollTarget,i=document.body,o=i&&i.style;pe=Math.max(pe-1,0),n&&pe<1&&oe.forEach(function(t){var n=e.originalStyles[t];o&&(o[t]=n)}),i&&ce()&&(i.removeEventListener("touchmove",le,this.listenerOptions),r&&(r.removeEventListener("touchstart",se,this.listenerOptions),r.removeEventListener("touchmove",ue,this.listenerOptions)))}}},{key:"render",value:function(){return null}}]),t}();w(de,"defaultProps",{accountForScrollbars:!0});var he=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"state",{touchScrollTarget:null}),w(O(O(n)),"getScrollTarget",function(e){e!==n.state.touchScrollTarget&&n.setState({touchScrollTarget:e})}),w(O(O(n)),"blurSelectInput",function(){document.activeElement&&document.activeElement.blur()}),n}return _(t,r["PureComponent"]),E(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.isEnabled,r=this.state.touchScrollTarget;return n?i.a.createElement("div",null,i.a.createElement("div",{onClick:this.blurSelectInput,className:Object(f.a)({position:"fixed",left:0,bottom:0,right:0,top:0})}),i.a.createElement(ie,{innerRef:this.getScrollTarget},t),r?i.a.createElement(de,{touchScrollTarget:r}):null):t}}]),t}(),me=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"isBottom",!1),w(O(O(n)),"isTop",!1),w(O(O(n)),"scrollTarget",void 0),w(O(O(n)),"touchStart",void 0),w(O(O(n)),"cancelScroll",function(e){e.preventDefault(),e.stopPropagation()}),w(O(O(n)),"handleEventDelta",function(e,t){var r=n.props,i=r.onBottomArrive,o=r.onBottomLeave,a=r.onTopArrive,l=r.onTopLeave,u=n.scrollTarget,s=u.scrollTop,c=u.scrollHeight,f=u.clientHeight,p=n.scrollTarget,d=t>0,h=c-f-s,m=!1;h>t&&n.isBottom&&(o&&o(e),n.isBottom=!1),d&&n.isTop&&(l&&l(e),n.isTop=!1),d&&t>h?(i&&!n.isBottom&&i(e),p.scrollTop=c,m=!0,n.isBottom=!0):!d&&-t>s&&(a&&!n.isTop&&a(e),p.scrollTop=0,m=!0,n.isTop=!0),m&&n.cancelScroll(e)}),w(O(O(n)),"onWheel",function(e){n.handleEventDelta(e,e.deltaY)}),w(O(O(n)),"onTouchStart",function(e){n.touchStart=e.changedTouches[0].clientY}),w(O(O(n)),"onTouchMove",function(e){var t=n.touchStart-e.changedTouches[0].clientY;n.handleEventDelta(e,t)}),w(O(O(n)),"getScrollTarget",function(e){n.scrollTarget=e}),n}return _(t,r["Component"]),E(t,[{key:"componentDidMount",value:function(){this.startListening(this.scrollTarget)}},{key:"componentWillUnmount",value:function(){this.stopListening(this.scrollTarget)}},{key:"startListening",value:function(e){e&&(e.scrollHeight<=e.clientHeight||("function"==typeof e.addEventListener&&e.addEventListener("wheel",this.onWheel,!1),"function"==typeof e.addEventListener&&e.addEventListener("touchstart",this.onTouchStart,!1),"function"==typeof e.addEventListener&&e.addEventListener("touchmove",this.onTouchMove,!1)))}},{key:"stopListening",value:function(e){e.scrollHeight<=e.clientHeight||("function"==typeof e.removeEventListener&&e.removeEventListener("wheel",this.onWheel,!1),"function"==typeof e.removeEventListener&&e.removeEventListener("touchstart",this.onTouchStart,!1),"function"==typeof e.removeEventListener&&e.removeEventListener("touchmove",this.onTouchMove,!1))}},{key:"render",value:function(){return i.a.createElement(ie,{innerRef:this.getScrollTarget},this.props.children)}}]),t}(),ge=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"render",value:function(){var e=this.props,t=e.isEnabled,n=k(e,["isEnabled"]);return t?i.a.createElement(me,n):this.props.children}}]),t}();w(ge,"defaultProps",{isEnabled:!0});var ve=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.isSearchable,r=t.isMulti,i=t.label;switch(e){case"menu":return"Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu, press Tab to select the option and exit the menu.";case"input":return"".concat(i||"Select"," is focused ").concat(n?",type to refine list":"",", press Down to open the menu, ").concat(r?" press left to focus selected values":"");case"value":return"Use left and right to toggle between focused values, press Backspace to remove the currently focused value"}},ye=function(e,t){var n=t.value;if(n)switch(e){case"deselect-option":case"pop-value":case"remove-value":return"option ".concat(n,", deselected.");case"select-option":return"option ".concat(n,", selected.")}},be=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.className,r=e.cx,o=e.isMulti,a=e.getStyles,l=e.hasValue;return i.a.createElement("div",{className:r(Object(f.a)(a("valueContainer",this.props)),{"value-container":!0,"value-container--is-multi":o,"value-container--has-value":l},n)},t)}}]),t}(),Ee=function(e){var t=e.size,n=k(e,["size"]);return i.a.createElement("svg",C({height:t,width:t,viewBox:"0 0 20 20","aria-hidden":"true",focusable:"false",className:Object(f.a)({display:"inline-block",fill:"currentColor",lineHeight:1,stroke:"currentColor",strokeWidth:0})},n))},we=function(e){return i.a.createElement(Ee,C({size:20},e),i.a.createElement("path",{d:"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"}))},Ce=function(e){return i.a.createElement(Ee,C({size:20},e),i.a.createElement("path",{d:"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"}))},Te=function(e){var t=e.isFocused,n=e.theme,r=n.spacing.baseUnit,i=n.colors;return{color:t?i.neutral60:i.neutral20,display:"flex",padding:2*r,transition:"color 150ms",":hover":{color:t?i.neutral80:i.neutral40}}},_e=Te,xe=Te,Se=!1,ke=function(e){var t=e.color,n=e.delay,r=e.offset;return i.a.createElement("span",{className:Object(f.a)({animationDuration:"1s",animationDelay:"".concat(n,"ms"),animationIterationCount:"infinite",animationName:"react-select-loading-indicator",animationTimingFunction:"ease-in-out",backgroundColor:t,borderRadius:"1em",display:"inline-block",marginLeft:r?"1em":null,height:"1em",verticalAlign:"top",width:"1em"})})},Oe=function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerProps,a=e.isFocused,l=e.isRtl,u=e.theme.colors,s=a?u.neutral80:u.neutral20;return Se||(Object(f.b)("@keyframes ","react-select-loading-indicator","{0%,80%,100%{opacity:0;}40%{opacity:1;}};"),Se=!0),i.a.createElement("div",C({},o,{className:n(Object(f.a)(r("loadingIndicator",e)),{indicator:!0,"loading-indicator":!0},t)}),i.a.createElement(ke,{color:s,delay:0,offset:l}),i.a.createElement(ke,{color:s,delay:160,offset:!0}),i.a.createElement(ke,{color:s,delay:320,offset:!l}))};Oe.defaultProps={size:4};var Ae=function(e){return{background:0,border:0,fontSize:"inherit",opacity:e?0:1,outline:0,padding:0,color:"inherit"}},De=function(e){var t=e.children,n=e.innerProps;return i.a.createElement("div",n,t)},Ne=De,Ie=De,Pe=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.innerProps;return i.a.createElement("div",n,t||i.a.createElement(we,{size:14}))}}]),t}(),Le=function(e){function t(){return y(this,t),A(this,x(t).apply(this,arguments))}return _(t,r["Component"]),E(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.className,r=e.components,o=e.cx,a=e.data,l=e.getStyles,u=e.innerProps,s=e.isDisabled,c=e.removeProps,p=e.selectProps,d=r.Container,h=r.Label,m=r.Remove,g=T({className:o(Object(f.a)(l("multiValue",this.props)),{"multi-value":!0,"multi-value--is-disabled":s},n)},u),v={className:o(Object(f.a)(l("multiValueLabel",this.props)),{"multi-value__label":!0},n)},y=T({className:o(Object(f.a)(l("multiValueRemove",this.props)),{"multi-value__remove":!0},n)},c);return i.a.createElement(d,{data:a,innerProps:g,selectProps:p},i.a.createElement(h,{data:a,innerProps:v,selectProps:p},t),i.a.createElement(m,{data:a,innerProps:y,selectProps:p}))}}]),t}();w(Le,"defaultProps",{cropWithEllipsis:!0});var Fe={ClearIndicator:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return i.a.createElement("div",C({},a,{className:r(Object(f.a)(o("clearIndicator",e)),{indicator:!0,"clear-indicator":!0},n)}),t||i.a.createElement(we,null))},Control:function(e){var t=e.children,n=e.cx,r=e.getStyles,o=e.className,a=e.isDisabled,l=e.isFocused,u=e.innerRef,s=e.innerProps,c=e.menuIsOpen;return i.a.createElement("div",C({ref:u,className:n(Object(f.a)(r("control",e)),{control:!0,"control--is-disabled":a,"control--is-focused":l,"control--menu-is-open":c},o)},s),t)},DropdownIndicator:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return i.a.createElement("div",C({},a,{className:r(Object(f.a)(o("dropdownIndicator",e)),{indicator:!0,"dropdown-indicator":!0},n)}),t||i.a.createElement(Ce,null))},DownChevron:Ce,CrossIcon:we,Group:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.Heading,l=e.headingProps,u=e.label,s=e.theme,c=e.selectProps;return i.a.createElement("div",{className:r(Object(f.a)(o("group",e)),{group:!0},n)},i.a.createElement(a,C({},l,{selectProps:c,theme:s,getStyles:o,cx:r}),u),i.a.createElement("div",null,t))},GroupHeading:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.theme,a=(e.selectProps,k(e,["className","cx","getStyles","theme","selectProps"]));return i.a.createElement("div",C({className:n(Object(f.a)(r("groupHeading",T({theme:o},a))),{"group-heading":!0},t)},a))},IndicatorsContainer:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles;return i.a.createElement("div",{className:r(Object(f.a)(o("indicatorsContainer",e)),{indicators:!0},n)},t)},IndicatorSeparator:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerProps;return i.a.createElement("span",C({},o,{className:n(Object(f.a)(r("indicatorSeparator",e)),{"indicator-separator":!0},t)}))},Input:function(e){var t=e.className,n=e.cx,r=e.getStyles,o=e.innerRef,a=e.isHidden,l=e.isDisabled,u=e.theme,s=(e.selectProps,k(e,["className","cx","getStyles","innerRef","isHidden","isDisabled","theme","selectProps"]));return i.a.createElement("div",{className:Object(f.a)(r("input",T({theme:u},s)))},i.a.createElement(m.a,C({className:n(null,{input:!0},t),inputRef:o,inputStyle:Ae(a),disabled:l},s)))},LoadingIndicator:Oe,Menu:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerRef,l=e.innerProps,u=r(Object(f.a)(o("menu",e)),{menu:!0},n);return i.a.createElement("div",C({className:u},l,{ref:a}),t)},MenuList:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isMulti,l=e.innerRef;return i.a.createElement("div",{className:r(Object(f.a)(o("menuList",e)),{"menu-list":!0,"menu-list--is-multi":a},n),ref:l},t)},MenuPortal:$,LoadingMessage:G,NoOptionsMessage:q,MultiValue:Le,MultiValueContainer:Ne,MultiValueLabel:Ie,MultiValueRemove:Pe,Option:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isDisabled,l=e.isFocused,u=e.isSelected,s=e.innerRef,c=e.innerProps;return i.a.createElement("div",C({ref:s,className:r(Object(f.a)(o("option",e)),{option:!0,"option--is-disabled":a,"option--is-focused":l,"option--is-selected":u},n)},c),t)},Placeholder:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps;return i.a.createElement("div",C({className:r(Object(f.a)(o("placeholder",e)),{placeholder:!0},n)},a),t)},SelectContainer:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.innerProps,l=e.isDisabled,u=e.isRtl;return i.a.createElement("div",C({className:r(Object(f.a)(o("container",e)),{"--is-disabled":l,"--is-rtl":u},n)},a),t)},SingleValue:function(e){var t=e.children,n=e.className,r=e.cx,o=e.getStyles,a=e.isDisabled,l=e.innerProps;return i.a.createElement("div",C({className:r(Object(f.a)(o("singleValue",e)),{"single-value":!0,"single-value--is-disabled":a},n)},l),t)},ValueContainer:be},Me=function(e){return T({},Fe,e.components)},Re={clearIndicator:xe,container:function(e){var t=e.isDisabled;return{direction:e.isRtl?"rtl":null,pointerEvents:t?"none":null,position:"relative"}},control:function(e){var t=e.isDisabled,n=e.isFocused,r=e.theme,i=r.colors,o=r.borderRadius,a=r.spacing;return{alignItems:"center",backgroundColor:t?i.neutral5:i.neutral0,borderColor:t?i.neutral10:n?i.primary:i.neutral20,borderRadius:o,borderStyle:"solid",borderWidth:1,boxShadow:n?"0 0 0 1px ".concat(i.primary):null,cursor:"default",display:"flex",flexWrap:"wrap",justifyContent:"space-between",minHeight:a.controlHeight,outline:"0 !important",position:"relative",transition:"all 100ms","&:hover":{borderColor:n?i.primary:i.neutral30}}},dropdownIndicator:_e,group:function(e){var t=e.theme.spacing;return{paddingBottom:2*t.baseUnit,paddingTop:2*t.baseUnit}},groupHeading:function(e){var t=e.theme.spacing;return{color:"#999",cursor:"default",display:"block",fontSize:"75%",fontWeight:"500",marginBottom:"0.25em",paddingLeft:3*t.baseUnit,paddingRight:3*t.baseUnit,textTransform:"uppercase"}},indicatorsContainer:function(){return{alignItems:"center",alignSelf:"stretch",display:"flex",flexShrink:0}},indicatorSeparator:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing.baseUnit,i=n.colors;return{alignSelf:"stretch",backgroundColor:t?i.neutral10:i.neutral20,marginBottom:2*r,marginTop:2*r,width:1}},input:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing,i=n.colors;return{margin:r.baseUnit/2,paddingBottom:r.baseUnit/2,paddingTop:r.baseUnit/2,visibility:t?"hidden":"visible",color:i.neutral80}},loadingIndicator:function(e){var t=e.isFocused,n=e.size,r=e.theme,i=r.colors,o=r.spacing.baseUnit;return{color:t?i.neutral60:i.neutral20,display:"flex",padding:2*o,transition:"color 150ms",alignSelf:"center",fontSize:n,lineHeight:1,marginRight:n,textAlign:"center",verticalAlign:"middle"}},loadingMessage:z,menu:function(e){var t,n=e.placement,r=e.theme,i=r.borderRadius,o=r.spacing,a=r.colors;return w(t={},function(e){return e?{bottom:"top",top:"bottom"}[e]:"bottom"}(n),"100%"),w(t,"backgroundColor",a.neutral0),w(t,"borderRadius",i),w(t,"boxShadow","0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)"),w(t,"marginBottom",o.menuGutter),w(t,"marginTop",o.menuGutter),w(t,"position","absolute"),w(t,"width","100%"),w(t,"zIndex",1),t},menuList:function(e){var t=e.maxHeight,n=e.theme.spacing.baseUnit;return{maxHeight:t,overflowY:"auto",paddingBottom:n,paddingTop:n,position:"relative",WebkitOverflowScrolling:"touch"}},menuPortal:function(e){var t=e.rect,n=e.offset,r=e.position;return{left:t.left,position:r,top:n,width:t.width,zIndex:1}},multiValue:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius;return{backgroundColor:t.colors.neutral10,borderRadius:r/2,display:"flex",margin:n.baseUnit/2,minWidth:0}},multiValueLabel:function(e){var t=e.theme,n=t.borderRadius,r=t.colors,i=e.cropWithEllipsis;return{borderRadius:n/2,color:r.neutral80,fontSize:"85%",overflow:"hidden",padding:3,paddingLeft:6,textOverflow:i?"ellipsis":null,whiteSpace:"nowrap"}},multiValueRemove:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius,i=t.colors;return{alignItems:"center",borderRadius:r/2,backgroundColor:e.isFocused&&i.dangerLight,display:"flex",paddingLeft:n.baseUnit,paddingRight:n.baseUnit,":hover":{backgroundColor:i.dangerLight,color:i.danger}}},noOptionsMessage:B,option:function(e){var t=e.isDisabled,n=e.isFocused,r=e.isSelected,i=e.theme,o=i.spacing,a=i.colors;return{backgroundColor:r?a.primary:n?a.primary25:"transparent",color:t?a.neutral20:r?a.neutral0:"inherit",cursor:"default",display:"block",fontSize:"inherit",padding:"".concat(2*o.baseUnit,"px ").concat(3*o.baseUnit,"px"),width:"100%",userSelect:"none",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",":active":{backgroundColor:r?a.primary:a.primary50}}},placeholder:function(e){var t=e.theme,n=t.spacing;return{color:t.colors.neutral50,marginLeft:n.baseUnit/2,marginRight:n.baseUnit/2,position:"absolute",top:"50%",transform:"translateY(-50%)"}},singleValue:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing,i=n.colors;return{color:t?i.neutral40:i.neutral80,marginLeft:r.baseUnit/2,marginRight:r.baseUnit/2,maxWidth:"calc(100% - ".concat(2*r.baseUnit,"px)"),overflow:"hidden",position:"absolute",textOverflow:"ellipsis",whiteSpace:"nowrap",top:"50%",transform:"translateY(-50%)"}},valueContainer:function(e){var t=e.theme.spacing;return{alignItems:"center",display:"flex",flex:1,flexWrap:"wrap",padding:"".concat(t.baseUnit/2,"px ").concat(2*t.baseUnit,"px"),WebkitOverflowScrolling:"touch",position:"relative",overflow:"hidden"}}};var je,He={borderRadius:4,colors:{primary:"#2684FF",primary75:"#4C9AFF",primary50:"#B2D4FF",primary25:"#DEEBFF",danger:"#DE350B",dangerLight:"#FFBDAD",neutral0:"hsl(0, 0%, 100%)",neutral5:"hsl(0, 0%, 95%)",neutral10:"hsl(0, 0%, 90%)",neutral20:"hsl(0, 0%, 80%)",neutral30:"hsl(0, 0%, 70%)",neutral40:"hsl(0, 0%, 60%)",neutral50:"hsl(0, 0%, 50%)",neutral60:"hsl(0, 0%, 40%)",neutral70:"hsl(0, 0%, 30%)",neutral80:"hsl(0, 0%, 20%)",neutral90:"hsl(0, 0%, 10%)"},spacing:{baseUnit:4,controlHeight:38,menuGutter:8}},Ve={backspaceRemovesValue:!0,blurInputOnSelect:j(),captureMenuScroll:!j(),closeMenuOnSelect:!0,closeMenuOnScroll:!1,components:{},controlShouldRenderValue:!0,escapeClearsValue:!1,filterOption:function(e,t){var n=T({ignoreCase:!0,ignoreAccents:!0,stringify:te,trim:!0,matchFrom:"any"},je),r=n.ignoreCase,i=n.ignoreAccents,o=n.stringify,a=n.trim,l=n.matchFrom,u=a?ee(t):t,s=a?ee(o(e)):o(e);return r&&(u=u.toLowerCase(),s=s.toLowerCase()),i&&(u=Z(u),s=Z(s)),"start"===l?s.substr(0,u.length)===u:s.indexOf(u)>-1},formatGroupLabel:function(e){return e.label},getOptionLabel:function(e){return e.label},getOptionValue:function(e){return e.value},isDisabled:!1,isLoading:!1,isMulti:!1,isRtl:!1,isSearchable:!0,isOptionDisabled:function(e){return!!e.isDisabled},loadingMessage:function(){return"Loading..."},maxMenuHeight:300,minMenuHeight:140,menuIsOpen:!1,menuPlacement:"bottom",menuPosition:"absolute",menuShouldBlockScroll:!1,menuShouldScrollIntoView:!function(){try{return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}catch(e){return!1}}(),noOptionsMessage:function(){return"No options"},openMenuOnFocus:!1,openMenuOnClick:!0,options:[],pageSize:5,placeholder:"Select...",screenReaderStatus:function(e){var t=e.count;return"".concat(t," result").concat(1!==t?"s":""," available")},styles:{},tabIndex:"0",tabSelectsValue:!0},We=1,Ue=function(e){function t(e){var n;y(this,t),w(O(O(n=A(this,x(t).call(this,e)))),"state",{ariaLiveSelection:"",ariaLiveContext:"",focusedOption:null,focusedValue:null,inputIsHidden:!1,isFocused:!1,isComposing:!1,menuOptions:{render:[],focusable:[]},selectValue:[]}),w(O(O(n)),"blockOptionHover",!1),w(O(O(n)),"clearFocusValueOnUpdate",!1),w(O(O(n)),"commonProps",void 0),w(O(O(n)),"components",void 0),w(O(O(n)),"hasGroups",!1),w(O(O(n)),"initialTouchX",0),w(O(O(n)),"initialTouchY",0),w(O(O(n)),"inputIsHiddenAfterUpdate",void 0),w(O(O(n)),"instancePrefix",""),w(O(O(n)),"openAfterFocus",!1),w(O(O(n)),"scrollToFocusedOptionOnUpdate",!1),w(O(O(n)),"userIsDragging",void 0),w(O(O(n)),"controlRef",null),w(O(O(n)),"getControlRef",function(e){n.controlRef=e}),w(O(O(n)),"focusedOptionRef",null),w(O(O(n)),"getFocusedOptionRef",function(e){n.focusedOptionRef=e}),w(O(O(n)),"menuListRef",null),w(O(O(n)),"getMenuListRef",function(e){n.menuListRef=e}),w(O(O(n)),"inputRef",null),w(O(O(n)),"getInputRef",function(e){n.inputRef=e}),w(O(O(n)),"cacheComponents",function(e){n.components=Me({components:e})}),w(O(O(n)),"focus",n.focusInput),w(O(O(n)),"blur",n.blurInput),w(O(O(n)),"onChange",function(e,t){var r=n.props;(0,r.onChange)(e,T({},t,{name:r.name}))}),w(O(O(n)),"setValue",function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"set-value",r=arguments.length>2?arguments[2]:void 0,i=n.props,o=i.closeMenuOnSelect,a=i.isMulti;n.onInputChange("",{action:"set-value"}),o&&(n.inputIsHiddenAfterUpdate=!a,n.onMenuClose()),n.clearFocusValueOnUpdate=!0,n.onChange(e,{action:t,option:r})}),w(O(O(n)),"selectOption",function(e){var t=n.props,r=t.blurInputOnSelect;if(t.isMulti){var i=n.state.selectValue;if(n.isOptionSelected(e,i)){var o=n.getOptionValue(e);n.setValue(i.filter(function(e){return n.getOptionValue(e)!==o}),"deselect-option",e),n.announceAriaLiveSelection({event:"deselect-option",context:{value:n.getOptionLabel(e)}})}else n.setValue([].concat(D(i),[e]),"select-option",e),n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e)}})}else n.setValue(e,"select-option"),n.announceAriaLiveSelection({event:"select-option",context:{value:n.getOptionLabel(e)}});r&&n.blurInput()}),w(O(O(n)),"removeValue",function(e){var t=n.state.selectValue,r=n.getOptionValue(e);n.onChange(t.filter(function(e){return n.getOptionValue(e)!==r}),{action:"remove-value",removedValue:e}),n.announceAriaLiveSelection({event:"remove-value",context:{value:e?n.getOptionLabel(e):""}}),n.focusInput()}),w(O(O(n)),"clearValue",function(){var e=n.props.isMulti;n.onChange(e?[]:null,{action:"clear"})}),w(O(O(n)),"popValue",function(){var e=n.state.selectValue,t=e[e.length-1];n.announceAriaLiveSelection({event:"pop-value",context:{value:t?n.getOptionLabel(t):""}}),n.onChange(e.slice(0,e.length-1),{action:"pop-value",removedValue:t})}),w(O(O(n)),"getOptionLabel",function(e){return n.props.getOptionLabel(e)}),w(O(O(n)),"getOptionValue",function(e){return n.props.getOptionValue(e)}),w(O(O(n)),"getStyles",function(e,t){var r=Re[e](t);r.boxSizing="border-box";var i=n.props.styles[e];return i?i(r,t):r}),w(O(O(n)),"getElementId",function(e){return"".concat(n.instancePrefix,"-").concat(e)}),w(O(O(n)),"getActiveDescendentId",function(){var e=n.props.menuIsOpen,t=n.state,r=t.menuOptions,i=t.focusedOption;if(i&&e){var o=r.focusable.indexOf(i),a=r.render[o];return a&&a.key}}),w(O(O(n)),"announceAriaLiveSelection",function(e){var t=e.event,r=e.context;n.setState({ariaLiveSelection:ye(t,r)})}),w(O(O(n)),"announceAriaLiveContext",function(e){var t=e.event,r=e.context;n.setState({ariaLiveContext:ve(t,T({},r,{label:n.props["aria-label"]}))})}),w(O(O(n)),"onMenuMouseDown",function(e){0===e.button&&(e.stopPropagation(),e.preventDefault(),n.focusInput())}),w(O(O(n)),"onMenuMouseMove",function(e){n.blockOptionHover=!1}),w(O(O(n)),"onControlMouseDown",function(e){var t=n.props.openMenuOnClick;n.state.isFocused?n.props.menuIsOpen?"INPUT"!==e.currentTarget.tagName&&n.onMenuClose():t&&n.openMenu("first"):(t&&(n.openAfterFocus=!0),n.focusInput()),"INPUT"!==e.currentTarget.tagName&&e.preventDefault()}),w(O(O(n)),"onDropdownIndicatorMouseDown",function(e){if(!(e&&"mousedown"===e.type&&0!==e.button||n.props.isDisabled)){var t=n.props,r=t.isMulti,i=t.menuIsOpen;n.focusInput(),i?(n.inputIsHiddenAfterUpdate=!r,n.onMenuClose()):n.openMenu("first"),e.preventDefault(),e.stopPropagation()}}),w(O(O(n)),"onClearIndicatorMouseDown",function(e){e&&"mousedown"===e.type&&0!==e.button||(n.clearValue(),e.stopPropagation(),n.openAfterFocus=!1,setTimeout(function(){return n.focusInput()}))}),w(O(O(n)),"onScroll",function(e){"boolean"==typeof n.props.closeMenuOnScroll?e.target instanceof HTMLElement&&L(e.target)&&n.props.onMenuClose():"function"==typeof n.props.closeMenuOnScroll&&n.props.closeMenuOnScroll(e)&&n.props.onMenuClose()}),w(O(O(n)),"onCompositionStart",function(){n.setState({isComposing:!0})}),w(O(O(n)),"onCompositionEnd",function(){n.setState({isComposing:!1})}),w(O(O(n)),"onTouchStart",function(e){var t=e.touches.item(0);t&&(n.initialTouchX=t.clientX,n.initialTouchY=t.clientY,n.userIsDragging=!1)}),w(O(O(n)),"onTouchMove",function(e){var t=e.touches.item(0);if(t){var r=Math.abs(t.clientX-n.initialTouchX),i=Math.abs(t.clientY-n.initialTouchY);n.userIsDragging=r>5||i>5}}),w(O(O(n)),"onTouchEnd",function(e){n.userIsDragging||(n.controlRef&&!n.controlRef.contains(e.currentTarget)&&n.menuListRef&&!n.menuListRef.contains(e.currentTarget)&&n.blurInput(),n.initialTouchX=0,n.initialTouchY=0)}),w(O(O(n)),"onControlTouchEnd",function(e){n.userIsDragging||n.onControlMouseDown(e)}),w(O(O(n)),"onClearIndicatorTouchEnd",function(e){n.userIsDragging||n.onClearIndicatorMouseDown(e)}),w(O(O(n)),"onDropdownIndicatorTouchEnd",function(e){n.userIsDragging||n.onDropdownIndicatorMouseDown(e)}),w(O(O(n)),"handleInputChange",function(e){var t=e.currentTarget.value;n.inputIsHiddenAfterUpdate=!1,n.onInputChange(t,{action:"input-change"}),n.onMenuOpen()}),w(O(O(n)),"onInputFocus",function(e){var t=n.props,r=t.isSearchable,i=t.isMulti;n.props.onFocus&&n.props.onFocus(e),n.inputIsHiddenAfterUpdate=!1,n.announceAriaLiveContext({event:"input",context:{isSearchable:r,isMulti:i}}),n.setState({isFocused:!0}),(n.openAfterFocus||n.props.openMenuOnFocus)&&n.openMenu("first"),n.openAfterFocus=!1}),w(O(O(n)),"onInputBlur",function(e){n.menuListRef&&n.menuListRef.contains(document.activeElement)?n.inputRef.focus():(n.props.onBlur&&n.props.onBlur(e),n.onInputChange("",{action:"input-blur"}),n.onMenuClose(),n.setState({focusedValue:null,isFocused:!1}))}),w(O(O(n)),"onOptionHover",function(e){n.blockOptionHover||n.state.focusedOption===e||n.setState({focusedOption:e})}),w(O(O(n)),"shouldHideSelectedOptions",function(){var e=n.props,t=e.hideSelectedOptions,r=e.isMulti;return void 0===t?r:t}),w(O(O(n)),"onKeyDown",function(e){var t=n.props,r=t.isMulti,i=t.backspaceRemovesValue,o=t.escapeClearsValue,a=t.inputValue,l=t.isClearable,u=t.isDisabled,s=t.menuIsOpen,c=t.onKeyDown,f=t.tabSelectsValue,p=t.openMenuOnFocus,d=n.state,h=d.isComposing,m=d.focusedOption,g=d.focusedValue,v=d.selectValue;if(!(u||"function"==typeof c&&(c(e),e.defaultPrevented))){switch(n.blockOptionHover=!0,e.key){case"ArrowLeft":if(!r||a)return;n.focusValue("previous");break;case"ArrowRight":if(!r||a)return;n.focusValue("next");break;case"Delete":case"Backspace":if(a)return;if(g)n.removeValue(g);else{if(!i)return;r?n.popValue():l&&n.clearValue()}break;case"Tab":if(h)return;if(e.shiftKey||!s||!f||!m||p&&n.isOptionSelected(m,v))return;n.selectOption(m);break;case"Enter":if(s){if(!m)return;if(h)return;n.selectOption(m);break}return;case"Escape":s?(n.inputIsHiddenAfterUpdate=!1,n.onInputChange("",{action:"menu-close"}),n.onMenuClose()):l&&o&&n.clearValue();break;case" ":if(a)return;if(!s){n.openMenu("first");break}if(!m)return;n.selectOption(m);break;case"ArrowUp":s?n.focusOption("up"):n.openMenu("last");break;case"ArrowDown":s?n.focusOption("down"):n.openMenu("first");break;case"PageUp":if(!s)return;n.focusOption("pageup");break;case"PageDown":if(!s)return;n.focusOption("pagedown");break;case"Home":if(!s)return;n.focusOption("first");break;case"End":if(!s)return;n.focusOption("last");break;default:return}e.preventDefault()}});var r=e.value;n.cacheComponents=c(n.cacheComponents,X).bind(O(O(n))),n.cacheComponents(e.components),n.instancePrefix="react-select-"+(n.props.instanceId||++We);var i=P(r),o=n.buildMenuOptions(e,i);return n.state.menuOptions=o,n.state.selectValue=i,n}return _(t,r["Component"]),E(t,[{key:"componentDidMount",value:function(){this.startListeningComposition(),this.startListeningToTouch(),this.props.closeMenuOnScroll&&document&&document.addEventListener&&document.addEventListener("scroll",this.onScroll,!0),this.props.autoFocus&&this.focusInput()}},{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.options,r=t.value,i=t.inputValue;if(this.cacheComponents(e.components),e.value!==r||e.options!==n||e.inputValue!==i){var o=P(e.value),a=this.buildMenuOptions(e,o),l=this.getNextFocusedValue(o),u=this.getNextFocusedOption(a.focusable);this.setState({menuOptions:a,selectValue:o,focusedOption:u,focusedValue:l})}null!=this.inputIsHiddenAfterUpdate&&(this.setState({inputIsHidden:this.inputIsHiddenAfterUpdate}),delete this.inputIsHiddenAfterUpdate)}},{key:"componentDidUpdate",value:function(e){var t,n,r,i,o,a=this.props,l=a.isDisabled,u=a.menuIsOpen,s=this.state.isFocused;(s&&!l&&e.isDisabled||s&&u&&!e.menuIsOpen)&&this.focusInput(),this.menuListRef&&this.focusedOptionRef&&this.scrollToFocusedOptionOnUpdate&&(t=this.menuListRef,n=this.focusedOptionRef,r=t.getBoundingClientRect(),i=n.getBoundingClientRect(),o=n.offsetHeight/3,i.bottom+o>r.bottom?M(t,Math.min(n.offsetTop+n.clientHeight-t.offsetHeight+o,t.scrollHeight)):i.top-o<r.top&&M(t,Math.max(n.offsetTop-o,0))),this.scrollToFocusedOptionOnUpdate=!1}},{key:"componentWillUnmount",value:function(){this.stopListeningComposition(),this.stopListeningToTouch(),document.removeEventListener("scroll",this.onScroll,!0)}},{key:"onMenuOpen",value:function(){this.props.onMenuOpen()}},{key:"onMenuClose",value:function(){var e=this.props,t=e.isSearchable,n=e.isMulti;this.announceAriaLiveContext({event:"input",context:{isSearchable:t,isMulti:n}}),this.onInputChange("",{action:"menu-close"}),this.props.onMenuClose()}},{key:"onInputChange",value:function(e,t){this.props.onInputChange(e,t)}},{key:"focusInput",value:function(){this.inputRef&&this.inputRef.focus()}},{key:"blurInput",value:function(){this.inputRef&&this.inputRef.blur()}},{key:"openMenu",value:function(e){var t=this.state,n=t.menuOptions,r=t.selectValue,i=t.isFocused,o=this.props.isMulti,a="first"===e?0:n.focusable.length-1;if(!o){var l=n.focusable.indexOf(r[0]);l>-1&&(a=l)}this.scrollToFocusedOptionOnUpdate=!(i&&this.menuListRef),this.inputIsHiddenAfterUpdate=!1,this.onMenuOpen(),this.setState({focusedValue:null,focusedOption:n.focusable[a]}),this.announceAriaLiveContext({event:"menu"})}},{key:"focusValue",value:function(e){var t=this.props,n=t.isMulti,r=t.isSearchable,i=this.state,o=i.selectValue,a=i.focusedValue;if(n){this.setState({focusedOption:null});var l=o.indexOf(a);a||(l=-1,this.announceAriaLiveContext({event:"value"}));var u=o.length-1,s=-1;if(o.length){switch(e){case"previous":s=0===l?0:-1===l?u:l-1;break;case"next":l>-1&&l<u&&(s=l+1)}-1===s&&this.announceAriaLiveContext({event:"input",context:{isSearchable:r,isMulti:n}}),this.setState({inputIsHidden:-1!==s,focusedValue:o[s]})}}}},{key:"focusOption",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"first",t=this.props.pageSize,n=this.state,r=n.focusedOption,i=n.menuOptions.focusable;if(i.length){var o=0,a=i.indexOf(r);r||(a=-1,this.announceAriaLiveContext({event:"menu"})),"up"===e?o=a>0?a-1:i.length-1:"down"===e?o=(a+1)%i.length:"pageup"===e?(o=a-t)<0&&(o=0):"pagedown"===e?(o=a+t)>i.length-1&&(o=i.length-1):"last"===e&&(o=i.length-1),this.scrollToFocusedOptionOnUpdate=!0,this.setState({focusedOption:i[o],focusedValue:null})}}},{key:"getTheme",value:function(){return this.props.theme?"function"==typeof this.props.theme?this.props.theme(He):T({},He,this.props.theme):He}},{key:"getCommonProps",value:function(){var e=this.clearValue,t=this.getStyles,n=this.setValue,r=this.selectOption,i=this.props,o=i.classNamePrefix,a=i.isMulti,l=i.isRtl,u=i.options,s=this.state.selectValue,c=this.hasValue();return{cx:function(e,t,n,r){var i=[t,r];if(n&&e)for(var o in n)n.hasOwnProperty(o)&&n[o]&&i.push("".concat(I(e,o)));return i.filter(function(e){return e}).map(function(e){return String(e).trim()}).join(" ")}.bind(null,o),clearValue:e,getStyles:t,getValue:function(){return s},hasValue:c,isMulti:a,isRtl:l,options:u,selectOption:r,setValue:n,selectProps:i,theme:this.getTheme()}}},{key:"getNextFocusedValue",value:function(e){if(this.clearFocusValueOnUpdate)return this.clearFocusValueOnUpdate=!1,null;var t=this.state,n=t.focusedValue,r=t.selectValue.indexOf(n);if(r>-1){if(e.indexOf(n)>-1)return n;if(r<e.length)return e[r]}return null}},{key:"getNextFocusedOption",value:function(e){var t=this.state.focusedOption;return t&&e.indexOf(t)>-1?t:e[0]}},{key:"hasValue",value:function(){return this.state.selectValue.length>0}},{key:"hasOptions",value:function(){return!!this.state.menuOptions.render.length}},{key:"countOptions",value:function(){return this.state.menuOptions.focusable.length}},{key:"isClearable",value:function(){var e=this.props,t=e.isClearable,n=e.isMulti;return void 0===t?n:t}},{key:"isOptionDisabled",value:function(e,t){return"function"==typeof this.props.isOptionDisabled&&this.props.isOptionDisabled(e,t)}},{key:"isOptionSelected",value:function(e,t){var n=this;if(t.indexOf(e)>-1)return!0;if("function"==typeof this.props.isOptionSelected)return this.props.isOptionSelected(e,t);var r=this.getOptionValue(e);return t.some(function(e){return n.getOptionValue(e)===r})}},{key:"filterOption",value:function(e,t){return!this.props.filterOption||this.props.filterOption(e,t)}},{key:"formatOptionLabel",value:function(e,t){if("function"==typeof this.props.formatOptionLabel){var n=this.props.inputValue,r=this.state.selectValue;return this.props.formatOptionLabel(e,{context:t,inputValue:n,selectValue:r})}return this.getOptionLabel(e)}},{key:"formatGroupLabel",value:function(e){return this.props.formatGroupLabel(e)}},{key:"startListeningComposition",value:function(){document&&document.addEventListener&&(document.addEventListener("compositionstart",this.onCompositionStart,!1),document.addEventListener("compositionend",this.onCompositionEnd,!1))}},{key:"stopListeningComposition",value:function(){document&&document.removeEventListener&&(document.removeEventListener("compositionstart",this.onCompositionStart),document.removeEventListener("compositionend",this.onCompositionEnd))}},{key:"startListeningToTouch",value:function(){document&&document.addEventListener&&(document.addEventListener("touchstart",this.onTouchStart,!1),document.addEventListener("touchmove",this.onTouchMove,!1),document.addEventListener("touchend",this.onTouchEnd,!1))}},{key:"stopListeningToTouch",value:function(){document&&document.removeEventListener&&(document.removeEventListener("touchstart",this.onTouchStart),document.removeEventListener("touchmove",this.onTouchMove),document.removeEventListener("touchend",this.onTouchEnd))}},{key:"buildMenuOptions",value:function(e,t){var n=this,r=e.inputValue,i=void 0===r?"":r,o=e.options,a=function(e,r){var o=n.isOptionDisabled(e,t),a=n.isOptionSelected(e,t),l=n.getOptionLabel(e),u=n.getOptionValue(e);if(!(n.shouldHideSelectedOptions()&&a||!n.filterOption({label:l,value:u,data:e},i))){var s=o?void 0:function(){return n.onOptionHover(e)},c=o?void 0:function(){return n.selectOption(e)},f="".concat(n.getElementId("option"),"-").concat(r);return{innerProps:{id:f,onClick:c,onMouseMove:s,onMouseOver:s,tabIndex:-1},data:e,isDisabled:o,isSelected:a,key:f,label:l,type:"option",value:u}}};return o.reduce(function(e,t,r){if(t.options){n.hasGroups||(n.hasGroups=!0);var i=t.options.map(function(t,n){var i=a(t,"".concat(r,"-").concat(n));return i&&!i.isDisabled&&e.focusable.push(t),i}).filter(Boolean);if(i.length){var o="".concat(n.getElementId("group"),"-").concat(r);e.render.push({type:"group",key:o,data:t,options:i})}}else{var l=a(t,"".concat(r));l&&(e.render.push(l),l.isDisabled||e.focusable.push(t))}return e},{render:[],focusable:[]})}},{key:"constructAriaLiveMessage",value:function(){var e=this.state,t=e.ariaLiveContext,n=e.selectValue,r=e.focusedValue,i=e.focusedOption,o=this.props,a=o.options,l=o.menuIsOpen,u=o.inputValue,s=o.screenReaderStatus,c=r?function(e){var t=e.focusedValue,n=e.getOptionLabel,r=e.selectValue;return"value ".concat(n(t)," focused, ").concat(r.indexOf(t)+1," of ").concat(r.length,".")}({focusedValue:r,getOptionLabel:this.getOptionLabel,selectValue:n}):"",f=i&&l?function(e){var t=e.focusedOption,n=e.getOptionLabel,r=e.options;return"option ".concat(n(t)," focused, ").concat(r.indexOf(t)+1," of ").concat(r.length,".")}({focusedOption:i,getOptionLabel:this.getOptionLabel,options:a}):"",p=function(e){var t=e.inputValue,n=e.screenReaderMessage;return"".concat(n).concat(t?" for search term "+t:"",".")}({inputValue:u,screenReaderMessage:s({count:this.countOptions()})});return"".concat(c," ").concat(f," ").concat(p," ").concat(t)}},{key:"renderInput",value:function(){var e=this.props,t=e.isDisabled,n=e.isSearchable,r=e.inputId,o=e.inputValue,a=e.tabIndex,l=this.components.Input,u=this.state.inputIsHidden,s=r||this.getElementId("input");if(!n)return i.a.createElement(re,{id:s,innerRef:this.getInputRef,onBlur:this.onInputBlur,onChange:N,onFocus:this.onInputFocus,readOnly:!0,disabled:t,tabIndex:a,value:""});var c={"aria-autocomplete":"list","aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"]},f=this.commonProps,p=f.cx,d=f.theme,h=f.selectProps;return i.a.createElement(l,C({autoCapitalize:"none",autoComplete:"off",autoCorrect:"off",cx:p,getStyles:this.getStyles,id:s,innerRef:this.getInputRef,isDisabled:t,isHidden:u,onBlur:this.onInputBlur,onChange:this.handleInputChange,onFocus:this.onInputFocus,selectProps:h,spellCheck:"false",tabIndex:a,theme:d,type:"text",value:o},c))}},{key:"renderPlaceholderOrValue",value:function(){var e=this,t=this.components,n=t.MultiValue,r=t.MultiValueContainer,o=t.MultiValueLabel,a=t.MultiValueRemove,l=t.SingleValue,u=t.Placeholder,s=this.commonProps,c=this.props,f=c.controlShouldRenderValue,p=c.isDisabled,d=c.isMulti,h=c.inputValue,m=c.placeholder,g=this.state,v=g.selectValue,y=g.focusedValue,b=g.isFocused;if(!this.hasValue()||!f)return h?null:i.a.createElement(u,C({},s,{key:"placeholder",isDisabled:p,isFocused:b}),m);if(d)return v.map(function(t){var l=t===y;return i.a.createElement(n,C({},s,{components:{Container:r,Label:o,Remove:a},isFocused:l,isDisabled:p,key:e.getOptionValue(t),removeProps:{onClick:function(){return e.removeValue(t)},onTouchEnd:function(){return e.removeValue(t)},onMouseDown:function(e){e.preventDefault(),e.stopPropagation()}},data:t}),e.formatOptionLabel(t,"value"))});if(h)return null;var E=v[0];return i.a.createElement(l,C({},s,{data:E,isDisabled:p}),this.formatOptionLabel(E,"value"))}},{key:"renderClearIndicator",value:function(){var e=this.components.ClearIndicator,t=this.commonProps,n=this.props,r=n.isDisabled,o=n.isLoading,a=this.state.isFocused;if(!this.isClearable()||!e||r||!this.hasValue()||o)return null;var l={onMouseDown:this.onClearIndicatorMouseDown,onTouchEnd:this.onClearIndicatorTouchEnd,"aria-hidden":"true"};return i.a.createElement(e,C({},t,{innerProps:l,isFocused:a}))}},{key:"renderLoadingIndicator",value:function(){var e=this.components.LoadingIndicator,t=this.commonProps,n=this.props,r=n.isDisabled,o=n.isLoading,a=this.state.isFocused;if(!e||!o)return null;return i.a.createElement(e,C({},t,{innerProps:{"aria-hidden":"true"},isDisabled:r,isFocused:a}))}},{key:"renderIndicatorSeparator",value:function(){var e=this.components,t=e.DropdownIndicator,n=e.IndicatorSeparator;if(!t||!n)return null;var r=this.commonProps,o=this.props.isDisabled,a=this.state.isFocused;return i.a.createElement(n,C({},r,{isDisabled:o,isFocused:a}))}},{key:"renderDropdownIndicator",value:function(){var e=this.components.DropdownIndicator;if(!e)return null;var t=this.commonProps,n=this.props.isDisabled,r=this.state.isFocused,o={onMouseDown:this.onDropdownIndicatorMouseDown,onTouchEnd:this.onDropdownIndicatorTouchEnd,"aria-hidden":"true"};return i.a.createElement(e,C({},t,{innerProps:o,isDisabled:n,isFocused:r}))}},{key:"renderMenu",value:function(){var e=this,t=this.components,n=t.Group,r=t.GroupHeading,o=t.Menu,a=t.MenuList,l=t.MenuPortal,u=t.LoadingMessage,s=t.NoOptionsMessage,c=t.Option,f=this.commonProps,p=this.state,d=p.focusedOption,h=p.menuOptions,m=this.props,g=m.captureMenuScroll,v=m.inputValue,y=m.isLoading,b=m.loadingMessage,E=m.minMenuHeight,w=m.maxMenuHeight,T=m.menuIsOpen,_=m.menuPlacement,x=m.menuPosition,S=m.menuPortalTarget,O=m.menuShouldBlockScroll,A=m.menuShouldScrollIntoView,D=m.noOptionsMessage,N=m.onMenuScrollToTop,I=m.onMenuScrollToBottom;if(!T)return null;var P,L=function(t){var n=d===t.data;return t.innerRef=n?e.getFocusedOptionRef:void 0,i.a.createElement(c,C({},f,t,{isFocused:n}),e.formatOptionLabel(t.data,"menu"))};if(this.hasOptions())P=h.render.map(function(t){if("group"===t.type){t.type;var o=k(t,["type"]),a="".concat(t.key,"-heading");return i.a.createElement(n,C({},f,o,{Heading:r,headingProps:{id:a},label:e.formatGroupLabel(t.data)}),t.options.map(function(e){return L(e)}))}if("option"===t.type)return L(t)});else if(y){var F=b({inputValue:v});if(null===F)return null;P=i.a.createElement(u,f,F)}else{var M=D({inputValue:v});if(null===M)return null;P=i.a.createElement(s,f,M)}var R={minMenuHeight:E,maxMenuHeight:w,menuPlacement:_,menuPosition:x,menuShouldScrollIntoView:A},j=i.a.createElement(W,C({},f,R),function(t){var n=t.ref,r=t.placerProps,l=r.placement,u=r.maxHeight;return i.a.createElement(o,C({},f,R,{innerRef:n,innerProps:{onMouseDown:e.onMenuMouseDown,onMouseMove:e.onMenuMouseMove},isLoading:y,placement:l}),i.a.createElement(ge,{isEnabled:g,onTopArrive:N,onBottomArrive:I},i.a.createElement(he,{isEnabled:O},i.a.createElement(a,C({},f,{innerRef:e.getMenuListRef,isLoading:y,maxHeight:u}),P))))});return S||"fixed"===x?i.a.createElement(l,C({},f,{appendTo:S,controlElement:this.controlRef,menuPlacement:_,menuPosition:x}),j):j}},{key:"renderFormField",value:function(){var e=this,t=this.props,n=t.delimiter,r=t.isDisabled,o=t.isMulti,a=t.name,l=this.state.selectValue;if(a&&!r){if(o){if(n){var u=l.map(function(t){return e.getOptionValue(t)}).join(n);return i.a.createElement("input",{name:a,type:"hidden",value:u})}var s=l.length>0?l.map(function(t,n){return i.a.createElement("input",{key:"i-".concat(n),name:a,type:"hidden",value:e.getOptionValue(t)})}):i.a.createElement("input",{name:a,type:"hidden"});return i.a.createElement("div",null,s)}var c=l[0]?this.getOptionValue(l[0]):"";return i.a.createElement("input",{name:a,type:"hidden",value:c})}}},{key:"renderLiveRegion",value:function(){return this.state.isFocused?i.a.createElement(ne,{"aria-live":"assertive"},i.a.createElement("p",{id:"aria-selection-event"}," ",this.state.ariaLiveSelection),i.a.createElement("p",{id:"aria-context"}," ",this.constructAriaLiveMessage())):null}},{key:"render",value:function(){var e=this.components,t=e.Control,n=e.IndicatorsContainer,r=e.SelectContainer,o=e.ValueContainer,a=this.props,l=a.className,u=a.id,s=a.isDisabled,c=a.menuIsOpen,f=this.state.isFocused,p=this.commonProps=this.getCommonProps();return i.a.createElement(r,C({},p,{className:l,innerProps:{id:u,onKeyDown:this.onKeyDown},isDisabled:s,isFocused:f}),this.renderLiveRegion(),i.a.createElement(t,C({},p,{innerRef:this.getControlRef,innerProps:{onMouseDown:this.onControlMouseDown,onTouchEnd:this.onControlTouchEnd},isDisabled:s,isFocused:f,menuIsOpen:c}),i.a.createElement(o,C({},p,{isDisabled:s}),this.renderPlaceholderOrValue(),this.renderInput()),i.a.createElement(n,C({},p,{isDisabled:s}),this.renderClearIndicator(),this.renderLoadingIndicator(),this.renderIndicatorSeparator(),this.renderDropdownIndicator())),this.renderMenu(),this.renderFormField())}}]),t}();w(Ue,"defaultProps",Ve);var Be={defaultInputValue:"",defaultMenuIsOpen:!1,defaultValue:null},ze=function(e){var t,n;return n=t=function(t){function n(){var e,t;y(this,n);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(t=A(this,(e=x(n)).call.apply(e,[this].concat(i))))),"select",void 0),w(O(O(t)),"state",{inputValue:void 0!==t.props.inputValue?t.props.inputValue:t.props.defaultInputValue,menuIsOpen:void 0!==t.props.menuIsOpen?t.props.menuIsOpen:t.props.defaultMenuIsOpen,value:void 0!==t.props.value?t.props.value:t.props.defaultValue}),w(O(O(t)),"onChange",function(e,n){t.callProp("onChange",e,n),t.setState({value:e})}),w(O(O(t)),"onInputChange",function(e,n){var r=t.callProp("onInputChange",e,n);t.setState({inputValue:void 0!==r?r:e})}),w(O(O(t)),"onMenuOpen",function(){t.callProp("onMenuOpen"),t.setState({menuIsOpen:!0})}),w(O(O(t)),"onMenuClose",function(){t.callProp("onMenuClose"),t.setState({menuIsOpen:!1})}),t}return _(n,r["Component"]),E(n,[{key:"focus",value:function(){this.select.focus()}},{key:"blur",value:function(){this.select.blur()}},{key:"getProp",value:function(e){return void 0!==this.props[e]?this.props[e]:this.state[e]}},{key:"callProp",value:function(e){if("function"==typeof this.props[e]){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return(t=this.props)[e].apply(t,r)}}},{key:"render",value:function(){var t=this,n=this.props,r=(n.defaultInputValue,n.defaultMenuIsOpen,n.defaultValue,k(n,["defaultInputValue","defaultMenuIsOpen","defaultValue"]));return i.a.createElement(e,C({},r,{ref:function(e){t.select=e},inputValue:this.getProp("inputValue"),menuIsOpen:this.getProp("menuIsOpen"),onChange:this.onChange,onInputChange:this.onInputChange,onMenuClose:this.onMenuClose,onMenuOpen:this.onMenuOpen,value:this.getProp("value")}))}}]),n}(),w(t,"defaultProps",Be),n},qe={cacheOptions:!1,defaultOptions:!1,filterOption:null},Ge=function(e){var t,n;return n=t=function(t){function n(e){var t;return y(this,n),w(O(O(t=A(this,x(n).call(this)))),"select",void 0),w(O(O(t)),"lastRequest",void 0),w(O(O(t)),"mounted",!1),w(O(O(t)),"optionsCache",{}),w(O(O(t)),"handleInputChange",function(e,n){var r=t.props,i=r.cacheOptions,o=function(e,t,n){if(n){var r=n(e,t);if("string"==typeof r)return r}return e}(e,n,r.onInputChange);if(!o)return delete t.lastRequest,void t.setState({inputValue:"",loadedInputValue:"",loadedOptions:[],isLoading:!1,passEmptyOptions:!1});if(i&&t.optionsCache[o])t.setState({inputValue:o,loadedInputValue:o,loadedOptions:t.optionsCache[o],isLoading:!1,passEmptyOptions:!1});else{var a=t.lastRequest={};t.setState({inputValue:o,isLoading:!0,passEmptyOptions:!t.state.loadedInputValue},function(){t.loadOptions(o,function(e){t.mounted&&(e&&(t.optionsCache[o]=e),a===t.lastRequest&&(delete t.lastRequest,t.setState({isLoading:!1,loadedInputValue:o,loadedOptions:e||[],passEmptyOptions:!1})))})})}return o}),t.state={defaultOptions:Array.isArray(e.defaultOptions)?e.defaultOptions:void 0,inputValue:void 0!==e.inputValue?e.inputValue:"",isLoading:!0===e.defaultOptions,loadedOptions:[],passEmptyOptions:!1},t}return _(n,r["Component"]),E(n,[{key:"componentDidMount",value:function(){var e=this;this.mounted=!0;var t=this.props.defaultOptions,n=this.state.inputValue;!0===t&&this.loadOptions(n,function(t){if(e.mounted){var n=!!e.lastRequest;e.setState({defaultOptions:t||[],isLoading:n})}})}},{key:"componentWillReceiveProps",value:function(e){e.cacheOptions!==this.props.cacheOptions&&(this.optionsCache={}),e.defaultOptions!==this.props.defaultOptions&&this.setState({defaultOptions:Array.isArray(e.defaultOptions)?e.defaultOptions:void 0})}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"focus",value:function(){this.select.focus()}},{key:"blur",value:function(){this.select.blur()}},{key:"loadOptions",value:function(e,t){var n=this.props.loadOptions;if(!n)return t();var r=n(e,t);r&&"function"==typeof r.then&&r.then(t,function(){return t()})}},{key:"render",value:function(){var t=this,n=this.props,r=(n.loadOptions,k(n,["loadOptions"])),o=this.state,a=o.defaultOptions,l=o.inputValue,u=o.isLoading,s=o.loadedInputValue,c=o.loadedOptions,f=o.passEmptyOptions?[]:l&&s?c:a||[];return i.a.createElement(e,C({},r,{ref:function(e){t.select=e},options:f,isLoading:u,onInputChange:this.handleInputChange}))}}]),n}(),w(t,"defaultProps",qe),n},$e=(Ge(ze(Ue)),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=String(e).toLowerCase(),r=String(t.value).toLowerCase(),i=String(t.label).toLowerCase();return r===n||i===n}),Ke=T({allowCreateWhileLoading:!1,createOptionPosition:"last"},{formatCreateLabel:function(e){return'Create "'.concat(e,'"')},isValidNewOption:function(e,t,n){return!(!e||t.some(function(t){return $e(e,t)})||n.some(function(t){return $e(e,t)}))},getNewOptionData:function(e,t){return{label:t,value:e,__isNew__:!0}}}),Ye=function(e){var t,n;return n=t=function(t){function n(e){var t;y(this,n),w(O(O(t=A(this,x(n).call(this,e)))),"select",void 0),w(O(O(t)),"onChange",function(e,n){var r=t.props,i=r.getNewOptionData,o=r.inputValue,a=r.isMulti,l=r.onChange,u=r.onCreateOption,s=r.value;if("select-option"!==n.action)return l(e,n);var c=t.state.newOption,f=Array.isArray(e)?e:[e];if(f[f.length-1]!==c)l(e,n);else if(u)u(o);else{var p=i(o,o),d={action:"create-option"};l(a?[].concat(D(P(s)),[p]):p,d)}});var r=e.options||[];return t.state={newOption:void 0,options:r},t}return _(n,r["Component"]),E(n,[{key:"componentWillReceiveProps",value:function(e){var t=e.allowCreateWhileLoading,n=e.createOptionPosition,r=e.formatCreateLabel,i=e.getNewOptionData,o=e.inputValue,a=e.isLoading,l=e.isValidNewOption,u=e.value,s=e.options||[],c=this.state.newOption;c=l(o,P(u),s)?i(o,r(o)):void 0,this.setState({newOption:c,options:!t&&a||!c?s:"first"===n?[c].concat(D(s)):[].concat(D(s),[c])})}},{key:"focus",value:function(){this.select.focus()}},{key:"blur",value:function(){this.select.blur()}},{key:"render",value:function(){var t=this,n=C({},this.props),r=this.state.options;return i.a.createElement(e,C({},n,{ref:function(e){t.select=e},options:r,onChange:this.onChange}))}}]),n}(),w(t,"defaultProps",Ke),n},Qe=(ze(Ye(Ue)),Ge(ze(Ye(Ue))),function(e){var t=e.component,n=e.duration,r=void 0===n?1:n,o=e.in,a=(e.onExited,k(e,["component","duration","in","onExited"])),l={entering:{opacity:0},entered:{opacity:1,transition:"opacity ".concat(r,"ms")},exiting:{opacity:0},exited:{opacity:0}};return i.a.createElement(g.Transition,{mountOnEnter:!0,unmountOnExit:!0,in:o,timeout:r},function(e){var n={style:T({},l[e])};return i.a.createElement(t,C({innerProps:n},a))})}),Xe=260,Je=function(e){function t(){var e,n;y(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return w(O(O(n=A(this,(e=x(t)).call.apply(e,[this].concat(i))))),"duration",Xe),w(O(O(n)),"rafID",void 0),w(O(O(n)),"state",{width:"auto"}),w(O(O(n)),"transition",{exiting:{width:0,transition:"width ".concat(n.duration,"ms ease-out")},exited:{width:0}}),w(O(O(n)),"getWidth",function(e){e&&isNaN(n.state.width)&&(n.rafID=window.requestAnimationFrame(function(){var t=e.getBoundingClientRect().width;n.setState({width:t})}))}),w(O(O(n)),"getStyle",function(e){return{overflow:"hidden",whiteSpace:"nowrap",width:e}}),w(O(O(n)),"getTransition",function(e){return n.transition[e]}),n}return _(t,r["Component"]),E(t,[{key:"componentWillUnmount",value:function(){this.rafID&&window.cancelAnimationFrame(this.rafID)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.in,o=this.state.width;return i.a.createElement(g.Transition,{enter:!1,mountOnEnter:!0,unmountOnExit:!0,in:r,timeout:this.duration},function(t){var r=T({},e.getStyle(o),e.getTransition(t));return i.a.createElement("div",{ref:e.getWidth,style:r},n)})}}]),t}(),Ze=function(e){return function(t){var n=t.in,r=t.onExited,o=k(t,["in","onExited"]);return i.a.createElement(Je,{in:n,onExited:r},i.a.createElement(e,C({cropWithEllipsis:n},o)))}},et=function(e){return function(t){return i.a.createElement(Qe,C({component:e,duration:t.isMulti?Xe:1},t))}},tt=function(e){return function(t){return i.a.createElement(Qe,C({component:e},t))}},nt=function(e){return function(t){return i.a.createElement(g.TransitionGroup,C({component:e},t))}},rt=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Me({components:t}),r=n.Input,o=n.MultiValue,a=n.Placeholder,l=n.SingleValue,u=n.ValueContainer,s=k(n,["Input","MultiValue","Placeholder","SingleValue","ValueContainer"]);return T({Input:(e=r,function(t){t.in,t.onExited,t.appear,t.enter,t.exit;var n=k(t,["in","onExited","appear","enter","exit"]);return i.a.createElement(e,n)}),MultiValue:Ze(o),Placeholder:et(a),SingleValue:tt(l),ValueContainer:nt(u)},s)},it=rt(),ot=(it.Input,it.MultiValue,it.Placeholder,it.SingleValue,it.ValueContainer,c(rt,X),ze(Ue)),at=(n(43),function(e){var t=e.handleChange,n=e.options;return i.a.createElement(r.Fragment,null,i.a.createElement("header",null,i.a.createElement("section",{className:"wrapper-search"},i.a.createElement(ot,{id:"search-term",options:n,onChange:t}))),i.a.createElement("hr",null))});at.propTypes={handleChange:u.a.func.isRequired,options:u.a.instanceOf(Array)},at.defaultProps={options:{value:"Выберите имя",label:"Выберите имя"}};var lt=at;function ut(e){return(ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function st(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ct(e){return(ct=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var dt=function(e){function t(){var e,n,r,i,o,a,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var u=arguments.length,s=new Array(u),c=0;c<u;c++)s[c]=arguments[c];return r=this,i=(e=ct(t)).call.apply(e,[this].concat(s)),n=!i||"object"!==ut(i)&&"function"!=typeof i?pt(r):i,o=pt(pt(n)),l=function(e){var t=e.value;(0,n.props.setValueInput)(t)},(a="handleChange")in o?Object.defineProperty(o,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):o[a]=l,n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(t,r["Component"]),n=t,(o=[{key:"render",value:function(){var e=this.props.options;return i.a.createElement(lt,{handleChange:this.handleChange,options:e})}}])&&st(n.prototype,o),a&&st(n,a),t}();dt.propTypes={setValueInput:u.a.func.isRequired,options:u.a.instanceOf(Array)},dt.defaultProps={options:{value:"Выберите имя",label:"Выберите имя"}};var ht=dt,mt=(n(45),function(e){var t=e.listTasks,n=e.currentMentor;return n?i.a.createElement("main",null,i.a.createElement("section",{className:"wrapper-table"},i.a.createElement("h1",{className:"visuallyhidden"},"RSS Дашборд ментора"),i.a.createElement("table",null,i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",{className:"task-name"},"Task/Name"),Object.keys(n.students).map(function(e,t){var r=Object.keys(n.students[e]),o=n.students[t][r].id;return i.a.createElement("td",{key:o},i.a.createElement("a",{href:"https://github.com/".concat(r)},r))})),t.map(function(e){return i.a.createElement("tr",{key:e.ind.toString()},i.a.createElement("td",{className:"task-name"},i.a.createElement("a",{href:e.link},e.name)),n.students.map(function(t){var n=t[Object.keys(t)].id;return i.a.createElement("td",{key:n,className:t[Object.keys(t)].arrStatusTasks[e.ind]})}))}))))):i.a.createElement("main",null,i.a.createElement("section",{className:"wrapper-table"},i.a.createElement("h1",{className:"visuallyhidden"},"RSS Дашборд ментора")))});mt.propTypes={listTasks:u.a.instanceOf(Array),currentMentor:u.a.oneOfType([u.a.string,u.a.instanceOf(Object)])},mt.defaultProps={listTasks:[{ind:"0",link:"/",name:""}],currentMentor:{mentor:"",mentorGithub:"",students:[]}};var gt=mt;function vt(e){return(vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yt(e,t,n,r,i,o,a){try{var l=e[o](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,i)}function bt(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var o=e.apply(t,n);function a(e){yt(o,r,i,a,l,"next",e)}function l(e){yt(o,r,i,a,l,"throw",e)}a(void 0)})}}function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wt(e){return(wt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ct(e,t){return(Ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Tt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var xt=function(e){function t(){var e,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=wt(t).call(this),e=!r||"object"!==vt(r)&&"function"!=typeof r?Tt(n):r,_t(Tt(Tt(e)),"getData",function(){var t=bt(regeneratorRuntime.mark(function t(n){var r,i,o,a;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return a=[r=[],i=[],o=[]],t.next=6,fetch("data/dataMentors.json").then(function(e){return e.json()}).then(function(e){e.forEach(function(e,t){if(r.push({value:e.mentor,label:e.mentorGithub}),o.push(e),0===t){var n=Object.keys(e.students[0])[0],a=e.students[0][n];a.arrNameTasks.forEach(function(e,t){i.push({ind:t,name:e,link:a.arrLinkTasks[t]})})}})});case 6:n.forEach(function(t,n){e.setState(_t({},t,a[n]))});case 7:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()),_t(Tt(Tt(e)),"setValueInput",function(t){e.setCurrentMentor(t),e.setLocaleStoradge("mentor",t)}),_t(Tt(Tt(e)),"setCurrentMentor",function(t){var n=e.state.dataMentors.filter(function(e){return e.mentor===t})[0];e.setState({currentMentor:n})}),_t(Tt(Tt(e)),"setLocaleStoradge",function(e,t){localStorage[e]=t}),_t(Tt(Tt(e)),"getLocaleStoradge",function(e){return localStorage[e]}),e.state={listMentors:[],listTasks:[],dataMentors:[],currentMentor:""},e}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ct(e,t)}(t,r["Component"]),n=t,(o=[{key:"componentDidMount",value:function(){var e=bt(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getData(["listMentors","listTasks","dataMentors"]);case 2:(t=this.getLocaleStoradge("mentor"))&&this.setCurrentMentor(t);case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"render",value:function(){var e=this.state,t=e.listMentors,n=e.listTasks,o=e.currentMentor;return i.a.createElement(r.Fragment,null,i.a.createElement(ht,{setValueInput:this.setValueInput,options:t}),i.a.createElement(gt,{listTasks:n,currentMentor:o}))}}])&&Et(n.prototype,o),a&&Et(n,a),t}();a.a.render(i.a.createElement(xt,null),document.body.appendChild(document.createElement("div")))},function(e,t){},,,,,,function(e,t){},,function(e,t){},,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZW1vdGlvbi9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1JlcGxhY2VUcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9kaXN0L3JlYWN0LXNlbGVjdC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udGFpbmVyL0lucHV0Q29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL1RhYmxlL1RhYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiaW5qZWN0R2xvYmFsIiwiY3NzIiwiY3JlYXRlX2Vtb3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNvbnRleHQiLCJfY3JlYXRlRW1vdGlvbiIsImZsdXNoIiwiaHlkcmF0ZSIsImN4IiwibWVyZ2UiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwia2V5ZnJhbWVzIiwic2hlZXQiLCJjYWNoZXMiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93IiwiX0NTU1RyYW5zaXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1JlcGxhY2VUcmFuc2l0aW9uIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9UcmFuc2l0aW9uIiwib2JqIiwiZGVmYXVsdCIsIlRyYW5zaXRpb24iLCJUcmFuc2l0aW9uR3JvdXAiLCJSZXBsYWNlVHJhbnNpdGlvbiIsIkNTU1RyYW5zaXRpb24iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm1hcCIsImpvaW4iLCJ0ZXN0MyIsInNwbGl0IiwiZm9yRWFjaCIsImxldHRlciIsImtleXMiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwic3ltYm9scyIsInRvIiwidmFsIiwiVHlwZUVycm9yIiwidG9PYmplY3QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJFWElUSU5HIiwiRU5URVJFRCIsIkVOVEVSSU5HIiwiRVhJVEVEIiwiVU5NT1VOVEVEIiwiUHJvcFR5cGVzIiwibmV3T2JqIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0IiwiX3JlYWN0RG9tIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsIl9SZWFjdCRDb21wb25lbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm9wcyIsIl90aGlzIiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwidHJhbnNpdGlvbkdyb3VwIiwiYXBwZWFyIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwiaW4iLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwic3RhdGUiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIl9yZWYiLCJwcmV2U3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVN0YXR1cyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsInRpbWVvdXQiLCJtb3VudGluZyIsIm5vZGUiLCJmaW5kRE9NTm9kZSIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0Iiwic2V0U3RhdGUiLCJfdGhpczIiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsIm9uRW50ZXIiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJjYW5jZWwiLCJuZXh0U3RhdGUiLCJjYWxsYmFjayIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImFjdGl2ZSIsImV2ZW50IiwiaGFuZGxlciIsImFkZEVuZExpc3RlbmVyIiwic2V0VGltZW91dCIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiY2hpbGRyZW4iLCJjaGlsZFByb3BzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiY2hpbGQiLCJDaGlsZHJlbiIsIm9ubHkiLCJjbG9uZUVsZW1lbnQiLCJDb21wb25lbnQiLCJub29wIiwiY29udGV4dFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJfZGVmYXVsdCIsInBvbHlmaWxsIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiaXNSZWFjdENvbXBvbmVudCIsIkVycm9yIiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsIm5ld0FwaU5hbWUiLCJtYXliZVNuYXBzaG90Iiwic25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiY2xhc3NOYW1lc1NoYXBlIiwidGltZW91dHNTaGFwZSIsIl9wcm9wVHlwZXMiLCJfQ2hpbGRNYXBwaW5nIiwiX2V4dGVuZHMiLCJhcHBseSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJ2YWx1ZXMiLCJrIiwiaGFuZGxlRXhpdGVkIiwiZmlyc3RSZW5kZXIiLCJhcHBlYXJlZCIsIm1vdW50ZWQiLCJwcmV2Q2hpbGRNYXBwaW5nIiwiZ2V0SW5pdGlhbENoaWxkTWFwcGluZyIsImdldE5leHRDaGlsZE1hcHBpbmciLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiZ2V0Q2hpbGRNYXBwaW5nIiwiY29tcG9uZW50IiwiY2hpbGRGYWN0b3J5IiwiY3JlYXRlRWxlbWVudCIsImlzUmVxdWlyZWQiLCJpbnNlcnRSdWxlIiwidG9TaGVldCIsImJsb2NrIiwiY29udGVudCIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwiZGVwdGgiLCJhdCIsImNoYXJDb2RlQXQiLCJkZWxpbWl0ZXIiLCJmYWN0b3J5Iiwibm93Iiwicm9vdCIsInZlbmRvcnMiLCJzdWZmaXgiLCJyYWYiLCJjYWYiLCJsYXN0IiwiaWQiLCJxdWV1ZSIsIl9ub3ciLCJuZXh0IiwiTWF0aCIsIm1heCIsImNwIiwic2xpY2UiLCJjYW5jZWxsZWQiLCJyb3VuZCIsInB1c2giLCJoYW5kbGUiLCJmbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlYWN0MiIsIl9wcm9wVHlwZXMyIiwic2l6ZXJTdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInZpc2liaWxpdHkiLCJoZWlnaHQiLCJvdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJJTlBVVF9QUk9QU19CTEFDS0xJU1QiLCJjb3B5U3R5bGVzIiwic3R5bGVzIiwic3R5bGUiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwibGV0dGVyU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJpc0lFIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsImdlbmVyYXRlSWQiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInVuZGVmaW5lZCIsIkF1dG9zaXplSW5wdXQiLCJfQ29tcG9uZW50IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImdldFByb3RvdHlwZU9mIiwiaW5wdXRSZWYiLCJlbCIsImlucHV0IiwicGxhY2VIb2xkZXJTaXplclJlZiIsInBsYWNlSG9sZGVyU2l6ZXIiLCJzaXplclJlZiIsInNpemVyIiwiaW5wdXRXaWR0aCIsIm1pbldpZHRoIiwiaW5wdXRJZCIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiY29weUlucHV0U3R5bGVzIiwidXBkYXRlSW5wdXRXaWR0aCIsIm9uQXV0b3NpemUiLCJnZXRDb21wdXRlZFN0eWxlIiwiaW5wdXRTdHlsZXMiLCJzY3JvbGxXaWR0aCIsIm5ld0lucHV0V2lkdGgiLCJwbGFjZWhvbGRlciIsInBsYWNlaG9sZGVySXNNaW5XaWR0aCIsInR5cGUiLCJleHRyYVdpZHRoIiwicGFyc2VJbnQiLCJmb2N1cyIsImJsdXIiLCJzZWxlY3QiLCJpbmplY3RTdHlsZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsInNpemVyVmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJyZWR1Y2UiLCJwcmV2aW91c1ZhbHVlIiwiY3VycmVudFZhbHVlIiwid3JhcHBlclN0eWxlIiwiZGlzcGxheSIsImlucHV0U3R5bGUiLCJib3hTaXppbmciLCJ3aWR0aCIsImlucHV0UHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJmaWVsZCIsImNsZWFuSW5wdXRQcm9wcyIsImNsYXNzTmFtZSIsImlucHV0Q2xhc3NOYW1lIiwicmVuZGVyU3R5bGVzIiwicmVmIiwic3RyaW5nIiwiYW55Iiwib25lT2ZUeXBlIiwibnVtYmVyIiwiYm9vbCIsImZ1bmMiLCJvbkNoYW5nZSIsIm1lbW9pemVfZXNtIiwiY2FjaGUiLCJhcmciLCJ1bml0bGVzc19lc20iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImhhc2hfZXNtIiwic3RyIiwiaCIsInN0eWxpc19lc20iLCJXIiwiWCIsInRyaW0iLCJpYSIsImEiLCJiIiwiWiIsInYiLCJyZXBsYWNlIiwiRiIsIlAiLCJzdWJzdHJpbmciLCJ3IiwiTCIsImphIiwia2EiLCJhYSIsIkciLCJiYSIsImxhIiwibWEiLCJSIiwibmEiLCJlYSIsIm9hIiwiSCIsInEiLCJ4IiwiQSIsIlMiLCJCIiwiVSIsInByZWZpeCIsIkQiLCJ6IiwiTSIsInkiLCJDIiwiSyIsInUiLCJJIiwiSiIsImYiLCJOIiwiY2hhckF0IiwiY2EiLCJPIiwiZGEiLCJmYSIsIlkiLCJFIiwiaGEiLCJRIiwidXNlIiwiVCIsIkFycmF5IiwiQm9vbGVhbiIsImh5cGhlbmF0ZVJlZ2V4IiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwiaW5kZXhfZXNtX3Byb2Nlc3NTdHlsZVZhbHVlIiwiaXNOYU4iLCJjbGFzc25hbWVzIiwiYXJncyIsImxlbiIsImNscyIsInRvQWRkIiwiaXNBcnJheSIsImlzQnJvd3NlciIsImRvY3VtZW50IiwibWFrZVN0eWxlVGFnIiwib3B0cyIsInRhZyIsInNldEF0dHJpYnV0ZSIsIm5vbmNlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNvbnRhaW5lciIsImhlYWQiLCJTdHlsZVNoZWV0Iiwib3B0aW9ucyIsImlzU3BlZWR5IiwidGFncyIsImN0ciIsImluamVjdCIsImluamVjdGVkIiwic3BlZWR5IiwiaW5zZXJ0IiwicnVsZSIsInNvdXJjZU1hcCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJjc3NSdWxlcyIsIl90YWciLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfX1NFQ1JFVF9FTU9USU9OX18iLCJjdXJyZW50Iiwic3R5bGlzT3B0aW9ucyIsImluc2VydGlvblBsdWdpbiIsInN0eWxpc19ydWxlX3NoZWV0X2RlZmF1bHQiLCJjdXJyZW50U291cmNlTWFwIiwicmVnaXN0ZXJlZCIsImluc2VydGVkIiwic3R5bGlzIiwic3R5bGlzUGx1Z2lucyIsImhhbmRsZUludGVycG9sYXRpb24iLCJpbnRlcnBvbGF0aW9uIiwiY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJzZWxlY3RvciIsIm1lcmdlZFByb3BzIiwib2JqZWN0VG9TdHJpbmdDYWNoZSIsImhhcyIsImNhY2hlZCIsInN0eWxlc1dpdGhMYWJlbCIsIldlYWtNYXAiLCJsYWJlbFBhdHRlcm4iLCJjcmVhdGVTdHlsZXMiLCJzdHJpbmdzIiwic3RyaW5nTW9kZSIsImlkZW50aWZpZXJOYW1lIiwicmF3IiwiX2xlbiIsImludGVycG9sYXRpb25zIiwiX2tleSIsIm1hdGNoIiwicDEiLCJjcmVhdGVDbGFzc05hbWUiLCJzY29wZSIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiaHlkcmF0ZVNpbmdsZUlkIiwiY2h1bmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImluc2VydEJlZm9yZSIsImdldEF0dHJpYnV0ZSIsImVtb3Rpb24iLCJpZHMiLCJfbGVuMiIsIl9rZXkyIiwiYW5pbWF0aW9uIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJ3cmFwIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJpdGVyIiwidGhlbiIsInJlc3VsdCIsImRvbmUiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsIm1ldGhvZCIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwiZW50cnkiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImFmdGVyTG9jIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiaXRlcmFibGUiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW52b2tlIiwidW53cmFwcGVkIiwicmV0dXJuIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsImZvciIsImVuY29kZVVSSUNvbXBvbmVudCIsImZyYW1lc1RvUG9wIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInJlZnMiLCJ1cGRhdGVyIiwiZm9yY2VVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImN1cnJlbnREaXNwYXRjaGVyIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsImtleVByZWZpeCIsImNvdW50IiwiViIsIj0iLCI6IiwiZXNjYXBlIiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsImNvbXBhcmUiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInZlcnNpb24iLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIm9uRXJyb3IiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicWEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInJhIiwicmVnaXN0cmF0aW9uTmFtZSIsInNhIiwidGEiLCJkZXBlbmRlbmNpZXMiLCJ1YSIsInZhIiwid2EiLCJ4YSIsImN1cnJlbnRUYXJnZXQiLCJ5YSIsImNvbmNhdCIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsImRpc3BhdGNoQ29uZmlnIiwiT2EiLCJfdGFyZ2V0SW5zdCIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlZhIiwiV2EiLCJYYSIsInRyYW5zaXRpb24iLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJlYiIsImZiIiwiZ2IiLCJ0ZXh0Q29udGVudCIsImhiIiwiaWIiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImtiIiwiZXZlbnRQb29sIiwibGIiLCJkZXN0cnVjdG9yIiwiamIiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwibWIiLCJkYXRhIiwibmIiLCJvYiIsInBiIiwicWIiLCJkb2N1bWVudE1vZGUiLCJyYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwia2V5Q29kZSIsInhiIiwiZGV0YWlsIiwieWIiLCJCYiIsImxvY2FsZSIsIndoaWNoIiwiemIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJBYiIsIkNiIiwiRGIiLCJFYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIlFiIiwibm9kZU5hbWUiLCJSYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm5vZGVUeXBlIiwiU2IiLCJUYiIsIlZiIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYiIsIldiIiwiY2hlY2tlZCIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwib2MiLCJwYyIsInFjIiwicmMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidmMiLCJ3YyIsInRvVXBwZXJDYXNlIiwieGMiLCJ0YyIsInVjIiwic2MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInljIiwiemMiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJ0YWJJbmRleCIsIkZjIiwiY2hhbmdlIiwiR2MiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsImRldGFjaEV2ZW50IiwiUWMiLCJSYyIsImF0dGFjaEV2ZW50IiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiV2MiLCJ2aWV3IiwiWGMiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiWWMiLCJnZXRNb2RpZmllclN0YXRlIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsImRkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJlZCIsInBvaW50ZXJJZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImhkIiwiamQiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwibmQiLCJzaWJsaW5nIiwibWQiLCJvZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwiY2hhckNvZGUiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ0ZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ1ZCIsImxvY2F0aW9uIiwicmVwZWF0IiwidmQiLCJkYXRhVHJhbnNmZXIiLCJ3ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ4ZCIsInlkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsImlzSW50ZXJhY3RpdmUiLCJEZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkVkIiwiRmQiLCJHZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiSGQiLCJJZCIsIkpkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsImJvZHkiLCJRZCIsImZpcnN0Q2hpbGQiLCJSZCIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiVGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsImVlIiwiZGUiLCJmZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZ2UiLCJoZSIsImllIiwiamUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwia2UiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwibGUiLCJtZSIsIm5lIiwib2UiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGUiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJxZSIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwicmUiLCJzZSIsInRlIiwic2V0UHJvcGVydHkiLCJ1ZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2ZSIsIndlIiwiaXMiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiYXV0b0ZvY3VzIiwiQ2UiLCJEZSIsIkVlIiwiY2xlYXJUaW1lb3V0IiwiR2UiLCJIZSIsIlNldCIsIkllIiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIlhlIiwiZWxlbWVudFR5cGUiLCJpbmRleCIsInBlbmRpbmdQcm9wcyIsImZpcnN0Q29udGV4dERlcGVuZGVuY3kiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlllIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJmZiIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiZ2YiLCJoZiIsImxhdGVzdFBpbmdlZFRpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwiamYiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsImtmIiwibGYiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIm1mIiwibmYiLCJwYXlsb2FkIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwic3RhY2siLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwib2JzZXJ2ZWRCaXRzIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJLZiIsIkxmIiwiTWYiLCJPZiIsIlBmIiwiUWYiLCJWZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIldmIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiWGYiLCJjb250ZXh0VHlwZSIsInJlYWRDb250ZXh0IiwiWmYiLCIkZiIsImFnIiwiYmciLCJfc3RyaW5nUmVmIiwiY2ciLCJkZyIsIk1hcCIsImRlbGV0ZSIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJ5ZyIsInBlbmRpbmdDb250ZXh0IiwiemciLCJ0aW1lZE91dEF0IiwiZmFsbGJhY2siLCJBZyIsIk5mIiwiWmUiLCJlbGVtZW50IiwiaGlkZGVuIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiQmciLCJDZyIsIkdnIiwiSGciLCJJZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiSmciLCJXZWFrU2V0IiwiS2ciLCJMZyIsIk1nIiwiT2ciLCJkZXN0cm95IiwiUGciLCJRZyIsIlJnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlNnIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkZlIiwiTmciLCJ0aCIsInNoIiwiYWRkIiwiVWciLCJWZyIsIldnIiwiWGciLCJjb21wb25lbnREaWRDYXRjaCIsIllnIiwiY29tcG9uZW50U3RhY2siLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImtoIiwiY3JlYXRlRWxlbWVudE5TIiwibGgiLCJtaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIm5oIiwibWF4RHVyYXRpb24iLCJwaW5nQ2FjaGUiLCJvaCIsImZpbmlzaGVkV29yayIsInBoIiwicWgiLCJyaCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsInVuc3RhYmxlX25vdyIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiTGgiLCJ0aW1lb3V0SGFuZGxlIiwiTmgiLCJPaCIsIm5leHRTY2hlZHVsZWRSb290IiwiUGgiLCJRaCIsIlJoIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIlNoIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJkYiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJZZiIsIlZoIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJTZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJtaW4iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiRmIiLCJHYiIsIkhjIiwiaWkiLCJEZyIsIkVnIiwiamkiLCJJYyIsIkZnIiwiY2UiLCJUaCIsIlVoIiwiV2giLCJYaCIsIlloIiwiWmgiLCJhaSIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiYmkiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiY2kiLCJfaW50ZXJuYWxSb290IiwiZGkiLCJmaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsImVpIiwiZ2kiLCIkaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwia2kiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIldlIiwib3ZlcnJpZGVQcm9wcyIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJsaSIsIm1pIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicGVyZm9ybWFuY2UiLCJfc2NoZWRNb2NrIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiJCIsIlBvcHBlciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2RlZmluZVByb3BlcnR5IiwiX29iamVjdFNwcmVhZCIsIm93bktleXMiLCJmaWx0ZXIiLCJzeW0iLCJVdGlsIiwiJCQkMSIsIlRSQU5TSVRJT05fRU5EIiwidHJhbnNpdGlvbkVuZEVtdWxhdG9yIiwiZHVyYXRpb24iLCJjYWxsZWQiLCJvbmUiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsInRyYW5zaXRpb25EdXJhdGlvbiIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwicGFyc2VGbG9hdCIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInRyaWdnZXIiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb25maWciLCJjb25maWdUeXBlcyIsImV4cGVjdGVkVHlwZXMiLCJ2YWx1ZVR5cGUiLCJSZWdFeHAiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsInNwZWNpYWwiLCJiaW5kVHlwZSIsImRlbGVnYXRlVHlwZSIsImhhbmRsZU9iaiIsIkFsZXJ0IiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiRXZlbnQiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiQUxFUlQiLCJGQURFIiwiU0hPVyIsIl9lbGVtZW50IiwiY2xvc2UiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsImN1c3RvbUV2ZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwicmVtb3ZlRGF0YSIsInBhcmVudCIsImNsb3Nlc3QiLCJjbG9zZUV2ZW50IiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsIl9kZXN0cm95RWxlbWVudCIsImRldGFjaCIsInJlbW92ZSIsIl9qUXVlcnlJbnRlcmZhY2UiLCJlYWNoIiwiJGVsZW1lbnQiLCJfaGFuZGxlRGlzbWlzcyIsImFsZXJ0SW5zdGFuY2UiLCJvbiIsIm5vQ29uZmxpY3QiLCJCdXR0b24iLCJOQU1FIiwiQUNUSVZFIiwiQlVUVE9OIiwiRk9DVVMiLCJTZWxlY3RvciIsIkRBVEFfVE9HR0xFX0NBUlJPVCIsIkRBVEFfVE9HR0xFIiwiSU5QVVQiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidG9nZ2xlIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJjbGFzc0xpc3QiLCJ0b2dnbGVDbGFzcyIsIkNhcm91c2VsIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJEZWZhdWx0IiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJEZWZhdWx0VHlwZSIsIkRpcmVjdGlvbiIsIk5FWFQiLCJQUkVWIiwiTEVGVCIsIlJJR0hUIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hFTkQiLCJMT0FEX0RBVEFfQVBJIiwiQ0FST1VTRUwiLCJJVEVNIiwiQUNUSVZFX0lURU0iLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiREFUQV9TTElERSIsIkRBVEFfUklERSIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJkaXJlY3Rpb24iLCJvZmYiLCJfa2V5ZG93biIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXNHb2luZ1RvV3JhcCIsImRlbHRhIiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJzbGlkZUV2ZW50IiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJpbmRpY2F0b3JzIiwibmV4dEluZGljYXRvciIsImFkZENsYXNzIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsInNsaWRFdmVudCIsImFjdGlvbiIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIiRjYXJvdXNlbCIsIkNvbGxhcHNlIiwiU0hPV04iLCJISURFIiwiSElEREVOIiwiQ09MTEFQU0UiLCJDT0xMQVBTSU5HIiwiQ09MTEFQU0VEIiwiRGltZW5zaW9uIiwiV0lEVEgiLCJIRUlHSFQiLCJBQ1RJVkVTIiwiX2lzVHJhbnNpdGlvbmluZyIsIl90cmlnZ2VyQXJyYXkiLCJtYWtlQXJyYXkiLCJ0b2dnbGVMaXN0IiwiZWxlbSIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsIm5vdCIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJjYXBpdGFsaXplZERpbWVuc2lvbiIsInNjcm9sbFNpemUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCIkZWxlbSIsImlzVHJhbnNpdGlvbmluZyIsImhhc1dpZHRoIiwianF1ZXJ5IiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiJHRoaXMiLCIkdHJpZ2dlciIsIiR0YXJnZXQiLCJEcm9wZG93biIsIlJFR0VYUF9LRVlET1dOIiwiQVJST1dfVVBfS0VZQ09ERSIsIkNMSUNLIiwiS0VZRE9XTl9EQVRBX0FQSSIsIktFWVVQX0RBVEFfQVBJIiwiRElTQUJMRUQiLCJEUk9QVVAiLCJEUk9QUklHSFQiLCJEUk9QTEVGVCIsIk1FTlVSSUdIVCIsIk1FTlVMRUZUIiwiUE9TSVRJT05fU1RBVElDIiwiRk9STV9DSElMRCIsIk1FTlUiLCJOQVZCQVJfTkFWIiwiVklTSUJMRV9JVEVNUyIsIkF0dGFjaG1lbnRNYXAiLCJUT1AiLCJUT1BFTkQiLCJCT1RUT00iLCJCT1RUT01FTkQiLCJSSUdIVEVORCIsIkxFRlRFTkQiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwiaXNBY3RpdmUiLCJfY2xlYXJNZW51cyIsInNob3dFdmVudCIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwidXBkYXRlIiwic2NoZWR1bGVVcGRhdGUiLCJfZ2V0UGxhY2VtZW50IiwiJHBhcmVudERyb3Bkb3duIiwicGxhY2VtZW50Iiwib2Zmc2V0Q29uZiIsIm9mZnNldHMiLCJwb3BwZXJDb25maWciLCJtb2RpZmllcnMiLCJlbmFibGVkIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwidG9nZ2xlcyIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJoaWRlRXZlbnQiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiaXRlbXMiLCJNb2RhbCIsImJhY2tkcm9wIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIlNDUk9MTEJBUl9NRUFTVVJFUiIsIkJBQ0tEUk9QIiwiT1BFTiIsIkRJQUxPRyIsIkRBVEFfRElTTUlTUyIsIkZJWEVEX0NPTlRFTlQiLCJTVElDS1lfQ09OVEVOVCIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzNSIsIl90aGlzNiIsIl90aGlzNyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiX3RoaXM4IiwiYW5pbWF0ZSIsImFwcGVuZFRvIiwiYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJjYWxsYmFja1JlbW92ZSIsIl9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImlzTW9kYWxPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicmVjdCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsIl90aGlzOSIsImZpeGVkQ29udGVudCIsInN0aWNreUNvbnRlbnQiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJtYXJnaW5SaWdodCIsImNhbGN1bGF0ZWRNYXJnaW4iLCJwYWRkaW5nIiwiZWxlbWVudHMiLCJtYXJnaW4iLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJXaWR0aCIsImNsaWVudFdpZHRoIiwiX3RoaXMxMCIsIlRvb2x0aXAiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJmYWxsYmFja1BsYWNlbWVudCIsIkFVVE8iLCJIb3ZlclN0YXRlIiwiT1VUIiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIlRPT0xUSVAiLCJUT09MVElQX0lOTkVSIiwiQVJST1ciLCJUcmlnZ2VyIiwiSE9WRVIiLCJNQU5VQUwiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiaXNXaXRoQ29udGVudCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsInNldENvbnRlbnQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJhZGRBdHRhY2htZW50Q2xhc3MiLCJmaW5kIiwiYmVoYXZpb3IiLCJhcnJvdyIsIm9uQ3JlYXRlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwib25VcGRhdGUiLCJfZml4VHJhbnNpdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsIkNMQVNTX1BSRUZJWCIsInNldEVsZW1lbnRDb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsIiR0aXAiLCJ0YWJDbGFzcyIsInBvcHBlckRhdGEiLCJwb3BwZXJJbnN0YW5jZSIsInBvcHBlciIsImluaXRDb25maWdBbmltYXRpb24iLCJQb3BvdmVyIiwiVElUTEUiLCJDT05URU5UIiwiX1Rvb2x0aXAiLCJfZ2V0Q29udGVudCIsIlNjcm9sbFNweSIsIkFDVElWQVRFIiwiU0NST0xMIiwiRFJPUERPV05fSVRFTSIsIkRST1BET1dOX01FTlUiLCJEQVRBX1NQWSIsIk5BVl9MSVNUX0dST1VQIiwiTkFWX0xJTktTIiwiTkFWX0lURU1TIiwiTElTVF9JVEVNUyIsIkRST1BET1dOIiwiRFJPUERPV05fSVRFTVMiLCJEUk9QRE9XTl9UT0dHTEUiLCJPZmZzZXRNZXRob2QiLCJPRkZTRVQiLCJQT1NJVElPTiIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldHMiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIml0ZW0iLCJzb3J0IiwicGFnZVlPZmZzZXQiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJvZmZzZXRMZW5ndGgiLCJpc0FjdGl2ZVRhcmdldCIsInF1ZXJpZXMiLCIkbGluayIsIm5vZGVzIiwic2Nyb2xsU3B5cyIsInNjcm9sbFNweXNMZW5ndGgiLCIkc3B5IiwiVGFiIiwiQUNUSVZFX1VMIiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0IiwiU2Nyb2xsc3B5IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJub0dsb2JhbCIsImFyciIsImNsYXNzMnR5cGUiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJzY3JpcHQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwicHJldk9iamVjdCIsImZpcnN0IiwiZXEiLCJqIiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJpc1JlYWR5IiwibXNnIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJndWlkIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlyIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJleGVjIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRtcCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiYWRvd24iLCJidXAiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwiaGFzRm9jdXMiLCJocmVmIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJpbWFnZSIsInN1Ym1pdCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZmFpbCIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJnZXREYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsInRyIiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwiZGl2Iiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvcmlnRm4iLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJsb2FkIiwibm9CdWJibGUiLCJiZWZvcmV1bmxvYWQiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsInByZXBlbmQiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiYm94IiwiaXNCb3JkZXJCb3giLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImJvcmRlciIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImNsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJfalF1ZXJ5IiwiXyQiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ0aW1lb3V0RHVyYXRpb24iLCJkZWJvdW5jZSIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImdldFBhcmVudE5vZGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImlzSUUxMCIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZ2V0Q2xpZW50UmVjdCIsImJvdHRvbSIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIm1hcmdpbkJvdHRvbSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwicnVuTW9kaWZpZXJzIiwiZW5kcyIsImZpbmRJbmRleCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwidG9DaGVjayIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50cyIsImlzQm9keSIsImV2ZW50c0VuYWJsZWQiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJzZXRTdHlsZXMiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsImRpdmlkZXIiLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInBvc2l0aW9uRml4ZWQiLCJyZW1vdmVPbkRlc3Ryb3kiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50Iiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsImZsaXBwZWQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZmxpcFZhcmlhdGlvbnMiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsImlzVmFyaWF0aW9uIiwic2FtZVdpZHRoT2RkbmVzcyIsImJvdGhPZGRXaWR0aCIsIm5vUm91bmQiLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJzaGltIiwicHJvcE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsImdldE5hbm9TZWNvbmRzIiwiaHJ0aW1lIiwibG9hZFRpbWUiLCJtb2R1bGVMb2FkVGltZSIsIm5vZGVMb2FkVGltZSIsInVwVGltZSIsInVwdGltZSIsImdldFRpbWUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl9hZGRDbGFzcyIsIl9yZW1vdmVDbGFzcyIsImdldENsYXNzTmFtZXMiLCJyZW1vdmVDbGFzc2VzIiwiYWN0aXZlQ2xhc3NOYW1lIiwicmVmbG93QW5kQWRkQ2xhc3MiLCJkb25lQ2xhc3NOYW1lIiwiX3RoaXMkZ2V0Q2xhc3NOYW1lczciLCJfaGFzQ2xhc3MiLCJiYXNlVmFsIiwicmVwbGFjZUNsYXNzTmFtZSIsIm9yaWdDbGFzcyIsImNsYXNzVG9SZW1vdmUiLCJfYXJncyIsImhhbmRsZUVudGVyIiwiaGFuZGxlTGlmZWN5Y2xlIiwiaGFuZGxlRW50ZXJpbmciLCJfbGVuMyIsIl9rZXkzIiwiaGFuZGxlRW50ZXJlZCIsIl9sZW40IiwiX2tleTQiLCJoYW5kbGVFeGl0IiwiX2xlbjUiLCJfa2V5NSIsImhhbmRsZUV4aXRpbmciLCJfbGVuNiIsIl9rZXk2IiwiX2xlbjciLCJfa2V5NyIsIm9yaWdpbmFsQXJncyIsIl9jaGlsZCRwcm9wcyIsImluUHJvcCIsIl9SZWFjdCRDaGlsZHJlbiR0b0FyciIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImdldFByb3AiLCJuZXh0Q2hpbGRNYXBwaW5nIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJtYXBGbiIsIm1hcHBlciIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5Iiwic2ltcGxlSXNFcXVhbCIsIm5ld0FyZ3MiLCJsYXN0QXJncyIsImV2ZXJ5IiwibmV3QXJnIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIm1lbW9pemVfb25lX2VzbSIsInJlc3VsdEZuIiwiaXNFcXVhbCIsImxhc3RUaGlzIiwibGFzdFJlc3VsdCIsImNhbGxlZE9uY2UiLCJfdHlwZW9mIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwic291cmNlU3ltYm9sS2V5cyIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiYXBwbHlQcmVmaXhUb05hbWUiLCJjbGVhblZhbHVlIiwiaXNEb2N1bWVudEVsZW1lbnQiLCJnZXRTY3JvbGxUb3AiLCJhbmltYXRlZFNjcm9sbFRvIiwiaW5jcmVtZW50IiwiYW5pbWF0ZVNjcm9sbCIsInJhZl9kZWZhdWx0IiwiaXNUb3VjaENhcGFibGUiLCJjcmVhdGVFdmVudCIsImdldE1lbnVQbGFjZW1lbnQiLCJtYXhIZWlnaHQiLCJtZW51RWwiLCJtaW5IZWlnaHQiLCJzaG91bGRTY3JvbGwiLCJpc0ZpeGVkUG9zaXRpb24iLCJzcGFjaW5nIiwidGhlbWUiLCJleGNsdWRlU3RhdGljUGFyZW50Iiwib3ZlcmZsb3dSeCIsImRvY0VsIiwiZGVmYXVsdFN0YXRlIiwiX21lbnVFbCRnZXRCb3VuZGluZ0NsIiwibWVudUJvdHRvbSIsIm1lbnVIZWlnaHQiLCJtZW51VG9wIiwiY29udGFpbmVyVG9wIiwidmlld0hlaWdodCIsInZpZXdTcGFjZUFib3ZlIiwidmlld1NwYWNlQmVsb3ciLCJzY3JvbGxTcGFjZUFib3ZlIiwic2Nyb2xsU3BhY2VCZWxvdyIsInNjcm9sbERvd24iLCJzY3JvbGxVcCIsIl9jb25zdHJhaW5lZEhlaWdodCIsInNwYWNlQWJvdmUiLCJjb250cm9sSGVpZ2h0IiwiX2NvbnN0cmFpbmVkSGVpZ2h0MiIsImNvZXJjZVBsYWNlbWVudCIsIk1lbnVQbGFjZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwibWF4TWVudUhlaWdodCIsIm1pbk1lbnVIZWlnaHQiLCJtZW51UGxhY2VtZW50IiwibWVudVBvc2l0aW9uIiwibWVudVNob3VsZFNjcm9sbEludG9WaWV3IiwiZ2V0UG9ydGFsUGxhY2VtZW50IiwicmVhY3QiLCJnZXRQbGFjZW1lbnQiLCJwbGFjZXJQcm9wcyIsImdldFVwZGF0ZWRQcm9wcyIsInByb3BfdHlwZXNfZGVmYXVsdCIsIm5vdGljZUNTUyIsIl9yZWY1IiwiX3JlZjUkdGhlbWUiLCJiYXNlVW5pdCIsImNvbG9ycyIsIm5ldXRyYWw0MCIsInRleHRBbGlnbiIsIm5vT3B0aW9uc01lc3NhZ2VDU1MiLCJsb2FkaW5nTWVzc2FnZUNTUyIsInJlYWN0X3NlbGVjdF9lc21fTm9PcHRpb25zTWVzc2FnZSIsImlubmVyUHJvcHMiLCJyZWFjdF9kZWZhdWx0IiwiaW5kZXhfZXNtIiwibWVudS1ub3RpY2UiLCJtZW51LW5vdGljZS0tbm8tb3B0aW9ucyIsInJlYWN0X3NlbGVjdF9lc21fTG9hZGluZ01lc3NhZ2UiLCJtZW51LW5vdGljZS0tbG9hZGluZyIsInJlYWN0X3NlbGVjdF9lc21fTWVudVBvcnRhbCIsIl9Db21wb25lbnQyIiwiTWVudVBvcnRhbCIsIl9nZXRQcm90b3R5cGVPZjMiLCJfcmVmNyIsIl90aGlzJHByb3BzMiIsImNvbnRyb2xFbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRPYmoiLCJzY3JvbGxEaXN0YW5jZSIsIm1lbnVXcmFwcGVyIiwicmVhY3RfZG9tIiwia2V5TGlzdCIsImhhc1Byb3AiLCJleHBvcnRlZEVxdWFsIiwiZXF1YWwiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJyZWdleHBBIiwicmVnZXhwQiIsImRpYWNyaXRpY3MiLCJsZXR0ZXJzIiwic3RyaXBEaWFjcml0aWNzIiwidHJpbVN0cmluZyIsImRlZmF1bHRTdHJpbmdpZnkiLCJsYWJlbCIsInJlYWN0X3NlbGVjdF9lc21fQTExeVRleHQiLCJjbGlwIiwiYmFja2dyb3VuZENvbG9yIiwicmVhY3Rfc2VsZWN0X2VzbV9EdW1teUlucHV0IiwiRHVtbXlJbnB1dCIsImlubmVyUmVmIiwib3V0IiwiYmFja2dyb3VuZCIsIm91dGxpbmUiLCJyZWFjdF9zZWxlY3RfZXNtX05vZGVSZXNvbHZlciIsIk5vZGVSZXNvbHZlciIsIlNUWUxFX0tFWVMiLCJMT0NLX1NUWUxFUyIsInByZXZlbnRUb3VjaE1vdmUiLCJhbGxvd1RvdWNoTW92ZSIsInByZXZlbnRJbmVydGlhU2Nyb2xsIiwidG90YWxTY3JvbGwiLCJjdXJyZW50U2Nyb2xsIiwiaXNUb3VjaERldmljZSIsIm1heFRvdWNoUG9pbnRzIiwiY2FuVXNlRE9NIiwiYWN0aXZlU2Nyb2xsTG9ja3MiLCJTY3JvbGxMb2NrIiwiY2FwdHVyZSIsImFjY291bnRGb3JTY3JvbGxiYXJzIiwidG91Y2hTY3JvbGxUYXJnZXQiLCJ0YXJnZXRTdHlsZSIsIm9yaWdpbmFsU3R5bGVzIiwiY3VycmVudFBhZGRpbmciLCJhZGp1c3RlZFBhZGRpbmciLCJsaXN0ZW5lck9wdGlvbnMiLCJyZWFjdF9zZWxlY3RfZXNtX1Njcm9sbEJsb2NrIiwiX1B1cmVDb21wb25lbnQiLCJTY3JvbGxCbG9jayIsImlzRW5hYmxlZCIsImJsdXJTZWxlY3RJbnB1dCIsImdldFNjcm9sbFRhcmdldCIsInJlYWN0X3NlbGVjdF9lc21fU2Nyb2xsQ2FwdG9yIiwiU2Nyb2xsQ2FwdG9yIiwib25Cb3R0b21BcnJpdmUiLCJvbkJvdHRvbUxlYXZlIiwib25Ub3BBcnJpdmUiLCJvblRvcExlYXZlIiwiX3RoaXMkc2Nyb2xsVGFyZ2V0Iiwic2Nyb2xsVGFyZ2V0IiwiaXNEZWx0YVBvc2l0aXZlIiwiYXZhaWxhYmxlU2Nyb2xsIiwic2hvdWxkQ2FuY2VsU2Nyb2xsIiwiaXNCb3R0b20iLCJpc1RvcCIsImNhbmNlbFNjcm9sbCIsImhhbmRsZUV2ZW50RGVsdGEiLCJ0b3VjaFN0YXJ0Iiwic3RhcnRMaXN0ZW5pbmciLCJzdG9wTGlzdGVuaW5nIiwib25XaGVlbCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwicmVhY3Rfc2VsZWN0X2VzbV9TY3JvbGxDYXB0b3JTd2l0Y2giLCJTY3JvbGxDYXB0b3JTd2l0Y2giLCJpbnN0cnVjdGlvbnNBcmlhTWVzc2FnZSIsImlzU2VhcmNoYWJsZSIsImlzTXVsdGkiLCJ2YWx1ZUV2ZW50QXJpYU1lc3NhZ2UiLCJyZWFjdF9zZWxlY3RfZXNtX1ZhbHVlQ29udGFpbmVyIiwiVmFsdWVDb250YWluZXIiLCJoYXNWYWx1ZSIsInZhbHVlLWNvbnRhaW5lciIsInZhbHVlLWNvbnRhaW5lci0taXMtbXVsdGkiLCJ2YWx1ZS1jb250YWluZXItLWhhcy12YWx1ZSIsInJlYWN0X3NlbGVjdF9lc21fU3ZnIiwic2l6ZSIsInZpZXdCb3giLCJhcmlhLWhpZGRlbiIsImZvY3VzYWJsZSIsImZpbGwiLCJzdHJva2UiLCJyZWFjdF9zZWxlY3RfZXNtX0Nyb3NzSWNvbiIsInJlYWN0X3NlbGVjdF9lc21fRG93bkNoZXZyb24iLCJiYXNlQ1NTIiwiaXNGb2N1c2VkIiwiX3JlZjIkdGhlbWUiLCJuZXV0cmFsNjAiLCJuZXV0cmFsMjAiLCI6aG92ZXIiLCJuZXV0cmFsODAiLCJkcm9wZG93bkluZGljYXRvckNTUyIsImNsZWFySW5kaWNhdG9yQ1NTIiwia2V5ZnJhbWVzSW5qZWN0ZWQiLCJyZWFjdF9zZWxlY3RfZXNtX0xvYWRpbmdEb3QiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24iLCJib3JkZXJSYWRpdXMiLCJ2ZXJ0aWNhbEFsaWduIiwicmVhY3Rfc2VsZWN0X2VzbV9Mb2FkaW5nSW5kaWNhdG9yIiwiaXNSdGwiLCJpbmRpY2F0b3IiLCJsb2FkaW5nLWluZGljYXRvciIsImlzSGlkZGVuIiwicmVhY3Rfc2VsZWN0X2VzbV9NdWx0aVZhbHVlR2VuZXJpYyIsIl9yZWY0IiwicmVhY3Rfc2VsZWN0X2VzbV9NdWx0aVZhbHVlQ29udGFpbmVyIiwicmVhY3Rfc2VsZWN0X2VzbV9NdWx0aVZhbHVlTGFiZWwiLCJyZWFjdF9zZWxlY3RfZXNtX011bHRpVmFsdWVSZW1vdmUiLCJNdWx0aVZhbHVlUmVtb3ZlIiwicmVhY3Rfc2VsZWN0X2VzbV9NdWx0aVZhbHVlIiwiTXVsdGlWYWx1ZSIsImNvbXBvbmVudHMiLCJyZW1vdmVQcm9wcyIsInNlbGVjdFByb3BzIiwiQ29udGFpbmVyIiwiTGFiZWwiLCJSZW1vdmUiLCJjb250YWluZXJJbm5lclByb3BzIiwibXVsdGktdmFsdWUiLCJtdWx0aS12YWx1ZS0taXMtZGlzYWJsZWQiLCJsYWJlbElubmVyUHJvcHMiLCJtdWx0aS12YWx1ZV9fbGFiZWwiLCJyZW1vdmVJbm5lclByb3BzIiwibXVsdGktdmFsdWVfX3JlbW92ZSIsImNyb3BXaXRoRWxsaXBzaXMiLCJyZWFjdF9zZWxlY3RfZXNtX2NvbXBvbmVudHMiLCJDbGVhckluZGljYXRvciIsImNsZWFyLWluZGljYXRvciIsIm1lbnVJc09wZW4iLCJjb250cm9sIiwiY29udHJvbC0taXMtZGlzYWJsZWQiLCJjb250cm9sLS1pcy1mb2N1c2VkIiwiY29udHJvbC0tbWVudS1pcy1vcGVuIiwiRHJvcGRvd25JbmRpY2F0b3IiLCJkcm9wZG93bi1pbmRpY2F0b3IiLCJEb3duQ2hldnJvbiIsIkNyb3NzSWNvbiIsIkdyb3VwIiwiSGVhZGluZyIsImhlYWRpbmdQcm9wcyIsImdyb3VwIiwiR3JvdXBIZWFkaW5nIiwiY2xlYW5Qcm9wcyIsImdyb3VwLWhlYWRpbmciLCJJbmRpY2F0b3JzQ29udGFpbmVyIiwiSW5kaWNhdG9yU2VwYXJhdG9yIiwiaW5kaWNhdG9yLXNlcGFyYXRvciIsIklucHV0IiwiQXV0b3NpemVJbnB1dF9kZWZhdWx0IiwiTG9hZGluZ0luZGljYXRvciIsImNuIiwibWVudSIsIk1lbnVMaXN0IiwibWVudS1saXN0IiwibWVudS1saXN0LS1pcy1tdWx0aSIsIkxvYWRpbmdNZXNzYWdlIiwiTm9PcHRpb25zTWVzc2FnZSIsIk11bHRpVmFsdWVDb250YWluZXIiLCJNdWx0aVZhbHVlTGFiZWwiLCJPcHRpb24iLCJpc1NlbGVjdGVkIiwib3B0aW9uLS1pcy1kaXNhYmxlZCIsIm9wdGlvbi0taXMtZm9jdXNlZCIsIm9wdGlvbi0taXMtc2VsZWN0ZWQiLCJQbGFjZWhvbGRlciIsIlNlbGVjdENvbnRhaW5lciIsIi0taXMtZGlzYWJsZWQiLCItLWlzLXJ0bCIsIlNpbmdsZVZhbHVlIiwic2luZ2xlLXZhbHVlIiwic2luZ2xlLXZhbHVlLS1pcy1kaXNhYmxlZCIsImRlZmF1bHRDb21wb25lbnRzIiwiZGVmYXVsdFN0eWxlcyIsImNsZWFySW5kaWNhdG9yIiwicG9pbnRlckV2ZW50cyIsIl9yZWYkdGhlbWUiLCJhbGlnbkl0ZW1zIiwibmV1dHJhbDUiLCJuZXV0cmFsMCIsImJvcmRlckNvbG9yIiwibmV1dHJhbDEwIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNoYWRvdyIsImN1cnNvciIsImZsZXhXcmFwIiwianVzdGlmeUNvbnRlbnQiLCImOmhvdmVyIiwibmV1dHJhbDMwIiwiZHJvcGRvd25JbmRpY2F0b3IiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ1RvcCIsImdyb3VwSGVhZGluZyIsImluZGljYXRvcnNDb250YWluZXIiLCJhbGlnblNlbGYiLCJpbmRpY2F0b3JTZXBhcmF0b3IiLCJfcmVmMyIsIl9yZWYzJHRoZW1lIiwibG9hZGluZ0luZGljYXRvciIsIl9yZWY0JHRoZW1lIiwibG9hZGluZ01lc3NhZ2UiLCJhbGlnblRvQ29udHJvbCIsIm1lbnVHdXR0ZXIiLCJtZW51TGlzdCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwibWVudVBvcnRhbCIsIl9yZWY2IiwibXVsdGlWYWx1ZSIsIm11bHRpVmFsdWVMYWJlbCIsInRleHRPdmVyZmxvdyIsIm11bHRpVmFsdWVSZW1vdmUiLCJkYW5nZXJMaWdodCIsImRhbmdlciIsIm5vT3B0aW9uc01lc3NhZ2UiLCJwcmltYXJ5MjUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCI6YWN0aXZlIiwicHJpbWFyeTUwIiwibmV1dHJhbDUwIiwidmFsdWVDb250YWluZXIiLCJkZWZhdWx0VGhlbWUiLCJwcmltYXJ5NzUiLCJuZXV0cmFsNzAiLCJuZXV0cmFsOTAiLCJiYWNrc3BhY2VSZW1vdmVzVmFsdWUiLCJibHVySW5wdXRPblNlbGVjdCIsImNhcHR1cmVNZW51U2Nyb2xsIiwiY2xvc2VNZW51T25TZWxlY3QiLCJjbG9zZU1lbnVPblNjcm9sbCIsImNvbnRyb2xTaG91bGRSZW5kZXJWYWx1ZSIsImVzY2FwZUNsZWFyc1ZhbHVlIiwiZmlsdGVyT3B0aW9uIiwicmF3SW5wdXQiLCJfaWdub3JlQ2FzZSRpZ25vcmVBY2MiLCJpZ25vcmVDYXNlIiwiaWdub3JlQWNjZW50cyIsIm1hdGNoRnJvbSIsImNhbmRpZGF0ZSIsImZvcm1hdEdyb3VwTGFiZWwiLCJnZXRPcHRpb25MYWJlbCIsImdldE9wdGlvblZhbHVlIiwiaXNMb2FkaW5nIiwiaXNPcHRpb25EaXNhYmxlZCIsIm1lbnVTaG91bGRCbG9ja1Njcm9sbCIsImlzTW9iaWxlRGV2aWNlIiwib3Blbk1lbnVPbkZvY3VzIiwib3Blbk1lbnVPbkNsaWNrIiwicGFnZVNpemUiLCJzY3JlZW5SZWFkZXJTdGF0dXMiLCJ0YWJTZWxlY3RzVmFsdWUiLCJpbnN0YW5jZUlkIiwicmVhY3Rfc2VsZWN0X2VzbV9TZWxlY3QiLCJTZWxlY3QiLCJfcHJvcHMiLCJhcmlhTGl2ZVNlbGVjdGlvbiIsImFyaWFMaXZlQ29udGV4dCIsImZvY3VzZWRPcHRpb24iLCJmb2N1c2VkVmFsdWUiLCJpbnB1dElzSGlkZGVuIiwiaXNDb21wb3NpbmciLCJtZW51T3B0aW9ucyIsInNlbGVjdFZhbHVlIiwiY29udHJvbFJlZiIsImZvY3VzZWRPcHRpb25SZWYiLCJtZW51TGlzdFJlZiIsImNvbXBvbmVudHMkJDEiLCJmb2N1c0lucHV0IiwiYmx1cklucHV0IiwiYWN0aW9uTWV0YSIsIm9uSW5wdXRDaGFuZ2UiLCJpbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUiLCJvbk1lbnVDbG9zZSIsImNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlIiwiX3RoaXMkcHJvcHMzIiwiaXNPcHRpb25TZWxlY3RlZCIsImFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24iLCJyZW1vdmVkVmFsdWUiLCJsYXN0U2VsZWN0ZWRWYWx1ZSIsImN1c3RvbSIsImluc3RhbmNlUHJlZml4IiwiX3RoaXMkc3RhdGUiLCJibG9ja09wdGlvbkhvdmVyIiwib3Blbk1lbnUiLCJvcGVuQWZ0ZXJGb2N1cyIsIl90aGlzJHByb3BzNCIsImNsZWFyVmFsdWUiLCJIVE1MRWxlbWVudCIsInRvdWNoIiwiaW5pdGlhbFRvdWNoWCIsImluaXRpYWxUb3VjaFkiLCJ1c2VySXNEcmFnZ2luZyIsImFicyIsIm9uQ29udHJvbE1vdXNlRG93biIsIm9uQ2xlYXJJbmRpY2F0b3JNb3VzZURvd24iLCJvbkRyb3Bkb3duSW5kaWNhdG9yTW91c2VEb3duIiwiaW5wdXRWYWx1ZSIsIm9uTWVudU9wZW4iLCJfdGhpcyRwcm9wczUiLCJvbkZvY3VzIiwiYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHQiLCJvbkJsdXIiLCJfdGhpcyRwcm9wczYiLCJoaWRlU2VsZWN0ZWRPcHRpb25zIiwiX3RoaXMkcHJvcHM3IiwiaXNDbGVhcmFibGUiLCJvbktleURvd24iLCJfdGhpcyRzdGF0ZTIiLCJmb2N1c1ZhbHVlIiwicmVtb3ZlVmFsdWUiLCJwb3BWYWx1ZSIsInNlbGVjdE9wdGlvbiIsImZvY3VzT3B0aW9uIiwiY2FjaGVDb21wb25lbnRzIiwiX3NlbGVjdFZhbHVlIiwiX21lbnVPcHRpb25zIiwiYnVpbGRNZW51T3B0aW9ucyIsInN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb24iLCJzdGFydExpc3RlbmluZ1RvVG91Y2giLCJvblNjcm9sbCIsIl90aGlzJHByb3BzOCIsImdldE5leHRGb2N1c2VkVmFsdWUiLCJnZXROZXh0Rm9jdXNlZE9wdGlvbiIsImZvY3VzZWRFbCIsIm1lbnVSZWN0IiwiZm9jdXNlZFJlY3QiLCJvdmVyU2Nyb2xsIiwiX3RoaXMkcHJvcHM5Iiwic2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUiLCJvZmZzZXRUb3AiLCJzdG9wTGlzdGVuaW5nQ29tcG9zaXRpb24iLCJzdG9wTGlzdGVuaW5nVG9Ub3VjaCIsIl90aGlzJHByb3BzMTAiLCJfdGhpcyRzdGF0ZTMiLCJvcGVuQXRJbmRleCIsIl90aGlzJHByb3BzMTEiLCJfdGhpcyRzdGF0ZTQiLCJmb2N1c2VkSW5kZXgiLCJsYXN0SW5kZXgiLCJuZXh0Rm9jdXMiLCJfdGhpcyRzdGF0ZTUiLCJjbGFzc05hbWVQcmVmaXgiLCJjc3NLZXkiLCJnZXRUaGVtZSIsIm5leHRTZWxlY3RWYWx1ZSIsIl90aGlzJHN0YXRlNiIsImxhc3RGb2N1c2VkSW5kZXgiLCJsYXN0Rm9jdXNlZE9wdGlvbiIsIl90aGlzJHByb3BzMTIiLCJmb3JtYXRPcHRpb25MYWJlbCIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJvblRvdWNoRW5kIiwiX3Byb3BzJGlucHV0VmFsdWUiLCJ0b09wdGlvbiIsInNob3VsZEhpZGVTZWxlY3RlZE9wdGlvbnMiLCJvbkhvdmVyIiwib25PcHRpb25Ib3ZlciIsIm9wdGlvbklkIiwiZ2V0RWxlbWVudElkIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlT3ZlciIsImFjYyIsImhhc0dyb3VwcyIsImdyb3VwSWQiLCJfdGhpcyRzdGF0ZTciLCJfdGhpcyRwcm9wczEzIiwiZm9jdXNlZFZhbHVlTXNnIiwidmFsdWVGb2N1c0FyaWFNZXNzYWdlIiwiZm9jdXNlZE9wdGlvbk1zZyIsIm9wdGlvbkZvY3VzQXJpYU1lc3NhZ2UiLCJyZXN1bHRzTXNnIiwic2NyZWVuUmVhZGVyTWVzc2FnZSIsInJlc3VsdHNBcmlhTWVzc2FnZSIsImNvdW50T3B0aW9ucyIsIl90aGlzJHByb3BzMTQiLCJnZXRJbnB1dFJlZiIsIm9uSW5wdXRCbHVyIiwib25JbnB1dEZvY3VzIiwicmVhZE9ubHkiLCJhcmlhQXR0cmlidXRlcyIsImFyaWEtYXV0b2NvbXBsZXRlIiwiYXJpYS1sYWJlbCIsImFyaWEtbGFiZWxsZWRieSIsIl90aGlzJGNvbW1vblByb3BzIiwiY29tbW9uUHJvcHMiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db21wbGV0ZSIsImF1dG9Db3JyZWN0IiwiaGFuZGxlSW5wdXRDaGFuZ2UiLCJzcGVsbENoZWNrIiwiX3RoaXMkY29tcG9uZW50cyIsIl90aGlzJHByb3BzMTUiLCJfdGhpcyRzdGF0ZTgiLCJvbk1vdXNlRG93biIsIl90aGlzJHByb3BzMTYiLCJvbkNsZWFySW5kaWNhdG9yVG91Y2hFbmQiLCJfdGhpcyRwcm9wczE3IiwiX3RoaXMkY29tcG9uZW50czIiLCJvbkRyb3Bkb3duSW5kaWNhdG9yVG91Y2hFbmQiLCJfdGhpcyRjb21wb25lbnRzMyIsIk1lbnUkJDEiLCJNZW51TGlzdCQkMSIsIk1lbnVQb3J0YWwkJDEiLCJMb2FkaW5nTWVzc2FnZSQkMSIsIk5vT3B0aW9uc01lc3NhZ2UkJDEiLCJfdGhpcyRzdGF0ZTkiLCJfdGhpcyRwcm9wczE4IiwibWVudVBvcnRhbFRhcmdldCIsIm9uTWVudVNjcm9sbFRvVG9wIiwib25NZW51U2Nyb2xsVG9Cb3R0b20iLCJtZW51VUkiLCJnZXRGb2N1c2VkT3B0aW9uUmVmIiwiaGFzT3B0aW9ucyIsImhlYWRpbmdJZCIsIl9tZXNzYWdlIiwibWVudVBsYWNlbWVudFByb3BzIiwibWVudUVsZW1lbnQiLCJfcmVmNiRwbGFjZXJQcm9wcyIsIm9uTWVudU1vdXNlRG93biIsIm9uTWVudU1vdXNlTW92ZSIsImdldE1lbnVMaXN0UmVmIiwiX3RoaXMkcHJvcHMxOSIsIl92YWx1ZSIsImFyaWEtbGl2ZSIsImNvbnN0cnVjdEFyaWFMaXZlTWVzc2FnZSIsIl90aGlzJGNvbXBvbmVudHM0IiwiX3RoaXMkcHJvcHMyMCIsImdldENvbW1vblByb3BzIiwicmVuZGVyTGl2ZVJlZ2lvbiIsImdldENvbnRyb2xSZWYiLCJvbkNvbnRyb2xUb3VjaEVuZCIsInJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZSIsInJlbmRlcklucHV0IiwicmVuZGVyQ2xlYXJJbmRpY2F0b3IiLCJyZW5kZXJMb2FkaW5nSW5kaWNhdG9yIiwicmVuZGVySW5kaWNhdG9yU2VwYXJhdG9yIiwicmVuZGVyRHJvcGRvd25JbmRpY2F0b3IiLCJyZW5kZXJNZW51IiwicmVuZGVyRm9ybUZpZWxkIiwiZGVmYXVsdFByb3BzJDEiLCJkZWZhdWx0SW5wdXRWYWx1ZSIsImRlZmF1bHRNZW51SXNPcGVuIiwicmVhY3Rfc2VsZWN0X2VzbV9tYW5hZ2VTdGF0ZSIsIlNlbGVjdENvbXBvbmVudCIsIl9jbGFzcyIsIl90ZW1wIiwiU3RhdGVNYW5hZ2VyIiwiY2FsbFByb3AiLCJkZWZhdWx0UHJvcHMkMiIsImNhY2hlT3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwicmVhY3Rfc2VsZWN0X2VzbV9tYWtlQXN5bmNTZWxlY3QiLCJBc3luYyIsImxhc3RSZXF1ZXN0IiwibG9hZGVkSW5wdXRWYWx1ZSIsImxvYWRlZE9wdGlvbnMiLCJwYXNzRW1wdHlPcHRpb25zIiwib3B0aW9uc0NhY2hlIiwicmVxdWVzdCIsImxvYWRPcHRpb25zIiwibG9hZGVyIiwiY29tcGFyZU9wdGlvbiIsIm9wdGlvblZhbHVlIiwib3B0aW9uTGFiZWwiLCJkZWZhdWx0UHJvcHMkMyIsImFsbG93Q3JlYXRlV2hpbGVMb2FkaW5nIiwiY3JlYXRlT3B0aW9uUG9zaXRpb24iLCJmb3JtYXRDcmVhdGVMYWJlbCIsImlzVmFsaWROZXdPcHRpb24iLCJzZWxlY3RPcHRpb25zIiwiZ2V0TmV3T3B0aW9uRGF0YSIsIl9faXNOZXdfXyIsInJlYWN0X3NlbGVjdF9lc21fbWFrZUNyZWF0YWJsZVNlbGVjdCIsIkNyZWF0YWJsZSIsIm9uQ3JlYXRlT3B0aW9uIiwibmV3T3B0aW9uIiwidmFsdWVBcnJheSIsIm5ld09wdGlvbkRhdGEiLCJuZXdBY3Rpb25NZXRhIiwicmVhY3Rfc2VsZWN0X2VzbV9GYWRlIiwiVGFnIiwiX3JlZiRkdXJhdGlvbiIsImVudGVyaW5nIiwiZW50ZXJlZCIsImV4aXRpbmciLCJleGl0ZWQiLCJyZWFjdF90cmFuc2l0aW9uX2dyb3VwIiwiY29sbGFwc2VEdXJhdGlvbiIsInJlYWN0X3NlbGVjdF9lc21fQ29sbGFwc2UiLCJyYWZJRCIsImdldFN0eWxlIiwiZ2V0VHJhbnNpdGlvbiIsImdldFdpZHRoIiwicmVhY3Rfc2VsZWN0X2VzbV9BbmltYXRlZE11bHRpVmFsdWUiLCJXcmFwcGVkQ29tcG9uZW50IiwicmVhY3Rfc2VsZWN0X2VzbV9BbmltYXRlZFBsYWNlaG9sZGVyIiwicmVhY3Rfc2VsZWN0X2VzbV9BbmltYXRlZFNpbmdsZVZhbHVlIiwicmVhY3Rfc2VsZWN0X2VzbV9BbmltYXRlZFZhbHVlQ29udGFpbmVyIiwibWFrZUFuaW1hdGVkIiwiZXh0ZXJuYWxDb21wb25lbnRzIiwicmVzdCIsIkFuaW1hdGVkQ29tcG9uZW50cyIsInJlYWN0X3NlbGVjdF9lc20iLCJoYW5kbGVDaGFuZ2UiLCJJbnB1dENvbnRhaW5lciIsInNldFZhbHVlSW5wdXQiLCJwcmVzZW50YXRpb25hbF9JbnB1dF9JbnB1dCIsIlRhYmxlIiwibGlzdFRhc2tzIiwiY3VycmVudE1lbnRvciIsInN0dWRlbnRzIiwidGFzayIsImluZCIsInN0dWRlbnQiLCJhcnJTdGF0dXNUYXNrcyIsIm1lbnRvciIsIm1lbnRvckdpdGh1YiIsIkFwcCIsIkFwcF9jbGFzc0NhbGxDaGVjayIsIkFwcF9nZXRQcm90b3R5cGVPZiIsIkFwcF9kZWZpbmVQcm9wZXJ0eSIsIkFwcF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9jYWxsZWUiLCJwYXJhbVN0YXRlIiwiYXJyTWVudG9ycyIsImFyclRhc2siLCJhcnJEYXRhTWVudG9ycyIsImFyclBhcmFtcyIsImZldGNoIiwiaW5mb1N0dWRlbnRzIiwiYXJyTmFtZVRhc2tzIiwiYXJyTGlua1Rhc2tzIiwiaW5keCIsIl94Iiwic2V0Q3VycmVudE1lbnRvciIsInNldExvY2FsZVN0b3JhZGdlIiwiZGF0YU1lbnRvcnMiLCJsb2NhbFN0b3JhZ2UiLCJsaXN0TWVudG9ycyIsIm1lbnRvckZyb21Mb2NhbGVTdG9yYWRnZSIsImdldExvY2FsZVN0b3JhZGdlIiwiY29udGFpbmVyX0lucHV0Q29udGFpbmVyIiwicHJlc2VudGF0aW9uYWxfVGFibGVfVGFibGUiLCJSZWFjdERPTSIsInNyY19jb21wb25lbnRzX0FwcCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElB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QUEsb0JBa0VNLFNBQUExRixHQUFHLE9BQUlzdEgsYUFBYXR0SCxLQS9EdEMwRixFQUFLVyxNQUFRLENBQ1hrbkgsWUFBYSxHQUNiL0IsVUFBVyxHQUNYNkIsWUFBYSxHQUNiNUIsY0FBZSxJQVBML2xILHlQQURFdUUscU5BYVJuSSxLQUFLeXhFLFFBQVEsQ0FBQyxjQUFlLFlBQWEsd0JBRTFDaTZDLEVBQTJCMXJILEtBQUsyckgsa0JBQWtCLFlBRXREM3JILEtBQUtxckgsaUJBQWlCSyxzSUFvRGpCLElBQUFwUSxFQUdIdDdHLEtBQUt1RSxNQURQa25ILEVBRktuUSxFQUVMbVEsWUFBYS9CLEVBRlJwTyxFQUVRb08sVUFBV0MsRUFGbkJyTyxFQUVtQnFPLGNBRzFCLE9BQ0U1aEIsRUFBQTl3RixFQUFBM0wsY0FBQ3k3RixFQUFBLFNBQUQsS0FDRWdCLEVBQUE5d0YsRUFBQTNMLGNBQUNzZ0gsR0FBRCxDQUNFckMsY0FBZXZwSCxLQUFLdXBILGNBQ3BCenRHLFFBQVMydkcsSUFFWDFqQixFQUFBOXdGLEVBQUEzTCxjQUFDdWdILEdBQUQsQ0FBT25DLFVBQVdBLEVBQVdDLGNBQWVBLDRDQy9FcERtQyxJQUFTdmtILE9BQU93Z0csRUFBQTl3RixFQUFBM0wsY0FBQ3lnSCxHQUFELE1BQVM1d0csU0FBUzRtQixLQUFLdG1CLFlBQVlOLFNBQVM3UCxjQUFjIiwiZmlsZSI6ImluZGV4X2J1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBjcmVhdGVFbW90aW9uIGZyb20gJ2NyZWF0ZS1lbW90aW9uJztcblxudmFyIGNvbnRleHQgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG52YXIgX2NyZWF0ZUVtb3Rpb24gPSBjcmVhdGVFbW90aW9uKGNvbnRleHQpLFxuICAgIGZsdXNoID0gX2NyZWF0ZUVtb3Rpb24uZmx1c2gsXG4gICAgaHlkcmF0ZSA9IF9jcmVhdGVFbW90aW9uLmh5ZHJhdGUsXG4gICAgY3ggPSBfY3JlYXRlRW1vdGlvbi5jeCxcbiAgICBtZXJnZSA9IF9jcmVhdGVFbW90aW9uLm1lcmdlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXMgPSBfY3JlYXRlRW1vdGlvbi5nZXRSZWdpc3RlcmVkU3R5bGVzLFxuICAgIGluamVjdEdsb2JhbCA9IF9jcmVhdGVFbW90aW9uLmluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXMgPSBfY3JlYXRlRW1vdGlvbi5rZXlmcmFtZXMsXG4gICAgY3NzID0gX2NyZWF0ZUVtb3Rpb24uY3NzLFxuICAgIHNoZWV0ID0gX2NyZWF0ZUVtb3Rpb24uc2hlZXQsXG4gICAgY2FjaGVzID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGVzO1xuXG5leHBvcnQgeyBmbHVzaCwgaHlkcmF0ZSwgY3gsIG1lcmdlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbmplY3RHbG9iYWwsIGtleWZyYW1lcywgY3NzLCBzaGVldCwgY2FjaGVzIH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9DU1NUcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DU1NUcmFuc2l0aW9uXCIpKTtcblxudmFyIF9SZXBsYWNlVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmVwbGFjZVRyYW5zaXRpb25cIikpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHJhbnNpdGlvbkdyb3VwXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UcmFuc2l0aW9uXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRyYW5zaXRpb246IF9UcmFuc2l0aW9uLmRlZmF1bHQsXG4gIFRyYW5zaXRpb25Hcm91cDogX1RyYW5zaXRpb25Hcm91cC5kZWZhdWx0LFxuICBSZXBsYWNlVHJhbnNpdGlvbjogX1JlcGxhY2VUcmFuc2l0aW9uLmRlZmF1bHQsXG4gIENTU1RyYW5zaXRpb246IF9DU1NUcmFuc2l0aW9uLmRlZmF1bHRcbn07IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZSBjb21wb25lbnRzLlxuICogSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3IgZXhhbXBsZSB3ZSBjYW5cbiAqIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMCB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHsoc3RhdGUpID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBBcyBub3RlZCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2Vzbid0IF9kb18gYW55dGhpbmcgYnkgaXRzZWxmIHRvIGl0cyBjaGlsZCBjb21wb25lbnQuXG4gKiBXaGF0IGl0IGRvZXMgZG8gaXMgdHJhY2sgdHJhbnNpdGlvbiBzdGF0ZXMgb3ZlciB0aW1lIHNvIHlvdSBjYW4gdXBkYXRlIHRoZVxuICogY29tcG9uZW50IChzdWNoIGFzIGJ5IGFkZGluZyBzdHlsZXMgb3IgY2xhc3Nlcykgd2hlbiBpdCBjaGFuZ2VzIHN0YXRlcy5cbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnQgYmVnaW5zIHRoZVxuICogXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb20gaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSxcbiAqIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlXG4gKiBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc3hcbiAqIHN0YXRlID0geyBpbjogZmFsc2UgfTtcbiAqXG4gKiB0b2dnbGVFbnRlclN0YXRlID0gKCkgPT4ge1xuICogICB0aGlzLnNldFN0YXRlKHsgaW46IHRydWUgfSk7XG4gKiB9XG4gKlxuICogcmVuZGVyKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17NTAwfSAvPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVudGVyU3RhdGV9PkNsaWNrIHRvIEVudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZSBhbmRcbiAqIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlcyB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbSBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICpcbiAqICMjIFRpbWluZ1xuICpcbiAqIFRpbWluZyBpcyBvZnRlbiB0aGUgdHJpY2tpZXN0IHBhcnQgb2YgYW5pbWF0aW9uLCBtaXN0YWtlcyBjYW4gcmVzdWx0IGluIHNsaWdodCBkZWxheXNcbiAqIHRoYXQgYXJlIGhhcmQgdG8gcGluIGRvd24uIEEgY29tbW9uIGV4YW1wbGUgaXMgd2hlbiB5b3Ugd2FudCB0byBhZGQgYW4gZXhpdCB0cmFuc2l0aW9uLFxuICogeW91IHNob3VsZCBzZXQgdGhlIGRlc2lyZWQgZmluYWwgc3R5bGVzIHdoZW4gdGhlIHN0YXRlIGlzIGAnZXhpdGluZydgLiBUaGF0J3Mgd2hlbiB0aGVcbiAqIHRyYW5zaXRpb24gdG8gdGhvc2Ugc3R5bGVzIHdpbGwgc3RhcnQgYW5kLCBpZiB5b3UgbWF0Y2hlZCB0aGUgYHRpbWVvdXRgIHByb3Agd2l0aCB0aGVcbiAqIENTUyBUcmFuc2l0aW9uIGR1cmF0aW9uLCBpdCB3aWxsIGVuZCBleGFjdGx5IHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiA+ICoqTm90ZSoqOiBGb3Igc2ltcGxlciB0cmFuc2l0aW9ucyB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBtaWdodCBiZSBlbm91Z2gsIGJ1dFxuICogPiB0YWtlIGludG8gYWNjb3VudCB0aGF0IGl0J3MgcGxhdGZvcm0tYWdub3N0aWMsIHdoaWxlIHRoZSBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiA+IFtmb3JjZXMgcmVmbG93c10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzUwMDczMDNlNzI5YTc0YmU2NmEyMWMzZTIyMDVlNDkxNjgyMTUyNGIvc3JjL0NTU1RyYW5zaXRpb24uanMjTDIwOC1MMjE1KVxuICogPiBpbiBvcmRlciB0byBtYWtlIG1vcmUgY29tcGxleCB0cmFuc2l0aW9ucyBtb3JlIHByZWRpY3RhYmxlLiBGb3IgZXhhbXBsZSwgZXZlbiB0aG91Z2hcbiAqID4gY2xhc3NlcyBgZXhhbXBsZS1lbnRlcmAgYW5kIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgb25lIGFmdGVyXG4gKiA+IGFub3RoZXIsIHlvdSBjYW4gc3RpbGwgdHJhbnNpdGlvbiBmcm9tIG9uZSB0byB0aGUgb3RoZXIgYmVjYXVzZSBvZiB0aGUgZm9yY2VkIHJlZmxvd1xuICogPiAocmVhZCBbdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pc3N1ZXMvMTU5I2lzc3VlY29tbWVudC0zMjI3NjExNzEpXG4gKiA+IGZvciBtb3JlIGluZm8pLiBUYWtlIHRoaXMgaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgYmV0d2VlbiBgVHJhbnNpdGlvbmAgYW5kXG4gKiA+IGBDU1NUcmFuc2l0aW9uYC5cbiAqL1xuXG5leHBvcnRzLkVYSVRJTkcgPSBFWElUSU5HO1xuXG52YXIgVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dC50cmFuc2l0aW9uR3JvdXA7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiBudWxsIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG5cbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9OyAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cblxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjtcbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpOyAvLyBGSVhNRTogYXBwZWFyIHRpbWVvdXQ/XG5cblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5lbnRlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzXG4gICAqICgnZW50ZXJpbmcnLCAnZW50ZXJlZCcsICdleGl0aW5nJywgJ2V4aXRlZCcsICd1bm1vdW50ZWQnKSwgd2hpY2ggY2FuIGJlIHVzZWRcbiAgICogdG8gYXBwbHkgY29udGV4dCBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIHRpbWVvdXQ9ezE1MH0+XG4gICAqICAgeyhzdGF0dXMpID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0dXN9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMgbGlrZTogYHRpbWVvdXQ9ezUwMH1gLFxuICAgKiBvciBpbmRpdmlkdWFsbHkgbGlrZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZSA6IHt9OztcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdGltZW91dHNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pIDogbnVsbDtcbmV4cG9ydHMudGltZW91dHNTaGFwZSA9IHRpbWVvdXRzU2hhcGU7XG52YXIgY2xhc3NOYW1lc1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSkgOiBudWxsO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBjbGFzc05hbWVzU2hhcGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IHJlcXVpcmUoXCIuL3V0aWxzL0NoaWxkTWFwcGluZ1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IHtcbiAgICAgICAgaXNNb3VudGluZzogIXRoaXMuYXBwZWFyZWRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYXBwZWFyZWQgPSB0cnVlO1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/ICgwLCBfQ2hpbGRNYXBwaW5nLmdldEluaXRpYWxDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6ICgwLCBfQ2hpbGRNYXBwaW5nLmdldE5leHRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbkdyb3VwKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG5cdFx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdFx0Ly8gcHJvcGVydHlcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdC8vIEBpbXBvcnRcblx0XHRcdFx0XHRpZiAoZGVwdGggPT09IDAgJiYgY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NClcblx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKGNvbnRlbnQrJzsnKSwgJydcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBzZWxlY3RvclxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKG5zID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXJcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBhdC1ydWxlXG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRzd2l0Y2ggKG5zKSB7XG5cdFx0XHRcdFx0XHQvLyBAZm9udC1mYWNlLCBAcGFnZVxuXHRcdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRjYXNlIDExMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdK2NvbnRlbnQpLCAnJ1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyAoYXQgPT09IDAgPyBkZWxpbWl0ZXIgOiAnJylcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgLTI6XG5cdFx0XHRcdFx0Y29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldClcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pKVxuIiwidmFyIG5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpXG4gICwgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93XG4gICwgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG4gICwgc3VmZml4ID0gJ0FuaW1hdGlvbkZyYW1lJ1xuICAsIHJhZiA9IHJvb3RbJ3JlcXVlc3QnICsgc3VmZml4XVxuICAsIGNhZiA9IHJvb3RbJ2NhbmNlbCcgKyBzdWZmaXhdIHx8IHJvb3RbJ2NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxuXG5mb3IodmFyIGkgPSAwOyAhcmFmICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gIHJhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdSZXF1ZXN0JyArIHN1ZmZpeF1cbiAgY2FmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbCcgKyBzdWZmaXhdXG4gICAgICB8fCByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG59XG5cbi8vIFNvbWUgdmVyc2lvbnMgb2YgRkYgaGF2ZSByQUYgYnV0IG5vdCBjQUZcbmlmKCFyYWYgfHwgIWNhZikge1xuICB2YXIgbGFzdCA9IDBcbiAgICAsIGlkID0gMFxuICAgICwgcXVldWUgPSBbXVxuICAgICwgZnJhbWVEdXJhdGlvbiA9IDEwMDAgLyA2MFxuXG4gIHJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgX25vdyA9IG5vdygpXG4gICAgICAgICwgbmV4dCA9IE1hdGgubWF4KDAsIGZyYW1lRHVyYXRpb24gLSAoX25vdyAtIGxhc3QpKVxuICAgICAgbGFzdCA9IG5leHQgKyBfbm93XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3AgPSBxdWV1ZS5zbGljZSgwKVxuICAgICAgICAvLyBDbGVhciBxdWV1ZSBoZXJlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gY2FsbGJhY2tzIGZyb20gYXBwZW5kaW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBmcmFtZSdzIHF1ZXVlXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDBcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYoIWNwW2ldLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICBjcFtpXS5jYWxsYmFjayhsYXN0KVxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE1hdGgucm91bmQobmV4dCkpXG4gICAgfVxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaGFuZGxlOiArK2lkLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgY2FuY2VsbGVkOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBjYWYgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmKHF1ZXVlW2ldLmhhbmRsZSA9PT0gaGFuZGxlKSB7XG4gICAgICAgIHF1ZXVlW2ldLmNhbmNlbGxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAvLyBXcmFwIGluIGEgbmV3IGZ1bmN0aW9uIHRvIHByZXZlbnRcbiAgLy8gYGNhbmNlbGAgcG90ZW50aWFsbHkgYmVpbmcgYXNzaWduZWRcbiAgLy8gdG8gdGhlIG5hdGl2ZSByQUYgZnVuY3Rpb25cbiAgcmV0dXJuIHJhZi5jYWxsKHJvb3QsIGZuKVxufVxubW9kdWxlLmV4cG9ydHMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIGNhZi5hcHBseShyb290LCBhcmd1bWVudHMpXG59XG5tb2R1bGUuZXhwb3J0cy5wb2x5ZmlsbCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIG9iamVjdCA9IHJvb3Q7XG4gIH1cbiAgb2JqZWN0LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJhZlxuICBvYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYWZcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBzaXplclN0eWxlID0ge1xuXHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0dG9wOiAwLFxuXHRsZWZ0OiAwLFxuXHR2aXNpYmlsaXR5OiAnaGlkZGVuJyxcblx0aGVpZ2h0OiAwLFxuXHRvdmVyZmxvdzogJ3Njcm9sbCcsXG5cdHdoaXRlU3BhY2U6ICdwcmUnXG59O1xuXG52YXIgSU5QVVRfUFJPUFNfQkxBQ0tMSVNUID0gWydleHRyYVdpZHRoJywgJ2luamVjdFN0eWxlcycsICdpbnB1dENsYXNzTmFtZScsICdpbnB1dFJlZicsICdpbnB1dFN0eWxlJywgJ21pbldpZHRoJywgJ29uQXV0b3NpemUnLCAncGxhY2Vob2xkZXJJc01pbldpZHRoJ107XG5cbnZhciBjbGVhbklucHV0UHJvcHMgPSBmdW5jdGlvbiBjbGVhbklucHV0UHJvcHMoaW5wdXRQcm9wcykge1xuXHRJTlBVVF9QUk9QU19CTEFDS0xJU1QuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcblx0XHRyZXR1cm4gZGVsZXRlIGlucHV0UHJvcHNbZmllbGRdO1xuXHR9KTtcblx0cmV0dXJuIGlucHV0UHJvcHM7XG59O1xuXG52YXIgY29weVN0eWxlcyA9IGZ1bmN0aW9uIGNvcHlTdHlsZXMoc3R5bGVzLCBub2RlKSB7XG5cdG5vZGUuc3R5bGUuZm9udFNpemUgPSBzdHlsZXMuZm9udFNpemU7XG5cdG5vZGUuc3R5bGUuZm9udEZhbWlseSA9IHN0eWxlcy5mb250RmFtaWx5O1xuXHRub2RlLnN0eWxlLmZvbnRXZWlnaHQgPSBzdHlsZXMuZm9udFdlaWdodDtcblx0bm9kZS5zdHlsZS5mb250U3R5bGUgPSBzdHlsZXMuZm9udFN0eWxlO1xuXHRub2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBzdHlsZXMubGV0dGVyU3BhY2luZztcblx0bm9kZS5zdHlsZS50ZXh0VHJhbnNmb3JtID0gc3R5bGVzLnRleHRUcmFuc2Zvcm07XG59O1xuXG52YXIgaXNJRSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IgPyAvTVNJRSB8VHJpZGVudFxcL3xFZGdlXFwvLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSA6IGZhbHNlO1xuXG52YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGdlbmVyYXRlSWQoKSB7XG5cdC8vIHdlIG9ubHkgbmVlZCBhbiBhdXRvLWdlbmVyYXRlZCBJRCBmb3Igc3R5bGVzaGVldCBpbmplY3Rpb24sIHdoaWNoIGlzIG9ubHlcblx0Ly8gdXNlZCBmb3IgSUUuIHNvIGlmIHRoZSBicm93c2VyIGlzIG5vdCBJRSwgdGhpcyBzaG91bGQgcmV0dXJuIHVuZGVmaW5lZC5cblx0cmV0dXJuIGlzSUUgPyAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTIpIDogdW5kZWZpbmVkO1xufTtcblxudmFyIEF1dG9zaXplSW5wdXQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHRfaW5oZXJpdHMoQXV0b3NpemVJbnB1dCwgX0NvbXBvbmVudCk7XG5cblx0ZnVuY3Rpb24gQXV0b3NpemVJbnB1dChwcm9wcykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdXRvc2l6ZUlucHV0KTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBdXRvc2l6ZUlucHV0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXV0b3NpemVJbnB1dCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuXHRcdF90aGlzLmlucHV0UmVmID0gZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRfdGhpcy5pbnB1dCA9IGVsO1xuXHRcdFx0aWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5pbnB1dFJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRfdGhpcy5wcm9wcy5pbnB1dFJlZihlbCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdF90aGlzLnBsYWNlSG9sZGVyU2l6ZXJSZWYgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdF90aGlzLnBsYWNlSG9sZGVyU2l6ZXIgPSBlbDtcblx0XHR9O1xuXG5cdFx0X3RoaXMuc2l6ZXJSZWYgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdF90aGlzLnNpemVyID0gZWw7XG5cdFx0fTtcblxuXHRcdF90aGlzLnN0YXRlID0ge1xuXHRcdFx0aW5wdXRXaWR0aDogcHJvcHMubWluV2lkdGgsXG5cdFx0XHRpbnB1dElkOiBwcm9wcy5pZCB8fCBnZW5lcmF0ZUlkKClcblx0XHR9O1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhBdXRvc2l6ZUlucHV0LCBbe1xuXHRcdGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0XHR0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5jb3B5SW5wdXRTdHlsZXMoKTtcblx0XHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHRcdFx0dmFyIGlkID0gbmV4dFByb3BzLmlkO1xuXG5cdFx0XHRpZiAoaWQgIT09IHRoaXMucHJvcHMuaWQpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7IGlucHV0SWQ6IGlkIHx8IGdlbmVyYXRlSWQoKSB9KTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHRcdGlmIChwcmV2U3RhdGUuaW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkF1dG9zaXplID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5vbkF1dG9zaXplKHRoaXMuc3RhdGUuaW5wdXRXaWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0XHR0aGlzLm1vdW50ZWQgPSBmYWxzZTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjb3B5SW5wdXRTdHlsZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb3B5SW5wdXRTdHlsZXMoKSB7XG5cdFx0XHRpZiAoIXRoaXMubW91bnRlZCB8fCAhd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGlucHV0U3R5bGVzID0gdGhpcy5pbnB1dCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmlucHV0KTtcblx0XHRcdGlmICghaW5wdXRTdHlsZXMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29weVN0eWxlcyhpbnB1dFN0eWxlcywgdGhpcy5zaXplcik7XG5cdFx0XHRpZiAodGhpcy5wbGFjZUhvbGRlclNpemVyKSB7XG5cdFx0XHRcdGNvcHlTdHlsZXMoaW5wdXRTdHlsZXMsIHRoaXMucGxhY2VIb2xkZXJTaXplcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAndXBkYXRlSW5wdXRXaWR0aCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0XHRpZiAoIXRoaXMubW91bnRlZCB8fCAhdGhpcy5zaXplciB8fCB0eXBlb2YgdGhpcy5zaXplci5zY3JvbGxXaWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIG5ld0lucHV0V2lkdGggPSB2b2lkIDA7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAoIXRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnBsYWNlaG9sZGVySXNNaW5XaWR0aCkpIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IE1hdGgubWF4KHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGgsIHRoaXMucGxhY2VIb2xkZXJTaXplci5zY3JvbGxXaWR0aCkgKyAyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGggKyAyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gYWRkIGV4dHJhV2lkdGggdG8gdGhlIGRldGVjdGVkIHdpZHRoLiBmb3IgbnVtYmVyIHR5cGVzLCB0aGlzIGRlZmF1bHRzIHRvIDE2IHRvIGFsbG93IGZvciB0aGUgc3RlcHBlciBVSVxuXHRcdFx0dmFyIGV4dHJhV2lkdGggPSB0aGlzLnByb3BzLnR5cGUgPT09ICdudW1iZXInICYmIHRoaXMucHJvcHMuZXh0cmFXaWR0aCA9PT0gdW5kZWZpbmVkID8gMTYgOiBwYXJzZUludCh0aGlzLnByb3BzLmV4dHJhV2lkdGgpIHx8IDA7XG5cdFx0XHRuZXdJbnB1dFdpZHRoICs9IGV4dHJhV2lkdGg7XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcblx0XHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMucHJvcHMubWluV2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3SW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGlucHV0V2lkdGg6IG5ld0lucHV0V2lkdGhcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0SW5wdXQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRJbnB1dCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmlucHV0O1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2ZvY3VzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0XHR0aGlzLmlucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYmx1cicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG5cdFx0XHR0aGlzLmlucHV0LmJsdXIoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZWxlY3QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZWxlY3QoKSB7XG5cdFx0XHR0aGlzLmlucHV0LnNlbGVjdCgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3JlbmRlclN0eWxlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJlbmRlclN0eWxlcygpIHtcblx0XHRcdC8vIHRoaXMgbWV0aG9kIGluamVjdHMgc3R5bGVzIHRvIGhpZGUgSUUncyBjbGVhciBpbmRpY2F0b3IsIHdoaWNoIG1lc3Nlc1xuXHRcdFx0Ly8gd2l0aCBpbnB1dCBzaXplIGRldGVjdGlvbi4gdGhlIHN0eWxlc2hlZXQgaXMgb25seSBpbmplY3RlZCB3aGVuIHRoZVxuXHRcdFx0Ly8gYnJvd3NlciBpcyBJRSwgYW5kIGNhbiBhbHNvIGJlIGRpc2FibGVkIGJ5IHRoZSBgaW5qZWN0U3R5bGVzYCBwcm9wLlxuXHRcdFx0dmFyIGluamVjdFN0eWxlcyA9IHRoaXMucHJvcHMuaW5qZWN0U3R5bGVzO1xuXG5cdFx0XHRyZXR1cm4gaXNJRSAmJiBpbmplY3RTdHlsZXMgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG5cdFx0XHRcdFx0X19odG1sOiAnaW5wdXQjJyArIHRoaXMuc3RhdGUuaW5wdXRJZCArICc6Oi1tcy1jbGVhciB7ZGlzcGxheTogbm9uZTt9J1xuXHRcdFx0XHR9IH0pIDogbnVsbDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdyZW5kZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgc2l6ZXJWYWx1ZSA9IFt0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSwgdGhpcy5wcm9wcy52YWx1ZSwgJyddLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSB7XG5cdFx0XHRcdGlmIChwcmV2aW91c1ZhbHVlICE9PSBudWxsICYmIHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiBwcmV2aW91c1ZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjdXJyZW50VmFsdWU7XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIHdyYXBwZXJTdHlsZSA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLnN0eWxlKTtcblx0XHRcdGlmICghd3JhcHBlclN0eWxlLmRpc3BsYXkpIHdyYXBwZXJTdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG5cblx0XHRcdHZhciBpbnB1dFN0eWxlID0gX2V4dGVuZHMoe1xuXHRcdFx0XHRib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG5cdFx0XHRcdHdpZHRoOiB0aGlzLnN0YXRlLmlucHV0V2lkdGggKyAncHgnXG5cdFx0XHR9LCB0aGlzLnByb3BzLmlucHV0U3R5bGUpO1xuXG5cdFx0XHR2YXIgaW5wdXRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyh0aGlzLnByb3BzLCBbXSk7XG5cblx0XHRcdGNsZWFuSW5wdXRQcm9wcyhpbnB1dFByb3BzKTtcblx0XHRcdGlucHV0UHJvcHMuY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZTtcblx0XHRcdGlucHV0UHJvcHMuaWQgPSB0aGlzLnN0YXRlLmlucHV0SWQ7XG5cdFx0XHRpbnB1dFByb3BzLnN0eWxlID0gaW5wdXRTdHlsZTtcblxuXHRcdFx0cmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZTogd3JhcHBlclN0eWxlIH0sXG5cdFx0XHRcdHRoaXMucmVuZGVyU3R5bGVzKCksXG5cdFx0XHRcdF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIF9leHRlbmRzKHt9LCBpbnB1dFByb3BzLCB7IHJlZjogdGhpcy5pbnB1dFJlZiB9KSksXG5cdFx0XHRcdF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgcmVmOiB0aGlzLnNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHRcdHNpemVyVmFsdWVcblx0XHRcdFx0KSxcblx0XHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHRcdHsgcmVmOiB0aGlzLnBsYWNlSG9sZGVyU2l6ZXJSZWYsIHN0eWxlOiBzaXplclN0eWxlIH0sXG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlclxuXHRcdFx0XHQpIDogbnVsbFxuXHRcdFx0KTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQXV0b3NpemVJbnB1dDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkF1dG9zaXplSW5wdXQucHJvcFR5cGVzID0ge1xuXHRjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdGRlZmF1bHRWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksIC8vIGRlZmF1bHQgZmllbGQgdmFsdWVcblx0ZXh0cmFXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoWy8vIGFkZGl0aW9uYWwgd2lkdGggZm9yIGlucHV0IGVsZW1lbnRcblx0X3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXSksXG5cdGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgLy8gaWQgdG8gdXNlIGZvciB0aGUgaW5wdXQsIGNhbiBiZSBzZXQgZm9yIGNvbnNpc3RlbnQgc25hcHNob3RzXG5cdGluamVjdFN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLCAvLyBpbmplY3QgdGhlIGN1c3RvbSBzdHlsZXNoZWV0IHRvIGhpZGUgY2xlYXIgVUksIGRlZmF1bHRzIHRvIHRydWVcblx0aW5wdXRDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdGlucHV0UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsIC8vIHJlZiBjYWxsYmFjayBmb3IgdGhlIGlucHV0IGVsZW1lbnRcblx0aW5wdXRTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdG1pbldpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbLy8gbWluaW11bSB3aWR0aCBmb3IgaW5wdXQgZWxlbWVudFxuXHRfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmddKSxcblx0b25BdXRvc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAvLyBvbkF1dG9zaXplIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1dpZHRoKSB7fVxuXHRvbkNoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLCAvLyBvbkNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbihldmVudCkge31cblx0cGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCAvLyBwbGFjZWhvbGRlciB0ZXh0XG5cdHBsYWNlaG9sZGVySXNNaW5XaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLCAvLyBkb24ndCBjb2xsYXBzZSBzaXplIHRvIGxlc3MgdGhhbiB0aGUgcGxhY2Vob2xkZXJcblx0c3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHR2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnkgLy8gZmllbGQgdmFsdWVcbn07XG5BdXRvc2l6ZUlucHV0LmRlZmF1bHRQcm9wcyA9IHtcblx0bWluV2lkdGg6IDEsXG5cdGluamVjdFN0eWxlczogdHJ1ZVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXV0b3NpemVJbnB1dDsiLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIG11cm11cmhhc2gyIHZpYSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanMvYmxvYi9tYXN0ZXIvbXVybXVyaGFzaDJfZ2MuanNcbmZ1bmN0aW9uIG11cm11cmhhc2gyXzMyX2djKHN0cikge1xuICB2YXIgbCA9IHN0ci5sZW5ndGgsXG4gICAgICBoID0gbCBeIGwsXG4gICAgICBpID0gMCxcbiAgICAgIGs7XG5cbiAgd2hpbGUgKGwgPj0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBrIF49IGsgPj4+IDI0O1xuICAgIGsgPSAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuICAgIGggPSAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoaCA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpIF4gaztcbiAgICBsIC09IDQ7XG4gICAgKytpO1xuICB9XG5cbiAgc3dpdGNoIChsKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgfVxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPSAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoaCA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuICBoIF49IGggPj4+IDE1O1xuICByZXR1cm4gKGggPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyaGFzaDJfMzJfZ2M7XG4iLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUsIG0pLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSwgbSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzd2l0Y2ggKGQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgICAgICBUKGRbY10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgRnVuY3Rpb246XG4gICAgICAgICAgICBTW0ErK10gPSBkO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgICAgICBZID0gISFkIHwgMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIFQ7XG4gIH1cblxuICBmdW5jdGlvbiBVKGQpIHtcbiAgICBkID0gZC5wcmVmaXg7XG4gICAgdm9pZCAwICE9PSBkICYmIChSID0gbnVsbCwgZCA/ICdmdW5jdGlvbicgIT09IHR5cGVvZiBkID8gdyA9IDEgOiAodyA9IDIsIFIgPSBkKSA6IHcgPSAwKTtcbiAgICByZXR1cm4gVTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEIoZCwgYykge1xuICAgIHZhciBlID0gZDtcbiAgICAzMyA+IGUuY2hhckNvZGVBdCgwKSAmJiAoZSA9IGUudHJpbSgpKTtcbiAgICBWID0gZTtcbiAgICBlID0gW1ZdO1xuXG4gICAgaWYgKDAgPCBBKSB7XG4gICAgICB2YXIgaCA9IEgoLTEsIGMsIGUsIGUsIEQsIHosIDAsIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBoICYmICdzdHJpbmcnID09PSB0eXBlb2YgaCAmJiAoYyA9IGgpO1xuICAgIH1cblxuICAgIHZhciBhID0gTShPLCBlLCBjLCAwLCAwKTtcbiAgICAwIDwgQSAmJiAoaCA9IEgoLTIsIGEsIGUsIGUsIEQsIHosIGEubGVuZ3RoLCAwLCAwLCAwKSwgdm9pZCAwICE9PSBoICYmIChhID0gaCkpO1xuICAgIFYgPSAnJztcbiAgICBFID0gMDtcbiAgICB6ID0gRCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2EgPSAvXlxcMCsvZyxcbiAgICAgIE4gPSAvW1xcMFxcclxcZl0vZyxcbiAgICAgIGFhID0gLzogKi9nLFxuICAgICAga2EgPSAvem9vfGdyYS8sXG4gICAgICBtYSA9IC8oWyw6IF0pKHRyYW5zZm9ybSkvZyxcbiAgICAgIGlhID0gLyxcXHIrPy9nLFxuICAgICAgRiA9IC8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLFxuICAgICAgZmEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBRID0gLzo6KHBsYWNlKS9nLFxuICAgICAgaGEgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBHID0gL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFxuICAgICAgZGEgPSAvXFwoXFxzKiguKilcXHMqXFwpL2csXG4gICAgICBvYSA9IC8oW1xcc1xcU10qPyk7L2csXG4gICAgICBiYSA9IC8tc2VsZnxmbGV4LS9nLFxuICAgICAgbmEgPSAvW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8sXG4gICAgICBsYSA9IC9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sXG4gICAgICBqYSA9IC8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sXG4gICAgICB6ID0gMSxcbiAgICAgIEQgPSAxLFxuICAgICAgRSA9IDAsXG4gICAgICB3ID0gMSxcbiAgICAgIE8gPSBbXSxcbiAgICAgIFMgPSBbXSxcbiAgICAgIEEgPSAwLFxuICAgICAgUiA9IG51bGwsXG4gICAgICBZID0gMCxcbiAgICAgIFYgPSAnJztcbiAgQi51c2UgPSBUO1xuICBCLnNldCA9IFU7XG4gIHZvaWQgMCAhPT0gVyAmJiBVKFcpO1xuICByZXR1cm4gQjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGlzX21pbjtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IFN0eWxpcyBmcm9tICdAZW1vdGlvbi9zdHlsaXMnO1xuaW1wb3J0IHN0eWxpc1J1bGVTaGVldCBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5cbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiBrZXkuY2hhckNvZGVBdCgxKSAhPT0gNDUgJiYgLy8gY3VzdG9tIHByb3BlcnRpZXNcbiAgIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8oYXR0cnxjYWxjfGNvdW50ZXJzP3x1cmwpXFwoLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2NvdW50ZXInLCAnb3Blbi1xdW90ZScsICdjbG9zZS1xdW90ZScsICduby1vcGVuLXF1b3RlJywgJ25vLWNsb3NlLXF1b3RlJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG4gIH07XG59XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIGlmIChhcmcgPT0gbnVsbCkgY29udGludWU7XG4gICAgdmFyIHRvQWRkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdQYXNzaW5nIGZ1bmN0aW9ucyB0byBjeCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBFbW90aW9uLlxcbicgKyAnUGxlYXNlIGNhbGwgdGhlIGZ1bmN0aW9uIGJlZm9yZSBwYXNzaW5nIGl0IHRvIGN4LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKFthcmcoKV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuLSAncG9seWZpbGxzJyBvbiBzZXJ2ZXIgc2lkZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICdnbGFtb3IvbGliL3NoZWV0J1xubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCgpXG5cbnN0eWxlU2hlZXQuaW5qZWN0KClcbi0gJ2luamVjdHMnIHRoZSBzdHlsZXNoZWV0IGludG8gdGhlIHBhZ2UgKG9yIGludG8gbWVtb3J5IGlmIG9uIHNlcnZlcilcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVN0eWxlVGFnKG9wdHMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdHMua2V5IHx8ICcnKTtcblxuICBpZiAob3B0cy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRzLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpIC8vICRGbG93Rml4TWVcbiAgO1xuICAob3B0cy5jb250YWluZXIgIT09IHVuZGVmaW5lZCA/IG9wdHMuY29udGFpbmVyIDogZG9jdW1lbnQuaGVhZCkuYXBwZW5kQ2hpbGQodGFnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB0aGlzLmlzU3BlZWR5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMub3B0cyA9IG9wdGlvbnM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdCgpIHtcbiAgICBpZiAodGhpcy5pbmplY3RlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbHJlYWR5IGluamVjdGVkIScpO1xuICAgIH1cblxuICAgIHRoaXMudGFnc1swXSA9IG1ha2VTdHlsZVRhZyh0aGlzLm9wdHMpO1xuICAgIHRoaXMuaW5qZWN0ZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5zcGVlZHkgPSBmdW5jdGlvbiBzcGVlZHkoYm9vbCkge1xuICAgIGlmICh0aGlzLmN0ciAhPT0gMCkge1xuICAgICAgLy8gY2Fubm90IGNoYW5nZSBzcGVlZHkgbW9kZSBhZnRlciBpbnNlcnRpbmcgYW55IHJ1bGUgdG8gc2hlZXQuIEVpdGhlciBjYWxsIHNwZWVkeSgke2Jvb2x9KSBlYXJsaWVyIGluIHlvdXIgYXBwLCBvciBjYWxsIGZsdXNoKCkgYmVmb3JlIHNwZWVkeSgke2Jvb2x9KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGNoYW5nZSBzcGVlZHkgbm93XCIpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSAhIWJvb2w7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlLCBzb3VyY2VNYXApIHtcbiAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignaWxsZWdhbCBydWxlJywgcnVsZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGFnID0gbWFrZVN0eWxlVGFnKHRoaXMub3B0cyk7XG5cbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuXG4gICAgICBfdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUgKyAoc291cmNlTWFwIHx8ICcnKSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG5cbiAgICBpZiAodGhpcy5jdHIgJSA2NTAwMCA9PT0gMCkge1xuICAgICAgdGhpcy50YWdzLnB1c2gobWFrZVN0eWxlVGFnKHRoaXMub3B0cykpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwOyAvLyB0b2RvIC0gbG9vayBmb3IgcmVtbmFudHMgaW4gZG9jdW1lbnQuc3R5bGVTaGVldHNcblxuICAgIHRoaXMuaW5qZWN0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmIChjb250ZXh0Ll9fU0VDUkVUX0VNT1RJT05fXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuX19TRUNSRVRfRU1PVElPTl9fO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXkgfHwgJ2Nzcyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnQ7XG5cbiAgZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgY3VycmVudCArPSBydWxlO1xuXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUsIGN1cnJlbnRTb3VyY2VNYXApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRpb25QbHVnaW4gPSBzdHlsaXNSdWxlU2hlZXQoaW5zZXJ0UnVsZSk7XG4gIHZhciBzdHlsaXNPcHRpb25zO1xuXG4gIGlmIChvcHRpb25zLnByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzT3B0aW9ucyA9IHtcbiAgICAgIHByZWZpeDogb3B0aW9ucy5wcmVmaXhcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlcyA9IHtcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnRlZDoge30sXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAga2V5OiBrZXlcbiAgfTtcbiAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQob3B0aW9ucyk7XG5cbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIC8vIPCfmoBcbiAgICBzaGVldC5pbmplY3QoKTtcbiAgfVxuXG4gIHZhciBzdHlsaXMgPSBuZXcgU3R5bGlzKHN0eWxpc09wdGlvbnMpO1xuICBzdHlsaXMudXNlKG9wdGlvbnMuc3R5bGlzUGx1Z2lucykoaW5zZXJ0aW9uUGx1Z2luKTtcbiAgdmFyIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcblxuICBmdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKGludGVycG9sYXRpb24sIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pIHtcbiAgICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAnJztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignSW50ZXJwb2xhdGluZyBmdW5jdGlvbnMgaW4gY3NzIGNhbGxzIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24uXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgdGhpcyA9PT0gdW5kZWZpbmVkID8gaW50ZXJwb2xhdGlvbigpIDogLy8gJEZsb3dGaXhNZVxuICAgICAgICBpbnRlcnBvbGF0aW9uKHRoaXMubWVyZ2VkUHJvcHMsIHRoaXMuY29udGV4dCksIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdC5jYWxsKHRoaXMsIGludGVycG9sYXRpb24pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGVzLnJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gICAgICAgIHJldHVybiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID09PSBmYWxzZSAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG4gICAgfVxuICB9XG5cbiAgdmFyIG9iamVjdFRvU3RyaW5nQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3Qob2JqKSB7XG4gICAgaWYgKG9iamVjdFRvU3RyaW5nQ2FjaGUuaGFzKG9iaikpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBvYmplY3RUb1N0cmluZ0NhY2hlLmdldChvYmopO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSAnJztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uKSB7XG4gICAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgaW50ZXJwb2xhdGlvbiwgZmFsc2UpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKGNhY2hlcy5yZWdpc3RlcmVkW29ialtrZXldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBjYWNoZXMucmVnaXN0ZXJlZFtvYmpba2V5XV0gKyBcIn1cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCBvYmpba2V5XSkgKyBcIjtcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba2V5XSkgJiYgdHlwZW9mIG9ialtrZXldWzBdID09PSAnc3RyaW5nJyAmJiBjYWNoZXMucmVnaXN0ZXJlZFtvYmpba2V5XVswXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqW2tleV0uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgb2JqW2tleV0sIGZhbHNlKSArIFwifVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgb2JqZWN0VG9TdHJpbmdDYWNoZS5zZXQob2JqLCBzdHJpbmcpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICB2YXIgbmFtZTtcbiAgdmFyIHN0eWxlc1dpdGhMYWJlbDtcbiAgdmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqOy9nO1xuXG4gIHZhciBjcmVhdGVDbGFzc05hbWUgPSBmdW5jdGlvbiBjcmVhdGVDbGFzc05hbWUoc3R5bGVzLCBpZGVudGlmaWVyTmFtZSkge1xuICAgIHJldHVybiBoYXNoU3RyaW5nKHN0eWxlcyArIGlkZW50aWZpZXJOYW1lKSArIGlkZW50aWZpZXJOYW1lO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG9sZENyZWF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzTmFtZTtcbiAgICB2YXIgc291cmNlTWFwcGluZ1VybFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcblxuICAgIGNyZWF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzTmFtZShzdHlsZXMsIGlkZW50aWZpZXJOYW1lKSB7XG4gICAgICByZXR1cm4gb2xkQ3JlYXRlQ2xhc3NOYW1lKHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcHBpbmdVcmxQYXR0ZXJuLCBmdW5jdGlvbiAoc291cmNlTWFwKSB7XG4gICAgICAgIGN1cnJlbnRTb3VyY2VNYXAgPSBzb3VyY2VNYXA7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pLCBpZGVudGlmaWVyTmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3RyaW5ncykge1xuICAgIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgICB2YXIgc3R5bGVzID0gJyc7XG4gICAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG5cbiAgICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgc3RyaW5ncywgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGludGVycG9sYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24sIGkpIHtcbiAgICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgaW50ZXJwb2xhdGlvbiwgc3R5bGVzLmNoYXJDb2RlQXQoc3R5bGVzLmxlbmd0aCAtIDEpID09PSA0NiAvLyAuXG4gICAgICApO1xuXG4gICAgICBpZiAoc3RyaW5nTW9kZSA9PT0gdHJ1ZSAmJiBzdHJpbmdzW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2kgKyAxXTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICBzdHlsZXNXaXRoTGFiZWwgPSBzdHlsZXM7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2UobGFiZWxQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgICBpZGVudGlmaWVyTmFtZSArPSBcIi1cIiArIHAxO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICAgIG5hbWUgPSBjcmVhdGVDbGFzc05hbWUoc3R5bGVzLCBpZGVudGlmaWVyTmFtZSk7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvbGRTdHlsaXMgPSBzdHlsaXM7XG5cbiAgICBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc2VsZWN0b3IsIHN0eWxlcykge1xuICAgICAgb2xkU3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgICAgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQoc2NvcGUsIHN0eWxlcykge1xuICAgIGlmIChjYWNoZXMuaW5zZXJ0ZWRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudCA9ICcnO1xuICAgICAgc3R5bGlzKHNjb3BlLCBzdHlsZXMpO1xuICAgICAgY2FjaGVzLmluc2VydGVkW25hbWVdID0gY3VycmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkgKyBcIi1cIiArIG5hbWU7XG5cbiAgICBpZiAoY2FjaGVzLnJlZ2lzdGVyZWRbc2VsZWN0b3JdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlcy5yZWdpc3RlcmVkW3NlbGVjdG9yXSA9IHN0eWxlc1dpdGhMYWJlbDtcbiAgICB9XG5cbiAgICBpbnNlcnQoXCIuXCIgKyBzZWxlY3Rvciwgc3R5bGVzKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG5cbiAgdmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgbmFtZTtcbiAgICBpbnNlcnQoJycsIFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc3R5bGVzICsgXCJ9XCIpO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaW5zZXJ0KCcnLCBzdHlsZXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICAgIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoY2FjaGVzLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByYXdDbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShjbGFzc05hbWUsIHNvdXJjZU1hcCkge1xuICAgIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gICAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICAgIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzLCBzb3VyY2VNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc05hbWVzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBjbGFzc05hbWVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNsYXNzbmFtZXMoY2xhc3NOYW1lcykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHlkcmF0ZVNpbmdsZUlkKGlkKSB7XG4gICAgY2FjaGVzLmluc2VydGVkW2lkXSA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBoeWRyYXRlKGlkcykge1xuICAgIGlkcy5mb3JFYWNoKGh5ZHJhdGVTaW5nbGVJZCk7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgICAgc2hlZXQuaW5qZWN0KCk7XG4gICAgfVxuXG4gICAgY2FjaGVzLmluc2VydGVkID0ge307XG4gICAgY2FjaGVzLnJlZ2lzdGVyZWQgPSB7fTtcbiAgfVxuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICB2YXIgY2h1bmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChjaHVua3MsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBzaGVldC50YWdzWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHNoZWV0LnRhZ3NbMF0pOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uLVwiICsga2V5KS5zcGxpdCgnICcpLmZvckVhY2goaHlkcmF0ZVNpbmdsZUlkKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBlbW90aW9uID0ge1xuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBoeWRyYXRlOiBoeWRyYXRlLFxuICAgIGN4OiBjeCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWw6IGluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXM6IGtleWZyYW1lcyxcbiAgICBjc3M6IGNzcyxcbiAgICBzaGVldDogc2hlZXQsXG4gICAgY2FjaGVzOiBjYWNoZXNcbiAgfTtcbiAgY29udGV4dC5fX1NFQ1JFVF9FTU9USU9OX18gPSBlbW90aW9uO1xuICByZXR1cm4gZW1vdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRW1vdGlvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjcuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsQj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGFhKGEsYixlLGMsZCxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2UsYyxkLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2FhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEY9e307XG5mdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUY7dGhpcy51cGRhdGVyPWV8fEV9Ry5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtHLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0cucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEgoKXt9SC5wcm90b3R5cGU9Ry5wcm90b3R5cGU7ZnVuY3Rpb24gSShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1GO3RoaXMudXBkYXRlcj1lfHxFfXZhciBKPUkucHJvdG90eXBlPW5ldyBIO1xuSi5jb25zdHJ1Y3Rvcj1JO2soSixHLnByb3RvdHlwZSk7Si5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSz17Y3VycmVudDpudWxsLGN1cnJlbnREaXNwYXRjaGVyOm51bGx9LEw9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxNPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBOKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilMLmNhbGwoYixjKSYmIU0uaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixlLGMpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVShkLGgpO2crPVQoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaCsrKSxnKz1UKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGUpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixlKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrZSkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGMsZCk7VihhLGRhLGIpO1MoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGUpO1YoYSxjYSxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtPKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpHLFB1cmVDb21wb25lbnQ6SSxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjpBLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok4sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUwuY2FsbChiLGMpJiYhTS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU4uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpPLHZlcnNpb246XCIxNi43LjBcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Syxhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNy4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBrPVtjLGQsZSxmLGcsaF0sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGtbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp0KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGgsayl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGw9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHQoXCIxOThcIiksbD12b2lkIDA7aGF8fChoYT0hMCxpYT1sKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOnQoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp0KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3FhLmhhc093blByb3BlcnR5KGgpP3QoXCI5OVwiLGgpOnZvaWQgMDtxYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZyYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocmEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp0KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcmEoYSxiLGMpe3NhW2FdP3QoXCIxMDBcIixhKTp2b2lkIDA7c2FbYV09Yjt0YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxxYT17fSxzYT17fSx0YT17fSx1YT1udWxsLHZhPW51bGwsd2E9bnVsbDtmdW5jdGlvbiB4YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9d2EoYyk7bGEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB5YShhLGIpe251bGw9PWI/dChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB6YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQWE9bnVsbDtmdW5jdGlvbiBCYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspeGEoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmeGEoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3QoXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dChcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIERhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dWEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEVhKGEpe251bGwhPT1hJiYoQWE9eWEoQWEsYSkpO2E9QWE7QWE9bnVsbDtpZihhJiYoemEoYSxCYSksQWE/dChcIjk1XCIpOnZvaWQgMCxoYSkpdGhyb3cgYT1pYSxoYT0hMSxpYT1udWxsLGE7fXZhciBGYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxHYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0ZhLEhhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRmE7ZnVuY3Rpb24gSWEoYSl7aWYoYVtHYV0pcmV0dXJuIGFbR2FdO2Zvcig7IWFbR2FdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbR2FdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSmEoYSl7YT1hW0dhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gS2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3QoXCIzM1wiKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gYVtIYV18fG51bGx9ZnVuY3Rpb24gTWEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBOYShhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gT2EoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1NYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTmEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylOYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBQYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFFhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUGEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUmEoYSl7emEoYSxPYSl9dmFyIFNhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gVGEoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVWE9e2FuaW1hdGlvbmVuZDpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlRhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVmE9e30sV2E9e307XG5TYSYmKFdhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFVhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFVhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWGEoYSl7aWYoVmFbYV0pcmV0dXJuIFZhW2FdO2lmKCFVYVthXSlyZXR1cm4gYTt2YXIgYj1VYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBXYSlyZXR1cm4gVmFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBZYT1YYShcImFuaW1hdGlvbmVuZFwiKSxaYT1YYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSwkYT1YYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVhhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxlYj1udWxsLGZiPW51bGw7XG5mdW5jdGlvbiBnYigpe2lmKGZiKXJldHVybiBmYjt2YXIgYSxiPWViLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGZiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gaGIoKXtyZXR1cm4hMH1mdW5jdGlvbiBpYigpe3JldHVybiExfVxuZnVuY3Rpb24geihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/aGI6aWI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1pYjtyZXR1cm4gdGhpc31cbm4oei5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1oYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1oYn0saXNQZXJzaXN0ZW50OmliLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWliO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7ei5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG56LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2piKGMpO3JldHVybiBjfTtqYih6KTtmdW5jdGlvbiBrYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBsYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6dChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBqYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1rYjthLnJlbGVhc2U9bGJ9dmFyIG1iPXouZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj16LmV4dGVuZCh7ZGF0YTpudWxsfSksb2I9WzksMTMsMjcsMzJdLHBiPVNhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxxYj1udWxsO1NhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihxYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHJiPVNhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhcWIsc2I9U2EmJighcGJ8fHFiJiY4PHFiJiYxMT49cWIpLHRiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHViPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHZiPSExO1xuZnVuY3Rpb24gd2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1vYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHhiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHliPSExO2Z1bmN0aW9uIHpiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB4YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dmI9ITA7cmV0dXJuIHRiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXRiJiZ2Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBBYihhLGIpe2lmKHliKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFwYiYmd2IoYSxiKT8oYT1nYigpLGZiPWViPWNiPW51bGwseWI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHNiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBCYj17ZXZlbnRUeXBlczp1YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYocGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT11Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT11Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9dWIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHliP3diKGEsYykmJihlPXViLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9dWIuY29tcG9zaXRpb25TdGFydCk7ZT8oc2ImJlwia29cIiE9PWMubG9jYWxlJiYoeWJ8fGUhPT11Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT11Yi5jb21wb3NpdGlvbkVuZCYmeWImJihmPWdiKCkpOihjYj1kLGViPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LHliPVxuITApKSxlPW1iLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXhiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxSYShlKSxmPWUpOmY9bnVsbDsoYT1yYj96YihhLGMpOkFiKGEsYykpPyhiPW5iLmdldFBvb2xlZCh1Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUmEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQ2I9bnVsbCxEYj1udWxsLEViPW51bGw7ZnVuY3Rpb24gSGIoYSl7aWYoYT12YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIENiP3QoXCIyODBcIik6dm9pZCAwO3ZhciBiPXVhKGEuc3RhdGVOb2RlKTtDYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEliKGEpe0RiP0ViP0ViLnB1c2goYSk6RWI9W2FdOkRiPWF9ZnVuY3Rpb24gSmIoKXtpZihEYil7dmFyIGE9RGIsYj1FYjtFYj1EYj1udWxsO0hiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylIYihiW2FdKX19XG5mdW5jdGlvbiBLYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIExiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIE1iKCl7fXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe2lmKE5iKXJldHVybiBhKGIpO05iPSEwO3RyeXtyZXR1cm4gS2IoYSxiKX1maW5hbGx5e2lmKE5iPSExLG51bGwhPT1EYnx8bnVsbCE9PUViKU1iKCksSmIoKX19dmFyIFBiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFFiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhUGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gUmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFNiKGEpe2lmKCFTYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBUYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWIoYSl7dmFyIGI9VGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYihhKSl9ZnVuY3Rpb24gV2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsWWI9L14oLiopW1xcXFxcXC9dLyxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9RD9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9RD9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6XG42MDExMyxpYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGpjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsa2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGxjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1rYyYmYVtrY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG1jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGljOnJldHVybiBtYyhhLnR5cGUpO2Nhc2UgamM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBtYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9bWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9bWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG9jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG9jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBFKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBFKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0YudGFiSW5kZXg9bmV3IEUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ri5oYXNPd25Qcm9wZXJ0eShiKT9GW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYyhhLGIpe0JjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEZjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEdjKGEsYixjKXthPXouZ2V0UG9vbGVkKEZjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SWIoYyk7UmEoYSk7cmV0dXJuIGF9dmFyIEpjPW51bGwsS2M9bnVsbDtmdW5jdGlvbiBMYyhhKXtFYShhKX1cbmZ1bmN0aW9uIE1jKGEpe3ZhciBiPUthKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE9jPSExO1NhJiYoT2M9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gUGMoKXtKYyYmKEpjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSxLYz1KYz1udWxsKX1mdW5jdGlvbiBRYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmTWMoS2MpJiYoYT1HYyhLYyxhLFJiKGEpKSxPYihMYyxhKSl9ZnVuY3Rpb24gUmMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFBjKCksSmM9YixLYz1jLEpjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSk6XCJibHVyXCI9PT1hJiZQYygpfWZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gTWMoYil9ZnVuY3Rpb24gVWMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gTWMoYil9XG52YXIgVmM9e2V2ZW50VHlwZXM6RmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpPYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/S2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPU5jOlFiKGUpP09jP2Y9VWM6KGY9U2MsZz1SYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9VGMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEdjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sV2M9ei5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFhjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFljKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9WGNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBaYygpe3JldHVybiBZY31cbnZhciAkYz0wLGFkPTAsYmQ9ITEsY2Q9ITEsZGQ9V2MuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPSRjOyRjPWEuc2NyZWVuWDtyZXR1cm4gYmQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihiZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPWFkO2FkPWEuc2NyZWVuWTtyZXR1cm4gY2Q/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihjZD0hMCwwKX19KSxlZD1kZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGdkPXtldmVudFR5cGVzOmZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0lhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbD12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1kZCxoPWZkLm1vdXNlTGVhdmUsaz1mZC5tb3VzZUVudGVyLGw9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1lZCxoPWZkLnBvaW50ZXJMZWF2ZSxrPWZkLnBvaW50ZXJFbnRlcixsPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpLYShmKTtlPW51bGw9PWI/ZTpLYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1sK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPWwrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtsPTA7Zm9yKGc9YjtnO2c9TWEoZykpbCsrO2c9MDtmb3Ioaz1lO2s7az1NYShrKSlnKys7Zm9yKDswPGwtZzspYj1NYShiKSxsLS07Zm9yKDswPGctbDspZT1NYShlKSxnLS07Zm9yKDtsLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1NYShiKTtlPU1hKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtsPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2IucHVzaChmKTtmPU1hKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7bD1kLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TWEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylQYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylQYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19LGhkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gaWQoYSxiKXtyZXR1cm4gYT09PWI/MCE9PWF8fDAhPT1ifHwxL2E9PT0xL2I6YSE9PWEmJmIhPT1ifVxuZnVuY3Rpb24gamQoYSxiKXtpZihpZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWhkLmNhbGwoYixjW2RdKXx8IWlkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gbGQoYSl7MiE9PWtkKGEpP3QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gbWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9a2QoYSksMz09PWI/dChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gbGQoZSksYTtpZihnPT09ZClyZXR1cm4gbGQoZSksYjtnPWcuc2libGluZ310KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6dChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz90KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG5kKGEpe2E9bWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgb2Q9ei5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPXouZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9V2MuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiByZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBzZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sdGQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHVkPVdjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1zZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1yZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/dGRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksdmQ9ZGQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHdkPVdjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjfSkseGQ9ei5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkseWQ9ZGQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx6ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtZYSxcImFuaW1hdGlvbkVuZFwiXSxbWmEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sWyRhLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbYWIsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSxBZD17fSxCZD17fTtmdW5jdGlvbiBDZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O0FkW2FdPWI7QmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtDZChhLCEwKX0pO3pkLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMSl9KTtcbnZhciBEZD17ZXZlbnRUeXBlczpBZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1CZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1yZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZGQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnZkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9d2Q7YnJlYWs7Y2FzZSBZYTpjYXNlIFphOmNhc2UgJGE6YT1vZDticmVhaztjYXNlIGFiOmE9eGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9V2M7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT15ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPXBkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZWQ7YnJlYWs7ZGVmYXVsdDphPXp9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtSYShiKTtyZXR1cm4gYn19LEVkPURkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkZkPVtdO2Z1bmN0aW9uIEdkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUlhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPHBhLmxlbmd0aDtoKyspe3ZhciBrPXBhW2hdO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXlhKGcsaykpfUVhKGcpfX12YXIgSGQ9ITA7XG5mdW5jdGlvbiBIKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gS2QoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/SWQ6SmQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBJZChhLGIpe0xiKEpkLGEsYil9XG5mdW5jdGlvbiBKZChhLGIpe2lmKEhkKXt2YXIgYz1SYihiKTtjPUlhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKEZkLmxlbmd0aCl7dmFyIGQ9RmQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7T2IoR2QsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5GZC5sZW5ndGgmJkZkLnB1c2goYSl9fX12YXIgTGQ9e30sTWQ9MCxOZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBPZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxOZCl8fChhW05kXT1NZCsrLExkW2FbTmRdXT17fSk7cmV0dXJuIExkW2FbTmRdXX1mdW5jdGlvbiBQZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gUWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gUmQoYSxiKXt2YXIgYz1RZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1RZChjKX19ZnVuY3Rpb24gU2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9TZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBUZCgpe2Zvcih2YXIgYT13aW5kb3csYj1QZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e2E9Yi5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXd9Y2F0Y2goYyl7YnJlYWt9Yj1QZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBVZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFZkPVNhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsV2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFhkPW51bGwsWWQ9bnVsbCxaZD1udWxsLCRkPSExO1xuZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZigkZHx8bnVsbD09WGR8fFhkIT09UGQoYykpcmV0dXJuIG51bGw7Yz1YZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZVZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBaZCYmamQoWmQsYyk/bnVsbDooWmQ9YyxhPXouZ2V0UG9vbGVkKFdkLnNlbGVjdCxZZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVhkLFJhKGEpLGEpfVxudmFyIGJlPXtldmVudFR5cGVzOldkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPU9kKGUpO2Y9dGEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9LYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFFiKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVhkPWUsWWQ9YixaZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6WmQ9WWQ9WGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6JGQ9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiAkZD0hMSxhZShjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihWZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGFlKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3VhPUxhO3ZhPUphO3dhPUthO0NhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46RGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmdkLENoYW5nZUV2ZW50UGx1Z2luOlZjLFNlbGVjdEV2ZW50UGx1Z2luOmJlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46QmJ9KTtmdW5jdGlvbiBkZShhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVlKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit5YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2UoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz90KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6dChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6eWMoYyl9fVxuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz15YyhiLnZhbHVlKSxkPXljKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGtlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5lPXZvaWQgMCxvZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuZT1uZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1uZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJlPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxZSkuZm9yRWFjaChmdW5jdGlvbihhKXtyZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FlW2JdPXFlW2FdfSl9KTtmdW5jdGlvbiBzZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWUuaGFzT3duUHJvcGVydHkoYSkmJnFlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRlKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNlKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHVlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2ZShhLGIpe2ImJih1ZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj90KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOnQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3QoXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB3ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB4ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1PZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpLZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6S2QoXCJmb2N1c1wiLGEpO0tkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmS2QoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmSChlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB5ZSgpe312YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIENlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgRGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO1xuZnVuY3Rpb24gRmUoYSxiLGMsZCxlKXthW0hhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZCYyhhLGUpO3dlKGMsZCk7ZD13ZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP3RlKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/cGUoYSxoKTp4YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Q2MoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2ZlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9mZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTpmZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gR2UoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBIZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgSWU9W10sSmU9LTE7ZnVuY3Rpb24gSShhKXswPkplfHwoYS5jdXJyZW50PUllW0plXSxJZVtKZV09bnVsbCxKZS0tKX1mdW5jdGlvbiBKKGEsYil7SmUrKztJZVtKZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBLZT17fSxLPXtjdXJyZW50OktlfSxMPXtjdXJyZW50OiExfSxMZT1LZTtcbmZ1bmN0aW9uIE1lKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gS2U7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTShhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIE5lKGEpe0koTCxhKTtJKEssYSl9ZnVuY3Rpb24gT2UoYSl7SShMLGEpO0koSyxhKX1cbmZ1bmN0aW9uIFBlKGEsYixjKXtLLmN1cnJlbnQhPT1LZT90KFwiMTY4XCIpOnZvaWQgMDtKKEssYixhKTtKKEwsYyxhKX1mdW5jdGlvbiBRZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp0KFwiMTA4XCIsbWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gUmUoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxLZTtMZT1LLmN1cnJlbnQ7SihLLGIsYSk7SihMLEwuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFNlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp0KFwiMTY5XCIpO2M/KGI9UWUoYSxiLExlKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsSShMLGEpLEkoSyxhKSxKKEssYixhKSk6SShMLGEpO0ooTCxjLGEpfXZhciBUZT1udWxsLFVlPW51bGw7ZnVuY3Rpb24gVmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFdlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1RlPVZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtVZT1WZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gTihhLGIsYyxkKXtyZXR1cm4gbmV3IFhlKGEsYixjLGQpfVxuZnVuY3Rpb24gWWUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBaZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gWWUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdjKXJldHVybiAxMTtpZihhPT09aWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gJGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1OKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5O2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpWWUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWM6cmV0dXJuIGJmKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmM6cmV0dXJuIGNmKGMsZXwzLGYsYik7Y2FzZSBiYzpyZXR1cm4gY2YoYyxlfDIsZixiKTtjYXNlIGNjOnJldHVybiBhPU4oMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1jYyxhLnR5cGU9Y2MsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYzpyZXR1cm4gYT1OKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWhjLGEudHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGM6Zz0xMDticmVhayBhO2Nhc2UgZWM6Zz05O2JyZWFrIGE7Y2FzZSBnYzpnPTExO2JyZWFrIGE7Y2FzZSBpYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGpjOmc9MTY7ZD1udWxsO2JyZWFrIGF9dChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPU4oZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBiZihhLGIsYyxkKXthPU4oNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGNmKGEsYixjLGQpe2E9Tig4LGEsZCxiKTtiPTA9PT0oYiYxKT9iYzpmYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGRmKGEsYixjKXthPU4oNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gZWYoYSxiLGMpe2I9Tig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7Z2YoYixhKX1cbmZ1bmN0aW9uIGhmKGEsYil7YS5kaWRFcnJvcj0hMTthLmxhdGVzdFBpbmdlZFRpbWU+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lLGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2dmKGIsYSl9ZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBrZj0hMTtmdW5jdGlvbiBsZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBtZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gb2YoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWxmKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1tZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1tZihkKSk7bnVsbD09PWV8fGQ9PT1lP29mKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8ob2YoZCxiKSxvZihlLGIpKToob2YoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBxZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWxmKGEubWVtb2l6ZWRTdGF0ZSk6cmYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiByZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1tZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBzZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOmtmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gdGYoYSxiLGMsZCxlKXtrZj0hMTtiPXJmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9ayxmPWwpLGg8bSYmKGg9bSkpOihsPXNmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7cjxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8ciYmKGg9cikpOihsPXNmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiB1ZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7dmYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO3ZmKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiB2ZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiB3ZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOm5jKGIpfX12YXIgeGY9e2N1cnJlbnQ6bnVsbH0seWY9bnVsbCx6Zj1udWxsLEFmPW51bGw7ZnVuY3Rpb24gQmYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7Sih4ZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gQ2YoYSl7dmFyIGI9eGYuY3VycmVudDtJKHhmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gRGYoYSl7eWY9YTtBZj16Zj1udWxsO2EuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1udWxsfVxuZnVuY3Rpb24gRWYoYSxiKXtpZihBZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpQWY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PXpmPyhudWxsPT09eWY/dChcIjI5M1wiKTp2b2lkIDAseWYuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT16Zj1iKTp6Zj16Zi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgRmY9e30sTz17Y3VycmVudDpGZn0sR2Y9e2N1cnJlbnQ6RmZ9LEhmPXtjdXJyZW50OkZmfTtmdW5jdGlvbiBJZihhKXthPT09RmY/dChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZihhLGIpe0ooSGYsYixhKTtKKEdmLGEsYSk7SihPLEZmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1lKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1tZShiLGMpfUkoTyxhKTtKKE8sYixhKX1mdW5jdGlvbiBLZihhKXtJKE8sYSk7SShHZixhKTtJKEhmLGEpfWZ1bmN0aW9uIExmKGEpe0lmKEhmLmN1cnJlbnQpO3ZhciBiPUlmKE8uY3VycmVudCk7dmFyIGM9bWUoYixhLnR5cGUpO2IhPT1jJiYoSihHZixhLGEpLEooTyxjLGEpKX1mdW5jdGlvbiBNZihhKXtHZi5jdXJyZW50PT09YSYmKEkoTyxhKSxJKEdmLGEpKX1cbmZ1bmN0aW9uIFAoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OnRocm93IGEuX3N0YXR1cz0wLGI9YS5fY3RvcixiPWIoKSxiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pLGEuX3Jlc3VsdD1iLGI7fX12YXIgT2Y9WGIuUmVhY3RDdXJyZW50T3duZXIsUGY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBRZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBWZj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWtkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVJmKCk7ZD1TZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtUZigpO3BmKGEsZSk7VWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UmYoKTtkPVNmKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7VGYoKTtwZihhLGUpO1VmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVJmKCk7Yz1TZihjLGEpO3ZhciBkPW5mKGMpO2QudGFnPVxuMjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7VGYoKTtwZihhLGQpO1VmKGEsYyl9fTtmdW5jdGlvbiBXZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFqZChjLGQpfHwhamQoZSxmKTohMH1cbmZ1bmN0aW9uIFhmKGEsYixjKXt2YXIgZD0hMSxlPUtlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU9mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihlPU0oYik/TGU6Sy5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/TWUoYSxlKTpLZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVZmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFpmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZWZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uICRmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9UGY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1PZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChmKTooZj1NKGIpP0xlOksuY3VycmVudCxlLmNvbnRleHQ9TWUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYodGYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKFFmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlZmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHRmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgYWc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGJnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz90KFwiMjg5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp0KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1QZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT90KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6dChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gY2coYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJnQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIGRnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9JGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1kZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9YmcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWFmKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPWJnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGcpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCxnKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWRmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPWFmKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPWJnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1lZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoYWcoYil8fFxubGMoYikpcmV0dXJuIGI9YmYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7Y2coYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB3KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKGFnKGMpfHxsYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7Y2coYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKGFnKGQpfHxsYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7Y2coYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHE9bnVsbCxtPWcsdT1nPTAscD1udWxsO251bGwhPT1tJiZ1PGgubGVuZ3RoO3UrKyl7bS5pbmRleD51PyhwPW0sbT1udWxsKTpwPW0uc2libGluZzt2YXIgdj13KGUsbSxoW3VdLGspO2lmKG51bGw9PT12KXtudWxsPT09bSYmKG09cCk7YnJlYWt9YSYmXG5tJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodixnLHUpO251bGw9PT1xP2w9djpxLnNpYmxpbmc9djtxPXY7bT1wfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYobT1yKGUsaFt1XSxrKSlnPWYobSxnLHUpLG51bGw9PT1xP2w9bTpxLnNpYmxpbmc9bSxxPW07cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3U8aC5sZW5ndGg7dSsrKWlmKHA9eShtLGUsdSxoW3VdLGspKWEmJm51bGwhPT1wLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PXAua2V5P3U6cC5rZXkpLGc9ZihwLGcsdSksbnVsbD09PXE/bD1wOnEuc2libGluZz1wLHE9cDthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9bGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD90KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLHA9bnVsbCx2PWgubmV4dCgpO251bGwhPT1xJiYhdi5kb25lO3UrKyx2PWgubmV4dCgpKXtxLmluZGV4PnU/KHA9cSxxPW51bGwpOnA9cS5zaWJsaW5nO3ZhciBBPXcoZSxxLHYudmFsdWUsayk7aWYobnVsbD09PUEpe3F8fChxPXApO2JyZWFrfWEmJnEmJm51bGw9PT1BLmFsdGVybmF0ZSYmYihlLHEpO2c9ZihBLGcsdSk7bnVsbD09PW0/bD1BOm0uc2libGluZz1BO209QTtxPXB9aWYodi5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9cihlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9eShxLGUsdSx2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09di5rZXk/dTpcbnYua2V5KSxnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPWJnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9YmYoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWFmKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPWJnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWVmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1kZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihhZyhmKSlyZXR1cm4gQihhLGQsZixoKTtpZihsYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZjZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHQoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBlZz1kZyghMCksZmc9ZGcoITEpLGdnPW51bGwsaGc9bnVsbCxpZz0hMTtcbmZ1bmN0aW9uIGpnKGEsYil7dmFyIGM9Tig1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGtnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbGcoYSl7aWYoaWcpe3ZhciBiPWhnO2lmKGIpe3ZhciBjPWI7aWYoIWtnKGEsYikpe2I9R2UoYyk7aWYoIWJ8fCFrZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtpZz0hMTtnZz1hO3JldHVybn1qZyhnZyxjKX1nZz1hO2hnPUhlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsaWc9ITEsZ2c9YX19ZnVuY3Rpb24gbWcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO2dnPWF9ZnVuY3Rpb24gbmcoYSl7aWYoYSE9PWdnKXJldHVybiExO2lmKCFpZylyZXR1cm4gbWcoYSksaWc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFDZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9aGc7YjspamcoYSxiKSxiPUdlKGIpO21nKGEpO2hnPWdnP0dlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIG9nKCl7aGc9Z2c9bnVsbDtpZz0hMX12YXIgcGc9WGIuUmVhY3RDdXJyZW50T3duZXI7XG5mdW5jdGlvbiBRKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/ZmcoYixudWxsLGMsZCk6ZWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gcWcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0RmKGIsZSk7ZD1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHJnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhWWUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsc2coYSxiLGcsZCxlLGYpO2E9YWYoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpqZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiB0ZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT0kZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gc2coYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZTxmJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWY/dGcoYSxiLGYpOnVnKGEsYixjLGQsZil9ZnVuY3Rpb24gdmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3ZhciBmPU0oYyk/TGU6Sy5jdXJyZW50O2Y9TWUoYixmKTtEZihiLGUpO2M9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB3ZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO1JlKGIpfWVsc2UgZj0hMTtEZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksWGYoYixjLGQsZSksJGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9T2YuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQobCk6KGw9TShjKT9MZTpLLmN1cnJlbnQsbD1NZShiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtyfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWmYoYixnLGQsbCk7a2Y9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT13O3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih0ZihiLHksZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dyE9PWt8fEwuY3VycmVudHx8a2Y/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoUWYoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWtmfHxXZihiLGMsaCxkLHcsayxsKSk/KHJ8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpQKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU9mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGwpOihsPU0oYyk/TGU6Sy5jdXJyZW50LGw9TWUoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbihyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWmYoYixnLGQsbCksa2Y9ITEsaz1iLm1lbW9pemVkU3RhdGUsdz1nLnN0YXRlPWsseT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT15JiYodGYoYix5LGQsZyxlKSx3PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT13fHxMLmN1cnJlbnR8fGtmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKFFmKGIsYyxtLGQpLHc9Yi5tZW1vaXplZFN0YXRlKSwobT1rZnx8V2YoYixjLGgsZCxrLHcsbCkpPyhyfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdyxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHcsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9dyksZy5wcm9wcz1kLGcuc3RhdGU9dyxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4geGcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24geGcoYSxiLGMsZCxlLGYpe3ZnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZTZShiLGMsITEpLHRnKGEsYixmKTtkPWIuc3RhdGVOb2RlO3BnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWVnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9ZWcoYixudWxsLGgsZikpOlEoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmU2UoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB5ZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1BlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlBlKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiB6ZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9YmYobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPWJmKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPWZnKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPSRlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz0kZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1lZyhiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1iZihudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1iZihnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPWVnKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiB0ZyhhLGIsYyl7bnVsbCE9PWEmJihiLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5KTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPSRlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPSRlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEFnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hJiZhLm1lbW9pemVkUHJvcHM9PT1iLnBlbmRpbmdQcm9wcyYmIUwuY3VycmVudCYmZDxjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzp5ZyhiKTtvZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6TShiLnR5cGUpJiZSZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOkJmKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB6ZyhhLGIsYyk7Yj10ZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gdGcoYSxiLGMpfWIuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIuZWxlbWVudFR5cGU7bnVsbCE9PVxuYSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1NZShiLEsuY3VycmVudCk7RGYoYixjKTtlPWQoYSxlKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7aWYoTShkKSl7dmFyIGY9ITA7UmUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJlFmKGIsZCxnLGEpO2UudXBkYXRlcj1WZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iOyRmKGIsZCxhLGMpO2I9eGcobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7XG5yZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPU5mKGUpO2IudHlwZT1hO2U9Yi50YWc9WmUoYSk7Zj1QKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPXVnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9d2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9cWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9cmcobnVsbCxiLGEsUChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OnQoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6UChkLGUpLHVnKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksd2coYSxiLFxuZCxlLGMpO2Nhc2UgMzp5ZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/dChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt0ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKW9nKCksYj10ZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSloZz1IZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxnZz1iLGU9aWc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1mZyhiLG51bGwsZCxjKSk6KFEoYSxiLGQsYyksb2coKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJmxnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sQ2UoZCxlKT9nPW51bGw6bnVsbCE9PVxuZiYmQ2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksdmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUShhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmbGcoYiksbnVsbDtjYXNlIDEzOnJldHVybiB6ZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1lZyhiLG51bGwsZCxjKTpRKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6UChkLGUpLHFnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBRKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBRKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtCZihiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9aD09PWYmJigwIT09aHx8MS9oPT09MS9mKXx8aCE9PWgmJmYhPT1mPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTC5jdXJyZW50KXtiPXRnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe2g9Zy5maXJzdENvbnRleHREZXBlbmRlbmN5O2lmKG51bGwhPT1oKXtkb3tpZihoLmNvbnRleHQ9PT1kJiYwIT09KGgub2JzZXJ2ZWRCaXRzJmYpKXtpZigxPT09Zy50YWcpe3ZhciBrPW5mKGMpO2sudGFnPTI7cGYoZyxrKX1nLmV4cGlyYXRpb25UaW1lPFxuYyYmKGcuZXhwaXJhdGlvblRpbWU9Yyk7az1nLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtmb3IodmFyIGw9Zy5yZXR1cm47bnVsbCE9PWw7KXtrPWwuYWx0ZXJuYXRlO2lmKGwuY2hpbGRFeHBpcmF0aW9uVGltZTxjKWwuY2hpbGRFeHBpcmF0aW9uVGltZT1jLG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YyYmKGsuY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YylrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO2w9bC5yZXR1cm59fWs9Zy5jaGlsZDtoPWgubmV4dH13aGlsZShudWxsIT09aCl9ZWxzZSBrPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1rKWsucmV0dXJuPWc7ZWxzZSBmb3Ioaz1nO251bGwhPT1rOyl7aWYoaz09PWIpe2s9bnVsbDticmVha31nPWsuc2libGluZztcbmlmKG51bGwhPT1nKXtnLnJldHVybj1rLnJldHVybjtrPWc7YnJlYWt9az1rLnJldHVybn1nPWt9fVEoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sRGYoYixjKSxlPUVmKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxRKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1QKGUsYi5wZW5kaW5nUHJvcHMpLGY9UChlLnR5cGUsZikscmcoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHNnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTShkKT8oYT1cbiEwLFJlKGIpKTphPSExLERmKGIsYyksWGYoYixkLGUsYyksJGYoYixkLGUsYykseGcobnVsbCxiLGQsITAsYSxjKTtkZWZhdWx0OnQoXCIxNTZcIil9fWZ1bmN0aW9uIEJnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBDZz12b2lkIDAsR2c9dm9pZCAwLEhnPXZvaWQgMCxJZz12b2lkIDA7Q2c9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0dnPWZ1bmN0aW9uKCl7fTtcbkhnPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihPLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YyhnLGYpO2Q9emMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWVlKGcsZik7ZD1lZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWdlKGcsZik7ZD1nZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXllKX12ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGs9ZltjXTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgbD1kW2NdO2s9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZsIT09ayYmKG51bGwhPWx8fG51bGwhPWspKWlmKFwic3R5bGVcIj09PWMpaWYoayl7Zm9yKGcgaW4gaykhay5oYXNPd25Qcm9wZXJ0eShnKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYma1tnXSE9PWxbZ10mJihofHxcbihoPXt9KSxoW2ddPWxbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmayE9PWwmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09Yz9rPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihzYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9bCYmeGUoZSxjKSxhfHxrPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGwpKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZCZyhiKX19O0lnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZCZyhiKX07XG52YXIgSmc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gS2coYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1uYyhjKSk7bnVsbCE9PWMmJm1jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm1jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIExnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe01nKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIE5nKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gT2coYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVlJiZVZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYobnVsbCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtNZyhlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOkxnKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtNZyhhLGYpfWJyZWFrO2Nhc2UgNTpMZyhhKTticmVhaztjYXNlIDQ6UGcoYSl9fVxuZnVuY3Rpb24gUWcoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBSZyhhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihRZyhiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihwZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8UWcoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXllKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gUGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKE9nKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOk9nKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmRmUoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PVJmKCkpKTtudWxsIT09YSYmTmcoYSxkKTtjPWIudXBkYXRlUXVldWU7XG5pZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgSmcpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1UZy5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX12YXIgVWc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gVmcoYSxiLGMpe2M9bmYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7V2coZCk7S2coYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBYZyhhLGIsYyl7Yz1uZihjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1ZZz9ZZz1uZXcgU2V0KFt0aGlzXSk6WWcuYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztLZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFpnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOk0oYS50eXBlKSYmTmUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksT2UoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3QoXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gQ2YoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciAkZz17cmVhZENvbnRleHQ6RWZ9LGFoPVhiLlJlYWN0Q3VycmVudE93bmVyLGJoPTEwNzM3NDE4MjIsY2g9MCxkaD0hMSxTPW51bGwsVD1udWxsLFU9MCxlaD0tMSxmaD0hMSxWPW51bGwsZ2g9ITEsaGg9bnVsbCxpaD1udWxsLFlnPW51bGw7ZnVuY3Rpb24gamgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmTmUoYik7YnJlYWs7Y2FzZSAzOktmKGIpO09lKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpDZihiKX1hPWEucmV0dXJufVQ9bnVsbDtVPTA7ZWg9LTE7Zmg9ITE7Uz1udWxsfWZ1bmN0aW9uIFRmKCl7bnVsbCE9PWloJiYoYmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2soaGgpLGloKCkpfVxuZnVuY3Rpb24ga2goYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1M9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk0oYi50eXBlKSYmTmUoYik7YnJlYWs7Y2FzZSAzOktmKGIpO09lKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKW5nKGIpLGIuZWZmZWN0VGFnJj0tMztHZyhiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKUhnKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgaz1JZihPLmN1cnJlbnQpO2lmKG5nKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgbD1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscj1oO2VbR2FdPWc7ZVtIYV09bTtmPXZvaWQgMDtoPWw7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8YmIubGVuZ3RoO2wrKylIKGJiW2xdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixlKTtIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsZSk7SChcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFjKGUsbSk7SChcImludmFsaWRcIixlKTt4ZShyLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0goXCJpbnZhbGlkXCIsZSk7eGUocixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGUsbSksSChcImludmFsaWRcIixlKSx4ZShyLFwib25DaGFuZ2VcIil9dmUoaCxtKTtsPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYoaz1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrP2UudGV4dENvbnRlbnQhPT1rJiYobD1bXCJjaGlsZHJlblwiLGtdKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmUudGV4dENvbnRlbnQhPT1cIlwiK2smJihsPVtcImNoaWxkcmVuXCIsXCJcIitrXSk6c2EuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWsmJnhlKHIsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpWYihlKTtFYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGUpO2plKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz15ZSl9Zj1sO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJkJnKGIpfWVsc2V7bT1iO2U9ZjtyPWc7bD05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtrPT09a2UuaHRtbCYmKGs9bGUoZSkpO2s9PT1rZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIHIuaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ci5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmci5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKGssZSk7ZT1sO2VbR2FdPW07ZVtIYV09ZztDZyhlLGIsITEsITEpO3I9ZTtsPWY7bT1nO3ZhciB3PWgseT13ZShsLG0pO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsXG5yKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGJiLmxlbmd0aDtoKyspSChiYltoXSxyKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLHIpO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixyKTtIKFwibG9hZFwiLHIpO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkgoXCJyZXNldFwiLHIpO0goXCJzdWJtaXRcIixyKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIscik7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFjKHIsbSk7aD16YyhyLG0pO0goXCJpbnZhbGlkXCIscik7eGUodyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPWVlKHIsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnIuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7SChcImludmFsaWRcIixyKTt4ZSh3LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUocixcbm0pO2g9Z2UocixtKTtIKFwiaW52YWxpZFwiLHIpO3hlKHcsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX12ZShsLGgpO2s9dm9pZCAwO3ZhciBCPWwsUj1yLHY9aDtmb3IoayBpbiB2KWlmKHYuaGFzT3duUHJvcGVydHkoaykpe3ZhciBxPXZba107XCJzdHlsZVwiPT09az90ZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmb2UoUixxKSk6XCJjaGlsZHJlblwiPT09az9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PUJ8fFwiXCIhPT1xKSYmcGUoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJnBlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ayYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWsmJlwiYXV0b0ZvY3VzXCIhPT1rJiYoc2EuaGFzT3duUHJvcGVydHkoayk/bnVsbCE9cSYmeGUodyxrKTpudWxsIT1xJiZ4YyhSLGsscSx5KSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOlZiKHIpO1xuRWMocixtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihyKTtqZShyLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZyLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit5YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cjtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtyPW0udmFsdWU7bnVsbCE9cj9mZShoLCEhbS5tdWx0aXBsZSxyLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmZmUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHIub25jbGljaz15ZSl9KGc9QmUoZixnKSkmJkJnKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP0lnKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE8uY3VycmVudCksbmcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbR2FdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYmQmcoYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbR2FdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1M9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZyE9PWZ8fDA9PT0oYi5lZmZlY3RUYWcmMSkmJmcpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTtHZyhiKTticmVhaztjYXNlIDEwOkNmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TShiLnR5cGUpJiZOZShiKTticmVhaztkZWZhdWx0OnQoXCIxNTZcIil9Uz1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVMpcmV0dXJuIFM7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09XG5jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPVpnKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGxoKGEpe3ZhciBiPUFnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1raChhKSk7YWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbWgoYSxiKXtkaD90KFwiMjQzXCIpOnZvaWQgMDtUZigpO2RoPSEwO2FoLmN1cnJlbnREaXNwYXRjaGVyPSRnO3ZhciBjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoYyE9PVV8fGEhPT1UfHxudWxsPT09UylqaCgpLFQ9YSxVPWMsUz0kZShULmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVMmJiFuaCgpOylTPWxoKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz1saChTKX1jYXRjaChCKXtpZihBZj16Zj15Zj1udWxsLG51bGw9PT1TKWQ9ITAsV2coQik7ZWxzZXtudWxsPT09Uz90KFwiMjcxXCIpOnZvaWQgMDt2YXIgZT1TLGY9ZS5yZXR1cm47aWYobnVsbD09PWYpZD0hMCxXZyhCKTtlbHNle2E6e3ZhciBnPWEsaD1mLGs9ZSxsPUI7Zj1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBsJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbC50aGVuKXt2YXIgbT1sO2w9aDt2YXIgcj0tMSx3PS0xO2Rve2lmKDEzPT09bC50YWcpe3ZhciB5PWwuYWx0ZXJuYXRlO2lmKG51bGwhPT15JiYoeT15Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXkpKXt3PTEwKigxMDczNzQxODIyLXkudGltZWRPdXRBdCk7YnJlYWt9eT1sLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHkpaWYoMD49eSlyPTA7ZWxzZSBpZigtMT09PXJ8fHk8cilyPXl9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1oO2Rve2lmKHk9MTM9PT1sLnRhZyl5PXZvaWQgMD09PWwubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bC5tZW1vaXplZFN0YXRlO2lmKHkpe2g9bC51cGRhdGVRdWV1ZTtudWxsPT09aD9sLnVwZGF0ZVF1ZXVlPW5ldyBTZXQoW21dKTpoLmFkZChtKTtpZigwPT09KGwubW9kZSYxKSl7bC5lZmZlY3RUYWd8PTY0O2suZWZmZWN0VGFnJj0tMTk1NztcbjE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZj1uZigxMDczNzQxODIzKSxmLnRhZz0yLHBmKGssZikpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWcucGluZ0NhY2hlO251bGw9PT1rPyhrPWcucGluZ0NhY2hlPW5ldyBVZyxoPW5ldyBTZXQsay5zZXQobSxoKSk6KGg9ay5nZXQobSksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxrLnNldChtLGgpKSk7aC5oYXMoZil8fChoLmFkZChmKSxrPW9oLmJpbmQobnVsbCxnLG0sZiksbS50aGVuKGssaykpOy0xPT09cj9nPTEwNzM3NDE4MjM6KC0xPT09dyYmKHc9MTAqKDEwNzM3NDE4MjItamYoZyxmKSktNUUzKSxnPXcrcik7MDw9ZyYmZWg8ZyYmKGVoPWcpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9ZjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG1jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbm5jKGspKX1maD0hMDtsPXdmKGwsayk7Zz1oO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmcuZWZmZWN0VGFnfD0yMDQ4O2cuZXhwaXJhdGlvblRpbWU9ZjtmPVZnKGcsbCxmKTtxZihnLGYpO2JyZWFrIGE7Y2FzZSAxOmlmKG09bCxyPWcudHlwZSx3PWcuc3RhdGVOb2RlLDA9PT0oZy5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09WWd8fCFZZy5oYXModykpKSl7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5leHBpcmF0aW9uVGltZT1mO2Y9WGcoZyxtLGYpO3FmKGcsZik7YnJlYWsgYX19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyl9Uz1raChlKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO2RoPSExO0FmPXpmPXlmPWFoLmN1cnJlbnREaXNwYXRjaGVyPW51bGw7aWYoZClUPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtcbmVsc2UgaWYobnVsbCE9PVMpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2Q9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09ZD90KFwiMjgxXCIpOnZvaWQgMDtUPW51bGw7aWYoZmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxjfHwwIT09ZiYmZjxjfHwwIT09ZyYmZzxjKXtoZihhLGMpO3BoKGEsZCxjLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249YztiPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztwaChhLGQsYyxiLC0xKTtyZXR1cm59fWImJi0xIT09ZWg/KGhmKGEsYyksYj0xMCooMTA3Mzc0MTgyMi1qZihhLGMpKSxiPGVoJiYoZWg9YiksYj0xMCooMTA3Mzc0MTgyMi1SZigpKSxiPWVoLWIscGgoYSxkLGMsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPVxuYyxhLmZpbmlzaGVkV29yaz1kKX19ZnVuY3Rpb24gTWcoYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09WWd8fCFZZy5oYXMoZCkpKXthPXdmKGIsYSk7YT1YZyhjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtVZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT13ZihiLGEpO2E9VmcoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7VWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPXdmKGIsYSksYz1WZyhhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxVZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIFNmKGEsYil7MCE9PWNoP2E9Y2g6ZGg/YT1naD8xMDczNzQxODIzOlU6Yi5tb2RlJjE/KGE9cWg/MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpOjEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSksbnVsbCE9PVQmJmE9PT1VJiYtLWEpOmE9MTA3Mzc0MTgyMztxaCYmKDA9PT1yaHx8YTxyaCkmJihyaD1hKTtyZXR1cm4gYX1mdW5jdGlvbiBvaChhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1UJiZVPT09YylUPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7Z2YoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJnNoKGEsYyl9fVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1SZigpO2I9U2YoYixhKTthPXRoKGEsYik7bnVsbCE9PWEmJihmZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmc2goYSxiKSl9XG5mdW5jdGlvbiB0aChhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gVWYoYSxiKXthPXRoKGEsYik7bnVsbCE9PWEmJighZGgmJjAhPT1VJiZiPlUmJmpoKCksZmYoYSxiKSxkaCYmIWdoJiZUPT09YXx8c2goYSxhLmV4cGlyYXRpb25UaW1lKSx1aD52aCYmKHVoPTAsdChcIjE4NVwiKSkpfWZ1bmN0aW9uIHdoKGEsYixjLGQsZSl7dmFyIGY9Y2g7Y2g9MTA3Mzc0MTgyMzt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtjaD1mfX12YXIgeGg9bnVsbCxXPW51bGwseWg9MCx6aD12b2lkIDAsWD0hMSxBaD1udWxsLFk9MCxyaD0wLEJoPSExLENoPW51bGwsWj0hMSxEaD0hMSxxaD0hMSxFaD1udWxsLEZoPWJhLnVuc3RhYmxlX25vdygpLEdoPTEwNzM3NDE4MjItKEZoLzEwfDApLEhoPUdoLHZoPTUwLHVoPTAsSWg9bnVsbDtmdW5jdGlvbiBKaCgpe0doPTEwNzM3NDE4MjItKChiYS51bnN0YWJsZV9ub3coKS1GaCkvMTB8MCl9XG5mdW5jdGlvbiBLaChhLGIpe2lmKDAhPT15aCl7aWYoYjx5aClyZXR1cm47bnVsbCE9PXpoJiZiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayh6aCl9eWg9YjthPWJhLnVuc3RhYmxlX25vdygpLUZoO3poPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soTGgse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIHBoKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxuaCgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT1EZShNaC5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBNaChhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO0poKCk7SGg9R2g7TmgoYSxjKX1mdW5jdGlvbiBSZigpe2lmKFgpcmV0dXJuIEhoO09oKCk7aWYoMD09PVl8fDE9PT1ZKUpoKCksSGg9R2g7cmV0dXJuIEhofVxuZnVuY3Rpb24gc2goYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1XPyh4aD1XPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVz1XLm5leHRTY2hlZHVsZWRSb290PWEsVy5uZXh0U2NoZWR1bGVkUm9vdD14aCkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7WHx8KFo/RGgmJihBaD1hLFk9MTA3Mzc0MTgyMyxQaChhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9RaCgxMDczNzQxODIzLCExKTpLaChhLGIpKX1cbmZ1bmN0aW9uIE9oKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVcpZm9yKHZhciBjPVcsZD14aDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vz90KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7eGg9Vz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09eGgpeGg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFcubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vyl7Vz1jO1cubmV4dFNjaGVkdWxlZFJvb3Q9eGg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09VylicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fUFoPWI7WT1hfXZhciBSaD0hMTtmdW5jdGlvbiBuaCgpe3JldHVybiBSaD8hMDpiYS51bnN0YWJsZV9zaG91bGRZaWVsZCgpP1JoPSEwOiExfWZ1bmN0aW9uIExoKCl7dHJ5e2lmKCFuaCgpJiZudWxsIT09eGgpe0poKCk7dmFyIGE9eGg7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmR2g8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPUdoKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PXhoKX1RaCgwLCEwKX1maW5hbGx5e1JoPSExfX1cbmZ1bmN0aW9uIFFoKGEsYil7T2goKTtpZihiKWZvcihKaCgpLEhoPUdoO251bGwhPT1BaCYmMCE9PVkmJmE8PVkmJiEoUmgmJkdoPlkpOylQaChBaCxZLEdoPlkpLE9oKCksSmgoKSxIaD1HaDtlbHNlIGZvcig7bnVsbCE9PUFoJiYwIT09WSYmYTw9WTspUGgoQWgsWSwhMSksT2goKTtiJiYoeWg9MCx6aD1udWxsKTswIT09WSYmS2goQWgsWSk7dWg9MDtJaD1udWxsO2lmKG51bGwhPT1FaClmb3IoYT1FaCxFaD1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe0JofHwoQmg9ITAsQ2g9ZCl9fWlmKEJoKXRocm93IGE9Q2gsQ2g9bnVsbCxCaD0hMSxhO31mdW5jdGlvbiBOaChhLGIpe1g/dChcIjI1M1wiKTp2b2lkIDA7QWg9YTtZPWI7UGgoYSxiLCExKTtRaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIFBoKGEsYixjKXtYP3QoXCIyNDVcIik6dm9pZCAwO1g9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/U2goYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxFZShkKSksbWgoYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYobmgoKT9hLmZpbmlzaGVkV29yaz1kOlNoKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9TaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLEVlKGQpKSxtaChhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJlNoKGEsZCxiKSk7WD0hMX1cbmZ1bmN0aW9uIFNoKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PUVoP0VoPVtkXTpFaC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PUloP3VoKys6KEloPWEsdWg9MCk7Z2g9ZGg9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPWU+ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPVxuMCk6KGQ8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApLGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU+ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5kJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP2ZmKGEsZCk6ZDxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsZmYoYSxkKSk6ZD5lJiZmZihhLGQpKTtnZigwLGEpO2FoLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3plPUhkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmUpdmFyIGY9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGs9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2goZGIpe2Y9bnVsbDticmVhayBhfXZhciBsPTAsbT0tMSxyPS0xLHc9MCx5PTAsQj1lLFI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe0IhPT1mfHwwIT09aCYmMyE9PUIubm9kZVR5cGV8fChtPWwraCk7QiE9PWt8fDAhPT1nJiYzIT09Qi5ub2RlVHlwZXx8KHI9bCtnKTszPT09Qi5ub2RlVHlwZSYmKGwrPUIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PUIuZmlyc3RDaGlsZCkpYnJlYWs7Uj1CO0I9dn1mb3IoOzspe2lmKEI9PT1cbmUpYnJlYWsgYjtSPT09ZiYmKyt3PT09aCYmKG09bCk7Uj09PWsmJisreT09PWcmJihyPWwpO2lmKG51bGwhPT0odj1CLm5leHRTaWJsaW5nKSlicmVhaztCPVI7Uj1CLnBhcmVudE5vZGV9Qj12fWY9LTE9PT1tfHwtMT09PXI/bnVsbDp7c3RhcnQ6bSxlbmQ6cn19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7QWU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07SGQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIHE9Vi5hbHRlcm5hdGU7aD1WO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhayBhO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1xKXt2YXIgdT1xLm1lbW9pemVkUHJvcHMsQT1xLm1lbW9pemVkU3RhdGUsWWY9aC5zdGF0ZU5vZGUsVmg9WWYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PVxuaC50eXBlP3U6UChoLnR5cGUsdSksQSk7WWYuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Vmh9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtlPSEwLGY9ZGJ9ZSYmKG51bGw9PT1WP3QoXCIxNzhcIik6dm9pZCAwLE1nKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtxPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1WOyl7dmFyIHg9Vi5lZmZlY3RUYWc7eCYxNiYmcGUoVi5zdGF0ZU5vZGUsXCJcIik7aWYoeCYxMjgpe3ZhciBDPVYuYWx0ZXJuYXRlO2lmKG51bGwhPT1DKXt2YXIgcD1DLnJlZjtudWxsIT09cCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBwP3AobnVsbCk6cC5jdXJyZW50PW51bGwpfX1zd2l0Y2goeCYxNCl7Y2FzZSAyOlJnKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UmcoVik7XG5WLmVmZmVjdFRhZyY9LTM7U2coVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OlNnKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODpBPVY7UGcoQSk7QS5yZXR1cm49bnVsbDtBLmNoaWxkPW51bGw7QS5tZW1vaXplZFN0YXRlPW51bGw7QS51cGRhdGVRdWV1ZT1udWxsO3ZhciBHPUEuYWx0ZXJuYXRlO251bGwhPT1HJiYoRy5yZXR1cm49bnVsbCxHLmNoaWxkPW51bGwsRy5tZW1vaXplZFN0YXRlPW51bGwsRy51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19Y2F0Y2goZGIpe3E9ITAsdT1kYn1xJiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsTWcoVix1KSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9cD1BZTtDPVRkKCk7eD1wLmZvY3VzZWRFbGVtO3E9cC5zZWxlY3Rpb25SYW5nZTtpZihDIT09eCYmeCYmeC5vd25lckRvY3VtZW50JiZTZCh4Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHgpKXtudWxsIT09cSYmVWQoeCkmJihDPXEuc3RhcnQscD1xLmVuZCxcbnZvaWQgMD09PXAmJihwPUMpLFwic2VsZWN0aW9uU3RhcnRcImluIHg/KHguc2VsZWN0aW9uU3RhcnQ9Qyx4LnNlbGVjdGlvbkVuZD1NYXRoLm1pbihwLHgudmFsdWUubGVuZ3RoKSk6KHA9KEM9eC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkMuZGVmYXVsdFZpZXd8fHdpbmRvdyxwLmdldFNlbGVjdGlvbiYmKHA9cC5nZXRTZWxlY3Rpb24oKSx1PXgudGV4dENvbnRlbnQubGVuZ3RoLEc9TWF0aC5taW4ocS5zdGFydCx1KSxxPXZvaWQgMD09PXEuZW5kP0c6TWF0aC5taW4ocS5lbmQsdSksIXAuZXh0ZW5kJiZHPnEmJih1PXEscT1HLEc9dSksdT1SZCh4LEcpLEE9UmQoeCxxKSx1JiZBJiYoMSE9PXAucmFuZ2VDb3VudHx8cC5hbmNob3JOb2RlIT09dS5ub2RlfHxwLmFuY2hvck9mZnNldCE9PXUub2Zmc2V0fHxwLmZvY3VzTm9kZSE9PUEubm9kZXx8cC5mb2N1c09mZnNldCE9PUEub2Zmc2V0KSYmKEM9Qy5jcmVhdGVSYW5nZSgpLEMuc2V0U3RhcnQodS5ub2RlLHUub2Zmc2V0KSxwLnJlbW92ZUFsbFJhbmdlcygpLFxuRz5xPyhwLmFkZFJhbmdlKEMpLHAuZXh0ZW5kKEEubm9kZSxBLm9mZnNldCkpOihDLnNldEVuZChBLm5vZGUsQS5vZmZzZXQpLHAuYWRkUmFuZ2UoQykpKSkpKTtDPVtdO2ZvcihwPXg7cD1wLnBhcmVudE5vZGU7KTE9PT1wLm5vZGVUeXBlJiZDLnB1c2goe2VsZW1lbnQ6cCxsZWZ0OnAuc2Nyb2xsTGVmdCx0b3A6cC5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5mb2N1cyYmeC5mb2N1cygpO2Zvcih4PTA7eDxDLmxlbmd0aDt4KyspcD1DW3hdLHAuZWxlbWVudC5zY3JvbGxMZWZ0PXAubGVmdCxwLmVsZW1lbnQuc2Nyb2xsVG9wPXAudG9wfUFlPW51bGw7SGQ9ISF6ZTt6ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtkPSExO3g9dm9pZCAwO3RyeXtmb3IoQz1jO251bGwhPT1WOyl7dmFyIEZiPVYuZWZmZWN0VGFnO2lmKEZiJjM2KXt2YXIgR2I9Vi5hbHRlcm5hdGU7cD1WO0c9Qztzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6dmFyIEhjPXAuc3RhdGVOb2RlO2lmKHAuZWZmZWN0VGFnJjQpaWYobnVsbD09PUdiKUhjLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaWk9cC5lbGVtZW50VHlwZT09PXAudHlwZT9HYi5tZW1vaXplZFByb3BzOlAocC50eXBlLEdiLm1lbW9pemVkUHJvcHMpO0hjLmNvbXBvbmVudERpZFVwZGF0ZShpaSxHYi5tZW1vaXplZFN0YXRlLEhjLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgRGc9cC51cGRhdGVRdWV1ZTtudWxsIT09RGcmJnVmKHAsRGcsSGMsRyk7YnJlYWs7Y2FzZSAzOnZhciBFZz1wLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1FZyl7cT1udWxsO2lmKG51bGwhPT1wLmNoaWxkKXN3aXRjaChwLmNoaWxkLnRhZyl7Y2FzZSA1OnE9cC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOnE9cC5jaGlsZC5zdGF0ZU5vZGV9dWYocCxFZyxxLEcpfWJyZWFrO2Nhc2UgNTp2YXIgamk9cC5zdGF0ZU5vZGU7bnVsbD09PUdiJiZwLmVmZmVjdFRhZyZcbjQmJkJlKHAudHlwZSxwLm1lbW9pemVkUHJvcHMpJiZqaS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX1pZihGYiYxMjgpe3ZhciBJYz1WLnJlZjtpZihudWxsIT09SWMpe3ZhciBGZz1WLnN0YXRlTm9kZTtzd2l0Y2goVi50YWcpe2Nhc2UgNTp2YXIgY2U9Rmc7YnJlYWs7ZGVmYXVsdDpjZT1GZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgSWM/SWMoY2UpOkljLmN1cnJlbnQ9Y2V9fVY9Vi5uZXh0RWZmZWN0fX1jYXRjaChkYil7ZD0hMCx4PWRifWQmJihudWxsPT09Vj90KFwiMTc4XCIpOnZvaWQgMCxNZyhWLHgpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1kaD1naD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVGUmJlRlKGIuc3RhdGVOb2RlKTtGYj1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9Yj5GYj9iOkZiOzA9PT1iJiYoWWc9XG5udWxsKTthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1mdW5jdGlvbiBXZyhhKXtudWxsPT09QWg/dChcIjI0NlwiKTp2b2lkIDA7QWguZXhwaXJhdGlvblRpbWU9MDtCaHx8KEJoPSEwLENoPWEpfWZ1bmN0aW9uIFRoKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxYfHxRaCgxMDczNzQxODIzLCExKX19ZnVuY3Rpb24gVWgoYSxiKXtpZihaJiYhRGgpe0RoPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0RoPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBXaChhLGIsYyl7aWYocWgpcmV0dXJuIGEoYixjKTtafHxYfHwwPT09cmh8fChRaChyaCwhMSkscmg9MCk7dmFyIGQ9cWgsZT1aO1o9cWg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtxaD1kLChaPWUpfHxYfHxRaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1rZChjKSYmMT09PWMudGFnP3ZvaWQgMDp0KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE0oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKE0oaCkpe2M9UWUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9S2U7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xuVGYoKTtwZihmLGUpO1VmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gWWgoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UmYoKTtlPVNmKGYsZSk7cmV0dXJuIFhoKGEsYixjLGUsZCl9ZnVuY3Rpb24gWmgoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiAkaChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQ2I9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9TGEoZCk7ZT92b2lkIDA6dChcIjkwXCIpO1diKGQpO0NjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIGFpKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1SZigpKzUwMCkvMjV8MCkrMSk7Yj49YmgmJihiPWJoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPWJoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1haS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp0KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgYmk7WGgoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuYWkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuYWkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/dChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtOaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTthaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gYmkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1iaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuYmkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBjaShhLGIsYyl7Yj1OKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cbmNpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgYmk7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1loKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07Y2kucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IGJpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtZaChudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O2NpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBiaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WWgoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbmNpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBhaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIGRpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1LYj1UaDtMYj1XaDtNYj1mdW5jdGlvbigpe1h8fDA9PT1yaHx8KFFoKHJoLCExKSxyaD0wKX07XG5mdW5jdGlvbiBlaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGNpKGEsITEsYil9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2RpKGMpP3ZvaWQgMDp0KFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WmgoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1laShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1aaChmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19VWgoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFpoKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBnaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2RpKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiAkaChhLGIsbnVsbCxjKX1cbnZhciBraT17Y3JlYXRlUG9ydGFsOmdpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dChcIjE4OFwiKTp0KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP3QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIGZpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2RpKGEpP1xudm9pZCAwOnQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhVaChmdW5jdGlvbigpe2ZpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIGdpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpUaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6V2gsZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7WD90KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiB3aChhLGIpfWZpbmFsbHl7Wj1jLFFoKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpoaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9WjtaPSEwO3RyeXt3aChhKX1maW5hbGx5eyhaPWIpfHxYfHxRaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0phLFxuS2EsTGEsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHFhLFJhLGZ1bmN0aW9uKGEpe3phKGEsUWEpfSxJYixKYixKZCxFYV19fTtmdW5jdGlvbiBoaShhLGIpe2RpKGEpP3ZvaWQgMDp0KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgY2koYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9KGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFdlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi43LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciBsaT17ZGVmYXVsdDpraX0sbWk9bGkmJmtpfHxsaTttb2R1bGUuZXhwb3J0cz1taS5kZWZhdWx0fHxtaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTIuMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPW51bGwsZj0hMSxoPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWMuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWMsYj1jLm5leHQ7aWYoYz09PWIpYz1udWxsO2Vsc2V7dmFyIGQ9Yy5wcmV2aW91cztjPWQubmV4dD1iO2IucHJldmlvdXM9ZH1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2Q9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGU9aCxRPWw7aD1hO2w9Yjt0cnl7dmFyIGc9ZCgpfWZpbmFsbHl7aD1lLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZylpZihnPXtjYWxsYmFjazpnLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09YyljPWcubmV4dD1nLnByZXZpb3VzPWc7ZWxzZXtkPW51bGw7YT1jO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2Q9YTticmVha31hPWEubmV4dH13aGlsZShhIT09Yyk7bnVsbD09PWQ/ZD1jOmQ9PT1jJiYoYz1nLHAoKSk7Yj1kLnByZXZpb3VzO2IubmV4dD1kLnByZXZpb3VzPWc7Zy5uZXh0PWQ7Zy5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1jJiYxPT09Yy5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09Yz9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1mO2Y9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1jOyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihjLmV4cGlyYXRpb25UaW1lPD1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8PWQpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1jJiYhdygpKX19ZmluYWxseXttPSExLGY9YixudWxsIT09Yz9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCksZT0hMTtpZigwPj1QLWQpaWYoLTEhPT1iJiZiPD1kKWU9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShlKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgZD1oLGU9aztoPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7aD1kLGs9ZSx2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBkPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1kK2IudGltZW91dDtlbHNlIHN3aXRjaChoKXtjYXNlIDE6Yj1kKy0xO2JyZWFrO2Nhc2UgMjpiPWQrMjUwO2JyZWFrO2Nhc2UgNTpiPWQrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1kKzFFNDticmVhaztkZWZhdWx0OmI9ZCs1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmgsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWMpYz1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2Q9bnVsbDt2YXIgZT1jO2Rve2lmKGUuZXhwaXJhdGlvblRpbWU+Yil7ZD1lO2JyZWFrfWU9ZS5uZXh0fXdoaWxlKGUhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWEscCgpKTtcbmI9ZC5wcmV2aW91cztiLm5leHQ9ZC5wcmV2aW91cz1hO2EubmV4dD1kO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWM9bnVsbDtlbHNle2E9PT1jJiYoYz1iKTt2YXIgZD1hLnByZXZpb3VzO2QubmV4dD1iO2IucHJldmlvdXM9ZH1hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9aDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1oLGU9aztoPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtoPWQsaz1lLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGh9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFmJiYobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1jJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gY307XG4iLCIvKiFcbiAgKiBCb290c3RyYXAgdjQuMS4zIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTggVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgncG9wcGVyLmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdqcXVlcnknLCAncG9wcGVyLmpzJ10sIGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKGdsb2JhbC5ib290c3RyYXAgPSB7fSksZ2xvYmFsLmpRdWVyeSxnbG9iYWwuUG9wcGVyKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywkLFBvcHBlcikgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcbiAgUG9wcGVyID0gUG9wcGVyICYmIFBvcHBlci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gUG9wcGVyWydkZWZhdWx0J10gOiBQb3BwZXI7XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogdXRpbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVXRpbCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XG4gICAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xuICAgIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuICAgIGZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJCQkMShldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgJCQkMSh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgICAkJCQxLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xuICAgICAgJCQkMS5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgIHZhciBVdGlsID0ge1xuICAgICAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuICAgICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcbiAgICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgIH0sXG4gICAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgICAgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcblxuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAkJCQxKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xuICAgICAgICB2YXIgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbik7IC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcblxuICAgICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuXG5cbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF07XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbiAgICAgIH0sXG4gICAgICByZWZsb3c6IGZ1bmN0aW9uIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgIH0sXG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICAgICAkJCQxKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpO1xuICAgICAgfSxcbiAgICAgIC8vIFRPRE86IFJlbW92ZSBpbiB2NVxuICAgICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKFRSQU5TSVRJT05fRU5EKTtcbiAgICAgIH0sXG4gICAgICBpc0VsZW1lbnQ6IGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZTtcbiAgICAgIH0sXG4gICAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdUeXBlcywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG4gICAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgVXRpbC5pc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgKFwiT3B0aW9uIFxcXCJcIiArIHByb3BlcnR5ICsgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiICsgdmFsdWVUeXBlICsgXCJcXFwiIFwiKSArIChcImJ1dCBleHBlY3RlZCB0eXBlIFxcXCJcIiArIGV4cGVjdGVkVHlwZXMgKyBcIlxcXCIuXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCk7XG4gICAgcmV0dXJuIFV0aWw7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogYWxlcnQuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIEFsZXJ0ID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5hbGVydCc7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gICAgfTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICBDTE9TRTogXCJjbG9zZVwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xPU0VEOiBcImNsb3NlZFwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgICAgRkFERTogJ2ZhZGUnLFxuICAgICAgU0hPVzogJ3Nob3cnXG4gICAgICAvKipcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKi9cblxuICAgIH07XG5cbiAgICB2YXIgQWxlcnQgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8uY2xvc2UgPSBmdW5jdGlvbiBjbG9zZShlbGVtZW50KSB7XG4gICAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChjdXN0b21FdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB2YXIgcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgIHBhcmVudCA9ICQkJDEoZWxlbWVudCkuY2xvc2VzdChcIi5cIiArIENsYXNzTmFtZS5BTEVSVClbMF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl90cmlnZ2VyQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciBjbG9zZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5DTE9TRSk7XG4gICAgICAgICQkJDEoZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGNsb3NlRXZlbnQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3JlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgJCQkMShlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCEkJCQxKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICQkJDEoZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9kZXN0cm95RWxlbWVudCA9IGZ1bmN0aW9uIF9kZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICQkJDEoZWxlbWVudCkuZGV0YWNoKCkudHJpZ2dlcihFdmVudC5DTE9TRUQpLnJlbW92ZSgpO1xuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciAkZWxlbWVudCA9ICQkJDEodGhpcyk7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKTtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgQWxlcnQuX2hhbmRsZURpc21pc3MgPSBmdW5jdGlvbiBfaGFuZGxlRGlzbWlzcyhhbGVydEluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEFsZXJ0O1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG5cbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFsZXJ0O1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGJ1dHRvbi5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdidXR0b24nO1xuICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuYnV0dG9uJztcbiAgICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gICAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgICBCVVRUT046ICdidG4nLFxuICAgICAgRk9DVVM6ICdmb2N1cydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERBVEFfVE9HR0xFX0NBUlJPVDogJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLFxuICAgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyxcbiAgICAgIElOUFVUOiAnaW5wdXQnLFxuICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgICBCVVRUT046ICcuYnRuJ1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6IFwiZm9jdXNcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSArIFwiIFwiICsgKFwiYmx1clwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZKVxuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIEJ1dHRvbiA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIEJ1dHRvbihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgICAgIHZhciBhZGRBcmlhUHJlc3NlZCA9IHRydWU7XG4gICAgICAgIHZhciByb290RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cbiAgICAgICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKTtcblxuICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFKTtcblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICAkJCQxKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IEJ1dHRvbih0aGlzKTtcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQnV0dG9uO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG5cbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICBpZiAoISQkJDEoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgICBidXR0b24gPSAkJCQxKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pO1xuICAgICAgfVxuXG4gICAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEoYnV0dG9uKSwgJ3RvZ2dsZScpO1xuICAgIH0pLm9uKEV2ZW50LkZPQ1VTX0JMVVJfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgYnV0dG9uID0gJCQkMShldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKVswXTtcbiAgICAgICQkJDEoYnV0dG9uKS50b2dnbGVDbGFzcyhDbGFzc05hbWUuRk9DVVMsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZXZlbnQudHlwZSkpO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gICAgJCQkMS5mbltOQU1FXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBCdXR0b247XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQnV0dG9uO1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGNhcm91c2VsLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnY2Fyb3VzZWwnO1xuICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuY2Fyb3VzZWwnO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG5cbiAgICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcblxuICAgIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuICAgIHZhciBEZWZhdWx0ID0ge1xuICAgICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICAgIHNsaWRlOiBmYWxzZSxcbiAgICAgIHBhdXNlOiAnaG92ZXInLFxuICAgICAgd3JhcDogdHJ1ZVxuICAgIH07XG4gICAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAgICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLFxuICAgICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICAgIHdyYXA6ICdib29sZWFuJ1xuICAgIH07XG4gICAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICAgIE5FWFQ6ICduZXh0JyxcbiAgICAgIFBSRVY6ICdwcmV2JyxcbiAgICAgIExFRlQ6ICdsZWZ0JyxcbiAgICAgIFJJR0hUOiAncmlnaHQnXG4gICAgfTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICBTTElERTogXCJzbGlkZVwiICsgRVZFTlRfS0VZLFxuICAgICAgU0xJRDogXCJzbGlkXCIgKyBFVkVOVF9LRVksXG4gICAgICBLRVlET1dOOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVksXG4gICAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZLFxuICAgICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gICAgfTtcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgICAgQ0FST1VTRUw6ICdjYXJvdXNlbCcsXG4gICAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgICAgU0xJREU6ICdzbGlkZScsXG4gICAgICBSSUdIVDogJ2Nhcm91c2VsLWl0ZW0tcmlnaHQnLFxuICAgICAgTEVGVDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXG4gICAgICBORVhUOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICAgIFBSRVY6ICdjYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgICAgSVRFTTogJ2Nhcm91c2VsLWl0ZW0nXG4gICAgfTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICAgIElURU06ICcuY2Fyb3VzZWwtaXRlbScsXG4gICAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICAgIElORElDQVRPUlM6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgICBEQVRBX1NMSURFOiAnW2RhdGEtc2xpZGVdLCBbZGF0YS1zbGlkZS10b10nLFxuICAgICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIENhcm91c2VsID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSAkJCQxKGVsZW1lbnQpWzBdO1xuICAgICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTkRJQ0FUT1JTKTtcblxuICAgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5pcygnOnZpc2libGUnKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmNzcygndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykge1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLlBSRVYpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5ORVhUX1BSRVYpKSB7XG4gICAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKTtcblxuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuU0xJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uLCB0aGlzLl9pdGVtc1tpbmRleF0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9rZXlkb3duKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wYXVzZShldmVudCk7XG4gICAgICAgICAgfSkub24oRXZlbnQuTU9VU0VMRUFWRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5wYXVzZSgpO1xuXG4gICAgICAgICAgICAgIGlmIChfdGhpczIudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX3RoaXMyLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7XG4gICAgICAgICAgICAgIH0sIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyBfdGhpczIuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSkgOiBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgICAgICB2YXIgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVjtcblxuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7XG5cbiAgICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxO1xuICAgICAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMSA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdIDogdGhpcy5faXRlbXNbaXRlbUluZGV4XTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSkpO1xuXG4gICAgICAgIHZhciBzbGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElERSwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICAgIHRvOiB0YXJnZXRJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpO1xuICAgICAgICByZXR1cm4gc2xpZGVFdmVudDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFKSk7XG4gICAgICAgICAgJCQkMShpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTtcblxuICAgICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgICAkJCQxKG5leHRJbmRpY2F0b3IpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pO1xuXG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZTtcbiAgICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lO1xuICAgICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG4gICAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVDtcbiAgICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUO1xuICAgICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUO1xuICAgICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG4gICAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLlJJR0hUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQkJDEobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNsaWRlRXZlbnQgPSB0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChuZXh0RWxlbWVudCwgZXZlbnREaXJlY3Rpb25OYW1lKTtcblxuICAgICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KTtcblxuICAgICAgICB2YXIgc2xpZEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElELCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TTElERSkpIHtcbiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAgICQkJDEobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSArIFwiIFwiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAgICAgX3RoaXMzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJCQkMShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsICQkJDEodGhpcykuZGF0YSgpKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIF9jb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgYWN0aW9uICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgICAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXQgPSAkJCQxKHNlbGVjdG9yKVswXTtcblxuICAgICAgICBpZiAoIXRhcmdldCB8fCAhJCQkMSh0YXJnZXQpLmhhc0NsYXNzKENsYXNzTmFtZS5DQVJPVVNFTCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgJCQkMSh0YXJnZXQpLmRhdGEoKSwgJCQkMSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICAgIHZhciBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGUtdG8nKTtcblxuICAgICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAgICQkJDEodGFyZ2V0KS5kYXRhKERBVEFfS0VZKS50byhzbGlkZUluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBDYXJvdXNlbDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcbiAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhcm91c2VscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1JJREUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgJGNhcm91c2VsID0gJCQkMShjYXJvdXNlbHNbaV0pO1xuXG4gICAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gICAgJCQkMS5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENhcm91c2VsO1xuXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogY29sbGFwc2UuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5jb2xsYXBzZSc7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBEZWZhdWx0ID0ge1xuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgcGFyZW50OiAnJ1xuICAgIH07XG4gICAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgICAgdG9nZ2xlOiAnYm9vbGVhbicsXG4gICAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gICAgfTtcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgICAgU0hPVzogJ3Nob3cnLFxuICAgICAgQ09MTEFQU0U6ICdjb2xsYXBzZScsXG4gICAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXG4gICAgICBDT0xMQVBTRUQ6ICdjb2xsYXBzZWQnXG4gICAgfTtcbiAgICB2YXIgRGltZW5zaW9uID0ge1xuICAgICAgV0lEVEg6ICd3aWR0aCcsXG4gICAgICBIRUlHSFQ6ICdoZWlnaHQnXG4gICAgfTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG4gICAgICAvKipcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKi9cblxuICAgIH07XG5cbiAgICB2YXIgQ29sbGFwc2UgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBDb2xsYXBzZShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gJCQkMS5tYWtlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtocmVmPVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXSxcIiArIChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXRhcmdldD1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl1cIikpKTtcbiAgICAgICAgdmFyIHRvZ2dsZUxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBlbGVtID0gdG9nZ2xlTGlzdFtpXTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSk7XG4gICAgICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKS5maWx0ZXIoZnVuY3Rpb24gKGZvdW5kRWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvdW5kRWxlbSA9PT0gZWxlbWVudDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGw7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKCQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGl2ZXM7XG4gICAgICAgIHZhciBhY3RpdmVzRGF0YTtcblxuICAgICAgICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFUykpLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09PSBfdGhpcy5fY29uZmlnLnBhcmVudDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgICBhY3RpdmVzRGF0YSA9ICQkJDEoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1cpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvciksICdoaWRlJyk7XG5cbiAgICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgICAkJCQxKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVksIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAkJCQxKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICAgX3RoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgICAgX3RoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgICAkJCQxKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1dOKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICAgICAgdmFyIHNjcm9sbFNpemUgPSBcInNjcm9sbFwiICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcblxuICAgICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl0gKyBcInB4XCI7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgdmFyIHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciAkZWxlbSA9ICQkJDEoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkpO1xuXG4gICAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICAgICAgJCQkMSh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIF90aGlzMi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAgICQkJDEoX3RoaXMyLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRUcmFuc2l0aW9uaW5nID0gZnVuY3Rpb24gc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgICB2YXIgaGFzV2lkdGggPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKERpbWVuc2lvbi5XSURUSCk7XG4gICAgICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFBhcmVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnQoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KSkge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQ7IC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudFswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCI7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgICAgJCQkMShjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICAgIF90aGlzMy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSwgW2VsZW1lbnRdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGlzT3BlbiA9ICQkJDEoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQkJDEodHJpZ2dlckFycmF5KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VELCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xuICAgICAgfTtcblxuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciAkdGhpcyA9ICQkJDEodGhpcyk7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgJHRoaXMuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQ29sbGFwc2U7XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgdmFyICR0cmlnZ2VyID0gJCQkMSh0aGlzKTtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgICAgIHZhciBzZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgICQkJDEoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0YXJnZXQgPSAkJCQxKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0YXJnZXQuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCR0YXJnZXQsIGNvbmZpZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDb2xsYXBzZTtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGRyb3Bkb3duLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnZHJvcGRvd24nO1xuICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gICAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5XG5cbiAgICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5cbiAgICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcblxuICAgIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXlcblxuICAgIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcblxuICAgIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArIFwifFwiICsgQVJST1dfRE9XTl9LRVlDT0RFICsgXCJ8XCIgKyBFU0NBUEVfS0VZQ09ERSk7XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICAgIEtFWURPV05fREFUQV9BUEk6IFwia2V5ZG93blwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgICAgS0VZVVBfREFUQV9BUEk6IFwia2V5dXBcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgICAgU0hPVzogJ3Nob3cnLFxuICAgICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICAgIERST1BSSUdIVDogJ2Ryb3ByaWdodCcsXG4gICAgICBEUk9QTEVGVDogJ2Ryb3BsZWZ0JyxcbiAgICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuICAgICAgTUVOVUxFRlQ6ICdkcm9wZG93bi1tZW51LWxlZnQnLFxuICAgICAgUE9TSVRJT05fU1RBVElDOiAncG9zaXRpb24tc3RhdGljJ1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gICAgICBGT1JNX0NISUxEOiAnLmRyb3Bkb3duIGZvcm0nLFxuICAgICAgTUVOVTogJy5kcm9wZG93bi1tZW51JyxcbiAgICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG4gICAgICBWSVNJQkxFX0lURU1TOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG4gICAgfTtcbiAgICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICAgIFRPUDogJ3RvcC1zdGFydCcsXG4gICAgICBUT1BFTkQ6ICd0b3AtZW5kJyxcbiAgICAgIEJPVFRPTTogJ2JvdHRvbS1zdGFydCcsXG4gICAgICBCT1RUT01FTkQ6ICdib3R0b20tZW5kJyxcbiAgICAgIFJJR0hUOiAncmlnaHQtc3RhcnQnLFxuICAgICAgUklHSFRFTkQ6ICdyaWdodC1lbmQnLFxuICAgICAgTEVGVDogJ2xlZnQtc3RhcnQnLFxuICAgICAgTEVGVEVORDogJ2xlZnQtZW5kJ1xuICAgIH07XG4gICAgdmFyIERlZmF1bHQgPSB7XG4gICAgICBvZmZzZXQ6IDAsXG4gICAgICBmbGlwOiB0cnVlLFxuICAgICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnLFxuICAgICAgcmVmZXJlbmNlOiAndG9nZ2xlJyxcbiAgICAgIGRpc3BsYXk6ICdkeW5hbWljJ1xuICAgIH07XG4gICAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICAgIGZsaXA6ICdib29sZWFuJyxcbiAgICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgICByZWZlcmVuY2U6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICAgIGRpc3BsYXk6ICdzdHJpbmcnXG4gICAgICAvKipcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKi9cblxuICAgIH07XG5cbiAgICB2YXIgRHJvcGRvd24gPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBEcm9wZG93bihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAgIHZhciBpc0FjdGl2ZSA9ICQkJDEodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgICB9O1xuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgJCQkMShwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIERpc2FibGUgdG90YWxseSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxuXG5cbiAgICAgICAgaWYgKCF0aGlzLl9pbk5hdmJhcikge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuXG4gICAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdwYXJlbnQnKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlOyAvLyBDaGVjayBpZiBpdCdzIGpRdWVyeSBlbGVtZW50XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yNDI1MVxuXG5cbiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICAgJCQkMShwYXJlbnQpLmFkZENsYXNzKENsYXNzTmFtZS5QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpO1xuICAgICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICQkJDEocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICAgICQkJDEodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgICAkJCQxKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpLnRyaWdnZXIoJCQkMS5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDSywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIF90aGlzLnRvZ2dsZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0TWVudUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWVudSkge1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21lbnU7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICAgIHZhciAkcGFyZW50RHJvcGRvd24gPSAkJCQxKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxuXG4gICAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcblxuICAgICAgICAgIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QUklHSFQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5SSUdIVDtcbiAgICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BMRUZUKSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVDtcbiAgICAgICAgfSBlbHNlIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT01FTkQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhY2VtZW50O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgICByZXR1cm4gJCQkMSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0UG9wcGVyQ29uZmlnID0gZnVuY3Rpb24gX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG9mZnNldENvbmYgPSB7fTtcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5vZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvZmZzZXRDb25mLmZuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge30pO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXRDb25mLm9mZnNldCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldENvbmYsXG4gICAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3BwZXJDb25maWc7XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LndoaWNoID09PSBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvZ2dsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XG5cbiAgICAgICAgICB2YXIgY29udGV4dCA9ICQkJDEodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgICAgaWYgKCEkJCQxKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQkJDEuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAkJCQxKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgICAgICQkJDEocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5cblxuICAgICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxuICAgICAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgPyBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgJiYgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHwgJCQkMShldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQkJDEodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlICYmIChldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IFNQQUNFX0tFWUNPREUpIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKTtcbiAgICAgICAgICAgICQkJDEodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQkJDEodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlbXMgPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlZJU0lCTEVfSVRFTVMpKTtcblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpO1xuXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgICAvLyBVcFxuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAvLyBEb3duXG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcbiAgICAgIH07XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gRHJvcGRvd247XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5NRU5VLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSArIFwiIFwiICsgRXZlbnQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0pLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5GT1JNX0NISUxELCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCQsIFBvcHBlcik7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogbW9kYWwuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdtb2RhbCc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5tb2RhbCc7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgICBmb2N1czogdHJ1ZSxcbiAgICAgIHNob3c6IHRydWVcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICAgIHNob3c6ICdib29sZWFuJ1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIFJFU0laRTogXCJyZXNpemVcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RJU01JU1M6IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgS0VZRE9XTl9ESVNNSVNTOiBcImtleWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VVUF9ESVNNSVNTOiBcIm1vdXNldXAuZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VET1dOX0RJU01JU1M6IFwibW91c2Vkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICAgIEZBREU6ICdmYWRlJyxcbiAgICAgIFNIT1c6ICdzaG93J1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcsXG4gICAgICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJ1xuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIE1vZGFsID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fZGlhbG9nID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRJQUxPRyk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgICB9KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcblxuICAgICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBTZWxlY3Rvci5EQVRBX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQkJDEodGhpcy5fZGlhbG9nKS5vbihFdmVudC5NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyhfdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAgICQkJDEoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpO1xuICAgICAgICAkJCQxKHRoaXMuX2RpYWxvZykub2ZmKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTKTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5faGlkZU1vZGFsKGV2ZW50KTtcbiAgICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgICQkJDEod2luZG93LCBkb2N1bWVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fYmFja2Ryb3ApLm9mZihFVkVOVF9LRVkpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGlhbG9nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBudWxsO1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2hvd0VsZW1lbnQgPSBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAgICQkJDEoX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgJCQkMShkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgICAub24oRXZlbnQuRk9DVVNJTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM0Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJCQkMShfdGhpczQuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXM0Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2V0RXNjYXBlRXZlbnQgPSBmdW5jdGlvbiBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICBfdGhpczUuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuaGFuZGxlVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJCQxKHdpbmRvdykub2ZmKEV2ZW50LlJFU0laRSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcbiAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuT1BFTik7XG5cbiAgICAgICAgICBfdGhpczcuX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICAgIF90aGlzNy5fcmVzZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICAgICQkJDEoX3RoaXM3Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uIF9yZW1vdmVCYWNrZHJvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3Nob3dCYWNrZHJvcCA9IGZ1bmN0aW9uIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGFuaW1hdGUgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSA/IENsYXNzTmFtZS5GQURFIDogJyc7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1A7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChhbmltYXRlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKF90aGlzOC5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgICAgICBfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF90aGlzOC5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgICBfdGhpczguX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzOC5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWFuaW1hdGUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiBjYWxsYmFja1JlbW92ZSgpIHtcbiAgICAgICAgICAgIF90aGlzOC5fcmVtb3ZlQmFja2Ryb3AoKTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICAgdmFyIF9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO1xuXG4gICAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKF9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAgIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgICAgIF9wcm90by5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgICAgdmFyIGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgICBpZiAoIXRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgICAgIHZhciByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICAgICB2YXIgc3RpY2t5Q29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkpOyAvLyBBZGp1c3QgZml4ZWQgY29udGVudCBwYWRkaW5nXG5cbiAgICAgICAgICAkJCQxKGZpeGVkQ29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczkuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgICB9KTsgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuXG4gICAgICAgICAgJCQkMShzdGlja3lDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGFjdHVhbE1hcmdpbiA9IGVsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQ7XG4gICAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQkJDEoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAgICQkJDEoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JywgYWN0dWFsTWFyZ2luKS5jc3MoJ21hcmdpbi1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZE1hcmdpbikgLSBfdGhpczkuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgICB9KTsgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuXG4gICAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkJCQxKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3Jlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3Jlc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICAgJCQkMShmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkJCQxKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJyc7XG4gICAgICAgIH0pOyAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50XG5cbiAgICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIgKyBTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkpO1xuICAgICAgICAkJCQxKGVsZW1lbnRzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBtYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXJnaW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pOyAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuXG4gICAgICAgIHZhciBwYWRkaW5nID0gJCQkMShkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJyc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgICAvLyB0aHggZC53YWxzaFxuICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCAkJCQxKHRoaXMpLmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5zaG93KSB7XG4gICAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIE1vZGFsO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG5cbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgdGFyZ2V0O1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSAkJCQxKHRhcmdldCkuZGF0YShEQVRBX0tFWSkgPyAndG9nZ2xlJyA6IF9vYmplY3RTcHJlYWQoe30sICQkJDEodGFyZ2V0KS5kYXRhKCksICQkJDEodGhpcykuZGF0YSgpKTtcblxuICAgICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciAkdGFyZ2V0ID0gJCQkMSh0YXJnZXQpLm9uZShFdmVudC5TSE9XLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJHRhcmdldC5vbmUoRXZlbnQuSElEREVOLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCQkJDEoX3RoaXMxMCkuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgIF90aGlzMTAuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRhcmdldCksIGNvbmZpZywgdGhpcyk7XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgICAkJCQxLmZuW05BTUVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgfTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgkKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiB0b29sdGlwLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICd0b29sdGlwJztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7XG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLnRvb2x0aXAnO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG4gICAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG4gICAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gICAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgICB0aXRsZTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLFxuICAgICAgdHJpZ2dlcjogJ3N0cmluZycsXG4gICAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgICBodG1sOiAnYm9vbGVhbicsXG4gICAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmcpJyxcbiAgICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gICAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgICB9O1xuICAgIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgICAgQVVUTzogJ2F1dG8nLFxuICAgICAgVE9QOiAndG9wJyxcbiAgICAgIFJJR0hUOiAncmlnaHQnLFxuICAgICAgQk9UVE9NOiAnYm90dG9tJyxcbiAgICAgIExFRlQ6ICdsZWZ0J1xuICAgIH07XG4gICAgdmFyIERlZmF1bHQgPSB7XG4gICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgaHRtbDogZmFsc2UsXG4gICAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnZmxpcCcsXG4gICAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCdcbiAgICB9O1xuICAgIHZhciBIb3ZlclN0YXRlID0ge1xuICAgICAgU0hPVzogJ3Nob3cnLFxuICAgICAgT1VUOiAnb3V0J1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBGQURFOiAnZmFkZScsXG4gICAgICBTSE9XOiAnc2hvdydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIFRPT0xUSVA6ICcudG9vbHRpcCcsXG4gICAgICBUT09MVElQX0lOTkVSOiAnLnRvb2x0aXAtaW5uZXInLFxuICAgICAgQVJST1c6ICcuYXJyb3cnXG4gICAgfTtcbiAgICB2YXIgVHJpZ2dlciA9IHtcbiAgICAgIEhPVkVSOiAnaG92ZXInLFxuICAgICAgRk9DVVM6ICdmb2N1cycsXG4gICAgICBDTElDSzogJ2NsaWNrJyxcbiAgICAgIE1BTlVBTDogJ21hbnVhbCdcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBUb29sdGlwID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgICAgICB9IC8vIHByaXZhdGVcblxuXG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuICAgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fTtcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsgLy8gUHJvdGVjdGVkXG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xuXG4gICAgICAvLyBQdWJsaWNcbiAgICAgIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgICAgICB2YXIgY29udGV4dCA9ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljaztcblxuICAgICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkub2ZmKHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKTtcbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcpO1xuXG4gICAgICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgICAgICQkJDEodGhpcy50aXApLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgICAgdGhpcy50aXAgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG93RXZlbnQgPSAkJCQxLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAgICQkJDEodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG4gICAgICAgICAgdmFyIGlzSW5UaGVEb20gPSAkJCQxLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5lbGVtZW50KTtcblxuICAgICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgICAgdmFyIHRpcElkID0gVXRpbC5nZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcbiAgICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICAgIHRoaXMuc2V0Q29udGVudCgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgJCQkMSh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnBsYWNlbWVudDtcblxuICAgICAgICAgIHZhciBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpO1xuXG4gICAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogJCQkMShkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpO1xuICAgICAgICAgICQkJDEodGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgICAgICAgaWYgKCEkJCQxLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy50aXApKSB7XG4gICAgICAgICAgICAkJCQxKHRpcCkuYXBwZW5kVG8oY29udGFpbmVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcbiAgICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKHRoaXMuZWxlbWVudCwgdGlwLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yLkFSUk9XXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLmNvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJCQkMSh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9maXhUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IF90aGlzLl9ob3ZlclN0YXRlO1xuICAgICAgICAgICAgX3RoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgJCQkMShfdGhpcy5lbGVtZW50KS50cmlnZ2VyKF90aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcblxuICAgICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgICAgICBfdGhpcy5fbGVhdmUobnVsbCwgX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoJCQkMSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLnRpcCk7XG4gICAgICAgICAgICAkJCQxKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO1xuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChfdGhpczIuX2hvdmVyU3RhdGUgIT09IEhvdmVyU3RhdGUuU0hPVyAmJiB0aXAucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGlwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuX2NsZWFuVGlwQ2xhc3MoKTtcblxuICAgICAgICAgIF90aGlzMi5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXG4gICAgICAgICAgJCQkMShfdGhpczIuZWxlbWVudCkudHJpZ2dlcihfdGhpczIuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKTtcblxuICAgICAgICAgIGlmIChfdGhpczIuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMyLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5DTElDS10gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkZPQ1VTXSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCQkJDEodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcCk7XG4gICAgICAgICAgJCQkMSh0aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBQcm90ZWN0ZWRcblxuXG4gICAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkJCQxKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJCQkMSh0aXAucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5UT09MVElQX0lOTkVSKSksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArIFwiIFwiICsgQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNldEVsZW1lbnRDb250ZW50ID0gZnVuY3Rpb24gc2V0RWxlbWVudENvbnRlbnQoJGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcgJiYgKGNvbnRlbnQubm9kZVR5cGUgfHwgY29udGVudC5qcXVlcnkpKSB7XG4gICAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgICAgIGlmICghJCQkMShjb250ZW50KS5wYXJlbnQoKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRlbGVtZW50LnRleHQoJCQkMShjb250ZW50KS50ZXh0KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbWVudFtodG1sID8gJ2h0bWwnIDogJ3RleHQnXShjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldFRpdGxlID0gZnVuY3Rpb24gZ2V0VGl0bGUoKSB7XG4gICAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgICAgdGl0bGUgPSB0eXBlb2YgdGhpcy5jb25maWcudGl0bGUgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy50aXRsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLmNvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJyk7XG4gICAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgJCQkMShfdGhpczMuZWxlbWVudCkub24oX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLCBfdGhpczMuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUcmlnZ2VyLk1BTlVBTCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtcbiAgICAgICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLm9uKGV2ZW50SW4sIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9lbnRlcihldmVudCk7XG4gICAgICAgICAgICB9KS5vbihldmVudE91dCwgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMuX2xlYXZlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5oaWRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgICAgIHRoaXMuY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9maXhUaXRsZSA9IGZ1bmN0aW9uIF9maXhUaXRsZSgpIHtcbiAgICAgICAgdmFyIHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgdGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsICcnKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9lbnRlciA9IGZ1bmN0aW9uIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQkJDEoY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblxuICAgICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICAgICAgY29udGV4dC5zaG93KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2xlYXZlID0gZnVuY3Rpb24gX2xlYXZlKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVDtcblxuICAgICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKSB7XG4gICAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgICBmb3IgKHZhciB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVHJpZ2dlclt0cmlnZ2VyXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQkJDEodGhpcy5lbGVtZW50KS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuY29uZmlnW2tleV0pIHtcbiAgICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cbiAgICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCkge1xuICAgICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgICAgICB2YXIgcG9wcGVySW5zdGFuY2UgPSBwb3BwZXJEYXRhLmluc3RhbmNlO1xuICAgICAgICB0aGlzLnRpcCA9IHBvcHBlckluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChwb3BwZXJEYXRhLnBsYWNlbWVudCkpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9maXhUcmFuc2l0aW9uID0gZnVuY3Rpb24gX2ZpeFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBFdmVudDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gVG9vbHRpcDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEuZm5bTkFNRV0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oJCwgUG9wcGVyKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBwb3BvdmVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdwb3BvdmVyJztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7XG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLnBvcG92ZXInO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG4gICAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG5cbiAgICB2YXIgRGVmYXVsdCA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nXG4gICAgfSk7XG5cbiAgICB2YXIgRGVmYXVsdFR5cGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgICB9KTtcblxuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBGQURFOiAnZmFkZScsXG4gICAgICBTSE9XOiAnc2hvdydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIFRJVExFOiAnLnBvcG92ZXItaGVhZGVyJyxcbiAgICAgIENPTlRFTlQ6ICcucG9wb3Zlci1ib2R5J1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBQb3BvdmVyID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShQb3BvdmVyLCBfVG9vbHRpcCk7XG5cbiAgICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICAgIHJldHVybiBfVG9vbHRpcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBQb3BvdmVyLnByb3RvdHlwZTtcblxuICAgICAgLy8gT3ZlcnJpZGVzXG4gICAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAgICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTsgLy8gV2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuXG4gICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcblxuICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb250ZW50ID0gY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgY29udGVudCk7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldENvbnRlbnQgPSBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cbiAgICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFBvcG92ZXIsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIC8vIEdldHRlcnNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBQb3BvdmVyO1xuICAgIH0oVG9vbHRpcCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogc2Nyb2xsc3B5LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBTY3JvbGxTcHkgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENvbnN0YW50c1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIHZhciBOQU1FID0gJ3Njcm9sbHNweSc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIG9mZnNldDogMTAsXG4gICAgICBtZXRob2Q6ICdhdXRvJyxcbiAgICAgIHRhcmdldDogJydcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIG9mZnNldDogJ251bWJlcicsXG4gICAgICBtZXRob2Q6ICdzdHJpbmcnLFxuICAgICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgICB9O1xuICAgIHZhciBFdmVudCA9IHtcbiAgICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBTQ1JPTEw6IFwic2Nyb2xsXCIgKyBFVkVOVF9LRVksXG4gICAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICAgIEFDVElWRTogJ2FjdGl2ZSdcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERBVEFfU1BZOiAnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxcbiAgICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgICBOQVZfTElOS1M6ICcubmF2LWxpbmsnLFxuICAgICAgTkFWX0lURU1TOiAnLm5hdi1pdGVtJyxcbiAgICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcbiAgICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgICB9O1xuICAgIHZhciBPZmZzZXRNZXRob2QgPSB7XG4gICAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgICAgUE9TSVRJT046ICdwb3NpdGlvbidcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxTcHkgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLk5BVl9MSU5LUyArIFwiLFwiICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLkxJU1RfSVRFTVMgKyBcIixcIikgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IuRFJPUERPV05fSVRFTVMpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fcHJvY2VzcyhldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG4gICAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OO1xuICAgICAgICB2YXIgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG4gICAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBPZmZzZXRNZXRob2QuUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgICAgdmFyIHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKTtcbiAgICAgICAgdGFyZ2V0cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIGlmICh0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgIC8vIFRPRE8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuICAgICAgICAgICAgICByZXR1cm4gWyQkJDEodGFyZ2V0KVtvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIF90aGlzMi5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuXG4gICAgICAgICAgX3RoaXMyLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgICAkJCQxKHRoaXMuX3Njcm9sbEVsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RhcmdldHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgaWQgPSAkJCQxKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICBpZCA9IFV0aWwuZ2V0VUlEKE5BTUUpO1xuICAgICAgICAgICAgJCQkMShjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25maWcudGFyZ2V0ID0gXCIjXCIgKyBpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRPZmZzZXRIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblxuICAgICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG5cbiAgICAgICAgdmFyIG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICYmIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbMF0gJiYgdGhpcy5fb2Zmc2V0c1swXSA+IDApIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXRMZW5ndGggPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gb2Zmc2V0TGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgdmFyIGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG5cblxuICAgICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgXCJbZGF0YS10YXJnZXQ9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXSxcIiArIChzZWxlY3RvciArIFwiW2hyZWY9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciAkbGluayA9ICQkJDEoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJpZXMuam9pbignLCcpKSkpO1xuXG4gICAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICAgICAkbGluay5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG5cbiAgICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9MSU5LUyArIFwiLCBcIiArIFNlbGVjdG9yLkxJU1RfSVRFTVMpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlIHdoZW4gLm5hdi1saW5rIGlzIGluc2lkZSAubmF2LWl0ZW1cblxuICAgICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IuTkFWX0lURU1TKS5jaGlsZHJlbihTZWxlY3Rvci5OQVZfTElOS1MpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKEV2ZW50LkFDVElWQVRFLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7XG4gICAgICAgICQkJDEobm9kZXMpLmZpbHRlcihTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFNjcm9sbFNweSwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIFNjcm9sbFNweTtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMSh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfU1BZKSk7XG4gICAgICB2YXIgc2Nyb2xsU3B5c0xlbmd0aCA9IHNjcm9sbFNweXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gc2Nyb2xsU3B5c0xlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgJHNweSA9ICQkJDEoc2Nyb2xsU3B5c1tpXSk7XG5cbiAgICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgICAkJCQxLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICAgfTtcblxuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogdGFiLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENvbnN0YW50c1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIHZhciBOQU1FID0gJ3RhYic7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy50YWInO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgICBGQURFOiAnZmFkZScsXG4gICAgICBTSE9XOiAnc2hvdydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcbiAgICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgICBBQ1RJVkVfVUw6ICc+IGxpID4gLmFjdGl2ZScsXG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtdG9nZ2xlPVwibGlzdFwiXScsXG4gICAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICAgIERST1BET1dOX0FDVElWRV9DSElMRDogJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSdcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBUYWIgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBUYWIucHJvdG90eXBlO1xuXG4gICAgICAvLyBQdWJsaWNcbiAgICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICB2YXIgcHJldmlvdXM7XG4gICAgICAgIHZhciBsaXN0RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkU7XG4gICAgICAgICAgcHJldmlvdXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKGxpc3RFbGVtZW50KS5maW5kKGl0ZW1TZWxlY3RvcikpO1xuICAgICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICQkJDEocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHNob3duRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQkJDEocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuICAgICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudHM7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRzID0gJCQkMShjb250YWluZXIpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX1VMKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50cyA9ICQkJDEoY29udGFpbmVyKS5jaGlsZHJlbihTZWxlY3Rvci5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdO1xuICAgICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgYWN0aXZlICYmICQkJDEoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKTtcbiAgICAgICAgICAkJCQxKGFjdGl2ZSkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAkJCQxKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cgKyBcIiBcIiArIENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJCQkMShhY3RpdmUucGFyZW50Tm9kZSkuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdO1xuXG4gICAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgICAgICQkJDEoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJCQkMShlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbC5yZWZsb3coZWxlbWVudCk7XG4gICAgICAgICQkJDEoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJCQkMShlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pWzBdO1xuXG4gICAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKSk7XG4gICAgICAgICAgICAkJCQxKGRyb3Bkb3duVG9nZ2xlTGlzdCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCQkMSh0aGlzKTtcbiAgICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTtcbiAgICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIFRhYjtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3Nob3cnKTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVGFiO1xuXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRhYjtcbiAgfSgkKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBpbmRleC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAoZnVuY3Rpb24gKCQkJDEpIHtcbiAgICBpZiAodHlwZW9mICQkJDEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0LicpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gJCQkMS5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICAgIHZhciBtaW5NYWpvciA9IDE7XG4gICAgdmFyIGx0TWFqb3IgPSAyO1xuICAgIHZhciBtaW5NaW5vciA9IDk7XG4gICAgdmFyIG1pblBhdGNoID0gMTtcbiAgICB2YXIgbWF4TWFqb3IgPSA0O1xuXG4gICAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpO1xuICAgIH1cbiAgfSkoJCk7XG5cbiAgZXhwb3J0cy5VdGlsID0gVXRpbDtcbiAgZXhwb3J0cy5BbGVydCA9IEFsZXJ0O1xuICBleHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbiAgZXhwb3J0cy5DYXJvdXNlbCA9IENhcm91c2VsO1xuICBleHBvcnRzLkNvbGxhcHNlID0gQ29sbGFwc2U7XG4gIGV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbiAgZXhwb3J0cy5Nb2RhbCA9IE1vZGFsO1xuICBleHBvcnRzLlBvcG92ZXIgPSBQb3BvdmVyO1xuICBleHBvcnRzLlNjcm9sbHNweSA9IFNjcm9sbFNweTtcbiAgZXhwb3J0cy5UYWIgPSBUYWI7XG4gIGV4cG9ydHMuVG9vbHRpcCA9IFRvb2x0aXA7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5qcy5tYXBcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNC42XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG52YXIgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmJvdHRvbSAtIHJlc3VsdC50b3A7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoT2RkbmVzcyA9IHJlZmVyZW5jZS53aWR0aCAlIDIgPT09IHBvcHBlci53aWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2Uud2lkdGggJSAyID09PSAxICYmIHBvcHBlci53aWR0aCAlIDIgPT09IDE7XG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhPZGRuZXNzID8gTWF0aC5yb3VuZCA6IE1hdGguZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBNYXRoLnJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjJcbihmdW5jdGlvbigpIHtcbiAgdmFyIGdldE5hbm9TZWNvbmRzLCBocnRpbWUsIGxvYWRUaW1lLCBtb2R1bGVMb2FkVGltZSwgbm9kZUxvYWRUaW1lLCB1cFRpbWU7XG5cbiAgaWYgKCh0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcGVyZm9ybWFuY2UgIT09IG51bGwpICYmIHBlcmZvcm1hbmNlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2VzcyAhPT0gbnVsbCkgJiYgcHJvY2Vzcy5ocnRpbWUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIChnZXROYW5vU2Vjb25kcygpIC0gbm9kZUxvYWRUaW1lKSAvIDFlNjtcbiAgICB9O1xuICAgIGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xuICAgIGdldE5hbm9TZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaHI7XG4gICAgICBociA9IGhydGltZSgpO1xuICAgICAgcmV0dXJuIGhyWzBdICogMWU5ICsgaHJbMV07XG4gICAgfTtcbiAgICBtb2R1bGVMb2FkVGltZSA9IGdldE5hbm9TZWNvbmRzKCk7XG4gICAgdXBUaW1lID0gcHJvY2Vzcy51cHRpbWUoKSAqIDFlOTtcbiAgICBub2RlTG9hZFRpbWUgPSBtb2R1bGVMb2FkVGltZSAtIHVwVGltZTtcbiAgfSBlbHNlIGlmIChEYXRlLm5vdykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBEYXRlLm5vdygpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxufSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyZm9ybWFuY2Utbm93LmpzLm1hcFxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FkZENsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3NcIikpO1xuXG52YXIgX3JlbW92ZUNsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3NcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoXCIuL3V0aWxzL1Byb3BUeXBlc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGFkZENsYXNzID0gZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgY2xhc3Nlcykge1xuICByZXR1cm4gbm9kZSAmJiBjbGFzc2VzICYmIGNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICgwLCBfYWRkQ2xhc3MuZGVmYXVsdCkobm9kZSwgYyk7XG4gIH0pO1xufTtcblxudmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3Nlcykge1xuICByZXR1cm4gbm9kZSAmJiBjbGFzc2VzICYmIGNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICgwLCBfcmVtb3ZlQ2xhc3MuZGVmYXVsdCkobm9kZSwgYyk7XG4gIH0pO1xufTtcbi8qKlxuICogQSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IHVzaW5nIENTUyB0cmFuc2l0aW9ucyBhbmQgYW5pbWF0aW9ucy5cbiAqIEl0J3MgaW5zcGlyZWQgYnkgdGhlIGV4Y2VsbGVudCBbbmctYW5pbWF0ZV0oaHR0cDovL3d3dy5uZ2FuaW1hdGUub3JnLykgbGlicmFyeS5cbiAqXG4gKiBgQ1NTVHJhbnNpdGlvbmAgYXBwbGllcyBhIHBhaXIgb2YgY2xhc3MgbmFtZXMgZHVyaW5nIHRoZSBgYXBwZWFyYCwgYGVudGVyYCxcbiAqIGFuZCBgZXhpdGAgc3RhZ2VzIG9mIHRoZSB0cmFuc2l0aW9uLiBUaGUgZmlyc3QgY2xhc3MgaXMgYXBwbGllZCBhbmQgdGhlbiBhXG4gKiBzZWNvbmQgXCJhY3RpdmVcIiBjbGFzcyBpbiBvcmRlciB0byBhY3RpdmF0ZSB0aGUgY3NzIGFuaW1hdGlvbi4gQWZ0ZXIgdGhlIGFuaW1hdGlvbixcbiAqIG1hdGNoaW5nIGBkb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZSBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogV2hlbiB0aGUgYGluYCBwcm9wIGlzIHRvZ2dsZWQgdG8gYHRydWVgIHRoZSBDb21wb25lbnQgd2lsbCBnZXRcbiAqIHRoZSBgZXhhbXBsZS1lbnRlcmAgQ1NTIGNsYXNzIGFuZCB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCBDU1MgY2xhc3NcbiAqIGFkZGVkIGluIHRoZSBuZXh0IHRpY2suIFRoaXMgaXMgYSBjb252ZW50aW9uIGJhc2VkIG9uIHRoZSBgY2xhc3NOYW1lc2AgcHJvcC5cbiAqL1xuXG5cbnZhciBDU1NUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENTU1RyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5vbkVudGVyID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXMgPSBfdGhpcy5nZXRDbGFzc05hbWVzKGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJyksXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lcy5jbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2V4aXQnKTtcblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkVudGVyaW5nID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXMyID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcyhhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpLFxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMyLmFjdGl2ZUNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkVudGVyZWQgPSBmdW5jdGlvbiAobm9kZSwgYXBwZWFyaW5nKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczMgPSBfdGhpcy5nZXRDbGFzc05hbWVzKCdlbnRlcicpLFxuICAgICAgICAgIGRvbmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzMy5kb25lQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsIGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmVkKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM0ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM0LmNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnYXBwZWFyJyk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2VudGVyJyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkV4aXRpbmcgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM1ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLFxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM1LmFjdGl2ZUNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzNiA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2V4aXQnKSxcbiAgICAgICAgICBkb25lQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuZG9uZUNsYXNzTmFtZTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZXhpdCcpO1xuXG4gICAgICBhZGRDbGFzcyhub2RlLCBkb25lQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDbGFzc05hbWVzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gX3RoaXMucHJvcHMuY2xhc3NOYW1lcztcbiAgICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lcyAhPT0gJ3N0cmluZycgPyBjbGFzc05hbWVzW3R5cGVdIDogY2xhc3NOYW1lcyArICctJyArIHR5cGU7XG4gICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gdHlwZW9mIGNsYXNzTmFtZXMgIT09ICdzdHJpbmcnID8gY2xhc3NOYW1lc1t0eXBlICsgJ0FjdGl2ZSddIDogY2xhc3NOYW1lICsgJy1hY3RpdmUnO1xuICAgICAgdmFyIGRvbmVDbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lcyAhPT0gJ3N0cmluZycgPyBjbGFzc05hbWVzW3R5cGUgKyAnRG9uZSddIDogY2xhc3NOYW1lICsgJy1kb25lJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBhY3RpdmVDbGFzc05hbWU6IGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZTogZG9uZUNsYXNzTmFtZVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENTU1RyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW1vdmVDbGFzc2VzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlcyhub2RlLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM3ID0gdGhpcy5nZXRDbGFzc05hbWVzKHR5cGUpLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzNy5jbGFzc05hbWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM3LmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM3LmRvbmVDbGFzc05hbWU7XG5cbiAgICBjbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICBhY3RpdmVDbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICBkb25lQ2xhc3NOYW1lICYmIHJlbW92ZUNsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuICB9O1xuXG4gIF9wcm90by5yZWZsb3dBbmRBZGRDbGFzcyA9IGZ1bmN0aW9uIHJlZmxvd0FuZEFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSkge1xuICAgIC8vIFRoaXMgaXMgZm9yIHRvIGZvcmNlIGEgcmVwYWludCxcbiAgICAvLyB3aGljaCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gdHJhbnNpdGlvbiBzdHlsZXMgd2hlbiBhZGRpbmcgYSBjbGFzcyBuYW1lLlxuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgbm9kZSAmJiBub2RlLnNjcm9sbFRvcDtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuXG4gICAgZGVsZXRlIHByb3BzLmNsYXNzTmFtZXM7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBvbkVudGVyOiB0aGlzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0OiB0aGlzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogdGhpcy5vbkV4aXRpbmcsXG4gICAgICBvbkV4aXRlZDogdGhpcy5vbkV4aXRlZFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ1NTVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBfZXh0ZW5kcyh7fSwgX1RyYW5zaXRpb24uZGVmYXVsdC5wcm9wVHlwZXMsIHtcbiAgLyoqXG4gICAqIFRoZSBhbmltYXRpb24gY2xhc3NOYW1lcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQgYXMgaXQgZW50ZXJzLCBleGl0cyBvciBoYXMgZmluaXNoZWQgdGhlIHRyYW5zaXRpb24uXG4gICAqIEEgc2luZ2xlIG5hbWUgY2FuIGJlIHByb3ZpZGVkIGFuZCBpdCB3aWxsIGJlIHN1ZmZpeGVkIGZvciBlYWNoIHN0YWdlOiBlLmcuXG4gICAqXG4gICAqIGBjbGFzc05hbWVzPVwiZmFkZVwiYCBhcHBsaWVzIGBmYWRlLWVudGVyYCwgYGZhZGUtZW50ZXItYWN0aXZlYCwgYGZhZGUtZW50ZXItZG9uZWAsXG4gICAqIGBmYWRlLWV4aXRgLCBgZmFkZS1leGl0LWFjdGl2ZWAsIGBmYWRlLWV4aXQtZG9uZWAsIGBmYWRlLWFwcGVhcmAsIGFuZCBgZmFkZS1hcHBlYXItYWN0aXZlYC5cbiAgICogRWFjaCBpbmRpdmlkdWFsIGNsYXNzTmFtZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluZGVwZW5kZW50bHkgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17e1xuICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJyxcbiAgICogIGFwcGVhckFjdGl2ZTogJ215LWFjdGl2ZS1hcHBlYXInLFxuICAgKiAgZW50ZXI6ICdteS1lbnRlcicsXG4gICAqICBlbnRlckFjdGl2ZTogJ215LWFjdGl2ZS1lbnRlcicsXG4gICAqICBlbnRlckRvbmU6ICdteS1kb25lLWVudGVyJyxcbiAgICogIGV4aXQ6ICdteS1leGl0JyxcbiAgICogIGV4aXRBY3RpdmU6ICdteS1hY3RpdmUtZXhpdCcsXG4gICAqICBleGl0RG9uZTogJ215LWRvbmUtZXhpdCcsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBJZiB5b3Ugd2FudCB0byBzZXQgdGhlc2UgY2xhc3NlcyB1c2luZyBDU1MgTW9kdWxlczpcbiAgICpcbiAgICogYGBganNcbiAgICogaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5jc3MnO1xuICAgKiBgYGBcbiAgICpcbiAgICogeW91IG1pZ2h0IHdhbnQgdG8gdXNlIGNhbWVsQ2FzZSBpbiB5b3VyIENTUyBmaWxlLCB0aGF0IHdheSBjb3VsZCBzaW1wbHkgc3ByZWFkXG4gICAqIHRoZW0gaW5zdGVhZCBvZiBsaXN0aW5nIHRoZW0gb25lIGJ5IG9uZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17eyAuLi5zdHlsZXMgfX1cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmcgfCB7XG4gICAqICBhcHBlYXI/OiBzdHJpbmcsXG4gICAqICBhcHBlYXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBlbnRlcj86IHN0cmluZyxcbiAgICogIGVudGVyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgZW50ZXJEb25lPzogc3RyaW5nLFxuICAgKiAgZXhpdD86IHN0cmluZyxcbiAgICogIGV4aXRBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBleGl0RG9uZT86IHN0cmluZyxcbiAgICogfX1cbiAgICovXG4gIGNsYXNzTmFtZXM6IF9Qcm9wVHlwZXMuY2xhc3NOYW1lc1NoYXBlLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXInIG9yICdhcHBlYXInIGNsYXNzIGlzXG4gICAqIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXItYWN0aXZlJyBvclxuICAgKiAnYXBwZWFyLWFjdGl2ZScgY2xhc3MgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3JcbiAgICogJ2FwcGVhcicgY2xhc3NlcyBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdC1hY3RpdmUnIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQnIGNsYXNzZXNcbiAgICogYXJlICoqcmVtb3ZlZCoqIGFuZCB0aGUgYGV4aXQtZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSkgOiB7fTtcbnZhciBfZGVmYXVsdCA9IENTU1RyYW5zaXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MuZGVmYXVsdCkoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyAnICcgKyBjbGFzc05hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UmVwbGFjZVRyYW5zaXRpb24+YCBjb21wb25lbnQgaXMgYSBzcGVjaWFsaXplZCBgVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiB0aGF0IGFuaW1hdGVzIGJldHdlZW4gdHdvIGNoaWxkcmVuLlxuICpcbiAqIGBgYGpzeFxuICogPFJlcGxhY2VUcmFuc2l0aW9uIGluPlxuICogICA8RmFkZT48ZGl2PkkgYXBwZWFyIGZpcnN0PC9kaXY+PC9GYWRlPlxuICogICA8RmFkZT48ZGl2PkkgcmVwbGFjZSB0aGUgYWJvdmU8L2Rpdj48L0ZhZGU+XG4gKiA8L1JlcGxhY2VUcmFuc2l0aW9uPlxuICogYGBgXG4gKi9cbnZhciBSZXBsYWNlVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSZXBsYWNlVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVwbGFjZVRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRW50ZXInLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyaW5nJywgMCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyZWQnLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdCcsIDEsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUxpZmVjeWNsZSgnb25FeGl0aW5nJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGVkJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXBsYWNlVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUxpZmVjeWNsZSA9IGZ1bmN0aW9uIGhhbmRsZUxpZmVjeWNsZShoYW5kbGVyLCBpZHgsIG9yaWdpbmFsQXJncykge1xuICAgIHZhciBfY2hpbGQkcHJvcHM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbilbaWR4XTtcblxuICAgIGlmIChjaGlsZC5wcm9wc1toYW5kbGVyXSkgKF9jaGlsZCRwcm9wcyA9IGNoaWxkLnByb3BzKVtoYW5kbGVyXS5hcHBseShfY2hpbGQkcHJvcHMsIG9yaWdpbmFsQXJncyk7XG4gICAgaWYgKHRoaXMucHJvcHNbaGFuZGxlcl0pIHRoaXMucHJvcHNbaGFuZGxlcl0oKDAsIF9yZWFjdERvbS5maW5kRE9NTm9kZSkodGhpcykpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaW5Qcm9wID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5cIl0pO1xuXG4gICAgdmFyIF9SZWFjdCRDaGlsZHJlbiR0b0FyciA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLFxuICAgICAgICBmaXJzdCA9IF9SZWFjdCRDaGlsZHJlbiR0b0FyclswXSxcbiAgICAgICAgc2Vjb25kID0gX1JlYWN0JENoaWxkcmVuJHRvQXJyWzFdO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgcHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBwcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRXhpdGVkO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdCwgcHJvcHMsIGluUHJvcCA/IF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChmaXJzdCwge1xuICAgICAga2V5OiAnZmlyc3QnLFxuICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMuaGFuZGxlRW50ZXJlZFxuICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KHNlY29uZCwge1xuICAgICAga2V5OiAnc2Vjb25kJyxcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRXhpdCxcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRXhpdGluZyxcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFeGl0ZWRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlcGxhY2VUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZXBsYWNlVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHByb3BzW3Byb3BOYW1lXSkgIT09IDIpIHJldHVybiBuZXcgRXJyb3IoXCJcXFwiXCIgKyBwcm9wTmFtZSArIFwiXFxcIiBtdXN0IGJlIGV4YWN0bHkgdHdvIHRyYW5zaXRpb24gY29tcG9uZW50cy5cIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFJlcGxhY2VUcmFuc2l0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcbmV4cG9ydHMuZ2V0SW5pdGlhbENoaWxkTWFwcGluZyA9IGdldEluaXRpYWxDaGlsZE1hcHBpbmc7XG5leHBvcnRzLmdldE5leHRDaGlsZE1hcHBpbmcgPSBnZXROZXh0Q2hpbGRNYXBwaW5nO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9ICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJ2YXIgc2hhbGxvd0VxdWFsID0gZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlO1xufTtcblxudmFyIHNpbXBsZUlzRXF1YWwgPSBmdW5jdGlvbiBzaW1wbGVJc0VxdWFsKG5ld0FyZ3MsIGxhc3RBcmdzKSB7XG4gIHJldHVybiBuZXdBcmdzLmxlbmd0aCA9PT0gbGFzdEFyZ3MubGVuZ3RoICYmIG5ld0FyZ3MuZXZlcnkoZnVuY3Rpb24gKG5ld0FyZywgaW5kZXgpIHtcbiAgICByZXR1cm4gc2hhbGxvd0VxdWFsKG5ld0FyZywgbGFzdEFyZ3NbaW5kZXhdKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBpbmRleCAocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkge1xuICAgIGlzRXF1YWwgPSBzaW1wbGVJc0VxdWFsO1xuICB9XG5cbiAgdmFyIGxhc3RUaGlzO1xuICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgdmFyIGxhc3RSZXN1bHQ7XG4gIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbmV3QXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIG5ld0FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cblxuICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCB7IGNzcywgaW5qZWN0R2xvYmFsIH0gZnJvbSAnZW1vdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwsIGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmFmIGZyb20gJ3JhZic7XG5pbXBvcnQgQXV0b3NpemVJbnB1dCBmcm9tICdyZWFjdC1pbnB1dC1hdXRvc2l6ZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBOTyBPUFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbi8vIENsYXNzIE5hbWUgUHJlZml4ZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgY29tcG9uZW50IHN0YXRlIGZvciBzdHlsaW5nIHdpdGggY2xhc3MgbmFtZXMuXG5cbiBFeHBlY3RzIGFuIGFycmF5IG9mIHN0cmluZ3MgT1IgYSBzdHJpbmcvb2JqZWN0IHBhaXI6XG4gLSBjbGFzc05hbWUoWydjb21wJywgJ2NvbXAtYXJnJywgJ2NvbXAtYXJnLTInXSlcbiAgIEByZXR1cm5zICdyZWFjdC1zZWxlY3RfX2NvbXAgcmVhY3Qtc2VsZWN0X19jb21wLWFyZyByZWFjdC1zZWxlY3RfX2NvbXAtYXJnLTInXG4gLSBjbGFzc05hbWUoJ2NvbXAnLCB7IHNvbWU6IHRydWUsIHN0YXRlOiBmYWxzZSB9KVxuICAgQHJldHVybnMgJ3JlYWN0LXNlbGVjdF9fY29tcCByZWFjdC1zZWxlY3RfX2NvbXAtLXNvbWUnXG4qL1xuXG5mdW5jdGlvbiBhcHBseVByZWZpeFRvTmFtZShwcmVmaXgsIG5hbWUpIHtcbiAgaWYgKCFuYW1lKSB7XG4gICAgcmV0dXJuIHByZWZpeDtcbiAgfSBlbHNlIGlmIChuYW1lWzBdID09PSAnLScpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgbmFtZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlZml4ICsgJ19fJyArIG5hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xhc3NOYW1lcyhwcmVmaXgsIGNzc0tleSwgc3RhdGUsIGNsYXNzTmFtZSkge1xuICB2YXIgYXJyID0gW2Nzc0tleSwgY2xhc3NOYW1lXTtcblxuICBpZiAoc3RhdGUgJiYgcHJlZml4KSB7XG4gICAgZm9yICh2YXIga2V5IGluIHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBzdGF0ZVtrZXldKSB7XG4gICAgICAgIGFyci5wdXNoKFwiXCIuY29uY2F0KGFwcGx5UHJlZml4VG9OYW1lKHByZWZpeCwga2V5KSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLm1hcChmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBTdHJpbmcoaSkudHJpbSgpO1xuICB9KS5qb2luKCcgJyk7XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ2xlYW4gVmFsdWVcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgY2xlYW5WYWx1ZSA9IGZ1bmN0aW9uIGNsZWFuVmFsdWUodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUuZmlsdGVyKEJvb2xlYW4pO1xuICBpZiAoX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSByZXR1cm4gW3ZhbHVlXTtcbiAgcmV0dXJuIFtdO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBIYW5kbGUgSW5wdXQgQ2hhbmdlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoaW5wdXRWYWx1ZSwgYWN0aW9uTWV0YSwgb25JbnB1dENoYW5nZSkge1xuICBpZiAob25JbnB1dENoYW5nZSkge1xuICAgIHZhciBuZXdWYWx1ZSA9IG9uSW5wdXRDaGFuZ2UoaW5wdXRWYWx1ZSwgYWN0aW9uTWV0YSk7XG4gICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiBuZXdWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dFZhbHVlO1xufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNjcm9sbCBIZWxwZXJzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHksIHdpbmRvd10uaW5kZXhPZihlbCkgPiAtMTtcbn0gLy8gTm9ybWFsaXplZCBTY3JvbGwgVG9wXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKGVsKSB7XG4gIGlmIChpc0RvY3VtZW50RWxlbWVudChlbCkpIHtcbiAgICByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIGVsLnNjcm9sbFRvcDtcbn1cbmZ1bmN0aW9uIHNjcm9sbFRvKGVsLCB0b3ApIHtcbiAgLy8gd2l0aCBhIHNjcm9sbCBkaXN0YW5jZSwgd2UgcGVyZm9ybSBzY3JvbGwgb24gdGhlIGVsZW1lbnRcbiAgaWYgKGlzRG9jdW1lbnRFbGVtZW50KGVsKSkge1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0b3ApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsLnNjcm9sbFRvcCA9IHRvcDtcbn0gLy8gR2V0IFNjcm9sbCBQYXJlbnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgZXhjbHVkZVN0YXRpY1BhcmVudCA9IHN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnO1xuICB2YXIgb3ZlcmZsb3dSeCA9IC8oYXV0b3xzY3JvbGwpLztcbiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBzdWNrIGl0LCBmbG93Li4uXG5cbiAgaWYgKHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSByZXR1cm4gZG9jRWw7XG5cbiAgZm9yICh2YXIgcGFyZW50ID0gZWxlbWVudDsgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7KSB7XG4gICAgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7XG5cbiAgICBpZiAoZXhjbHVkZVN0YXRpY1BhcmVudCAmJiBzdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChvdmVyZmxvd1J4LnRlc3Qoc3R5bGUub3ZlcmZsb3cgKyBzdHlsZS5vdmVyZmxvd1kgKyBzdHlsZS5vdmVyZmxvd1gpKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb2NFbDtcbn0gLy8gQW5pbWF0ZWQgU2Nyb2xsIFRvXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gIEBwYXJhbSB0OiB0aW1lIChlbGFwc2VkKVxuICBAcGFyYW0gYjogaW5pdGlhbCB2YWx1ZVxuICBAcGFyYW0gYzogYW1vdW50IG9mIGNoYW5nZVxuICBAcGFyYW0gZDogZHVyYXRpb25cbiovXG5cbmZ1bmN0aW9uIGVhc2VPdXRDdWJpYyh0LCBiLCBjLCBkKSB7XG4gIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICsgMSkgKyBiO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlZFNjcm9sbFRvKGVsZW1lbnQsIHRvKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMjAwO1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5vb3A7XG4gIHZhciBzdGFydCA9IGdldFNjcm9sbFRvcChlbGVtZW50KTtcbiAgdmFyIGNoYW5nZSA9IHRvIC0gc3RhcnQ7XG4gIHZhciBpbmNyZW1lbnQgPSAxMDtcbiAgdmFyIGN1cnJlbnRUaW1lID0gMDtcblxuICBmdW5jdGlvbiBhbmltYXRlU2Nyb2xsKCkge1xuICAgIGN1cnJlbnRUaW1lICs9IGluY3JlbWVudDtcbiAgICB2YXIgdmFsID0gZWFzZU91dEN1YmljKGN1cnJlbnRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbik7XG4gICAgc2Nyb2xsVG8oZWxlbWVudCwgdmFsKTtcblxuICAgIGlmIChjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICByYWYoYW5pbWF0ZVNjcm9sbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVTY3JvbGwoKTtcbn0gLy8gU2Nyb2xsIEludG8gVmlld1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KG1lbnVFbCwgZm9jdXNlZEVsKSB7XG4gIHZhciBtZW51UmVjdCA9IG1lbnVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGZvY3VzZWRSZWN0ID0gZm9jdXNlZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgb3ZlclNjcm9sbCA9IGZvY3VzZWRFbC5vZmZzZXRIZWlnaHQgLyAzO1xuXG4gIGlmIChmb2N1c2VkUmVjdC5ib3R0b20gKyBvdmVyU2Nyb2xsID4gbWVudVJlY3QuYm90dG9tKSB7XG4gICAgc2Nyb2xsVG8obWVudUVsLCBNYXRoLm1pbihmb2N1c2VkRWwub2Zmc2V0VG9wICsgZm9jdXNlZEVsLmNsaWVudEhlaWdodCAtIG1lbnVFbC5vZmZzZXRIZWlnaHQgKyBvdmVyU2Nyb2xsLCBtZW51RWwuc2Nyb2xsSGVpZ2h0KSk7XG4gIH0gZWxzZSBpZiAoZm9jdXNlZFJlY3QudG9wIC0gb3ZlclNjcm9sbCA8IG1lbnVSZWN0LnRvcCkge1xuICAgIHNjcm9sbFRvKG1lbnVFbCwgTWF0aC5tYXgoZm9jdXNlZEVsLm9mZnNldFRvcCAtIG92ZXJTY3JvbGwsIDApKTtcbiAgfVxufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEdldCBib3VuZGluZyBjbGllbnQgb2JqZWN0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGNhbm5vdCBnZXQga2V5cyB1c2luZyBhcnJheSBub3RhdGlvbiB3aXRoIERPTVJlY3RcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRPYmooZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LndpZHRoXG4gIH07XG59XG4vLyBUb3VjaCBDYXBhYmlsaXR5IERldGVjdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gaXNUb3VjaENhcGFibGUoKSB7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ1RvdWNoRXZlbnQnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE1vYmlsZSBEZXZpY2UgRGV0ZWN0b3Jcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBpc01vYmlsZURldmljZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1lbnVQbGFjZW1lbnQoX3JlZikge1xuICB2YXIgbWF4SGVpZ2h0ID0gX3JlZi5tYXhIZWlnaHQsXG4gICAgICBtZW51RWwgPSBfcmVmLm1lbnVFbCxcbiAgICAgIG1pbkhlaWdodCA9IF9yZWYubWluSGVpZ2h0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBzaG91bGRTY3JvbGwgPSBfcmVmLnNob3VsZFNjcm9sbCxcbiAgICAgIGlzRml4ZWRQb3NpdGlvbiA9IF9yZWYuaXNGaXhlZFBvc2l0aW9uLFxuICAgICAgdGhlbWUgPSBfcmVmLnRoZW1lO1xuICB2YXIgc3BhY2luZyA9IHRoZW1lLnNwYWNpbmc7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQobWVudUVsKTtcbiAgdmFyIGRlZmF1bHRTdGF0ZSA9IHtcbiAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gIH07IC8vIHNvbWV0aGluZyB3ZW50IHdyb25nLCByZXR1cm4gZGVmYXVsdCBzdGF0ZVxuXG4gIGlmICghbWVudUVsIHx8ICFtZW51RWwub2Zmc2V0UGFyZW50KSByZXR1cm4gZGVmYXVsdFN0YXRlOyAvLyB3ZSBjYW4ndCB0cnVzdCBgc2Nyb2xsUGFyZW50LnNjcm9sbEhlaWdodGAgLS0+IGl0IG1heSBpbmNyZWFzZSB3aGVuXG4gIC8vIHRoZSBtZW51IGlzIHJlbmRlcmVkXG5cbiAgdmFyIF9zY3JvbGxQYXJlbnQkZ2V0Qm91biA9IHNjcm9sbFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHNjcm9sbEhlaWdodCA9IF9zY3JvbGxQYXJlbnQkZ2V0Qm91bi5oZWlnaHQ7XG5cbiAgdmFyIF9tZW51RWwkZ2V0Qm91bmRpbmdDbCA9IG1lbnVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIG1lbnVCb3R0b20gPSBfbWVudUVsJGdldEJvdW5kaW5nQ2wuYm90dG9tLFxuICAgICAgbWVudUhlaWdodCA9IF9tZW51RWwkZ2V0Qm91bmRpbmdDbC5oZWlnaHQsXG4gICAgICBtZW51VG9wID0gX21lbnVFbCRnZXRCb3VuZGluZ0NsLnRvcDtcblxuICB2YXIgX21lbnVFbCRvZmZzZXRQYXJlbnQkID0gbWVudUVsLm9mZnNldFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGNvbnRhaW5lclRvcCA9IF9tZW51RWwkb2Zmc2V0UGFyZW50JC50b3A7XG5cbiAgdmFyIHZpZXdIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxUb3Aoc2Nyb2xsUGFyZW50KTtcbiAgdmFyIG1hcmdpbkJvdHRvbSA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVudUVsKS5tYXJnaW5Cb3R0b20sIDEwKTtcbiAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUobWVudUVsKS5tYXJnaW5Ub3AsIDEwKTtcbiAgdmFyIHZpZXdTcGFjZUFib3ZlID0gY29udGFpbmVyVG9wIC0gbWFyZ2luVG9wO1xuICB2YXIgdmlld1NwYWNlQmVsb3cgPSB2aWV3SGVpZ2h0IC0gbWVudVRvcDtcbiAgdmFyIHNjcm9sbFNwYWNlQWJvdmUgPSB2aWV3U3BhY2VBYm92ZSArIHNjcm9sbFRvcDtcbiAgdmFyIHNjcm9sbFNwYWNlQmVsb3cgPSBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgLSBtZW51VG9wO1xuICB2YXIgc2Nyb2xsRG93biA9IG1lbnVCb3R0b20gLSB2aWV3SGVpZ2h0ICsgc2Nyb2xsVG9wICsgbWFyZ2luQm90dG9tO1xuICB2YXIgc2Nyb2xsVXAgPSBzY3JvbGxUb3AgKyBtZW51VG9wIC0gbWFyZ2luVG9wO1xuICB2YXIgc2Nyb2xsRHVyYXRpb24gPSAxNjA7XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICdhdXRvJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgLy8gMTogdGhlIG1lbnUgd2lsbCBmaXQsIGRvIG5vdGhpbmdcbiAgICAgIGlmICh2aWV3U3BhY2VCZWxvdyA+PSBtZW51SGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAyOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgc2Nyb2xsZWRcblxuXG4gICAgICBpZiAoc2Nyb2xsU3BhY2VCZWxvdyA+PSBtZW51SGVpZ2h0ICYmICFpc0ZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIGFuaW1hdGVkU2Nyb2xsVG8oc2Nyb2xsUGFyZW50LCBzY3JvbGxEb3duLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gMzogdGhlIG1lbnUgd2lsbCBmaXQsIGlmIGNvbnN0cmFpbmVkXG5cblxuICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VCZWxvdyA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUJlbG93ID49IG1pbkhlaWdodCkge1xuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24sIHNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfSAvLyB3ZSB3YW50IHRvIHByb3ZpZGUgYXMgbXVjaCBvZiB0aGUgbWVudSBhcyBwb3NzaWJsZSB0byB0aGUgdXNlcixcbiAgICAgICAgLy8gc28gZ2l2ZSB0aGVtIHdoYXRldmVyIGlzIGF2YWlsYWJsZSBiZWxvdyByYXRoZXIgdGhhbiB0aGUgbWluSGVpZ2h0LlxuXG5cbiAgICAgICAgdmFyIGNvbnN0cmFpbmVkSGVpZ2h0ID0gaXNGaXhlZFBvc2l0aW9uID8gdmlld1NwYWNlQmVsb3cgLSBtYXJnaW5Cb3R0b20gOiBzY3JvbGxTcGFjZUJlbG93IC0gbWFyZ2luQm90dG9tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBjb25zdHJhaW5lZEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyA0LiBGb3JrZWQgYmV2aW91ciB3aGVuIHRoZXJlIGlzbid0IGVub3VnaCBzcGFjZSBiZWxvd1xuICAgICAgLy8gQVVUTzogZmxpcCB0aGUgbWVudSwgcmVuZGVyIGFib3ZlXG5cblxuICAgICAgaWYgKHBsYWNlbWVudCA9PT0gJ2F1dG8nIHx8IGlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAvLyBtYXkgbmVlZCB0byBiZSBjb25zdHJhaW5lZCBhZnRlciBmbGlwcGluZ1xuICAgICAgICB2YXIgX2NvbnN0cmFpbmVkSGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB2YXIgc3BhY2VBYm92ZSA9IGlzRml4ZWRQb3NpdGlvbiA/IHZpZXdTcGFjZUFib3ZlIDogc2Nyb2xsU3BhY2VBYm92ZTtcblxuICAgICAgICBpZiAoc3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQpIHtcbiAgICAgICAgICBfY29uc3RyYWluZWRIZWlnaHQgPSBNYXRoLm1pbihzcGFjZUFib3ZlIC0gbWFyZ2luQm90dG9tIC0gc3BhY2luZy5jb250cm9sSGVpZ2h0LCBtYXhIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogX2NvbnN0cmFpbmVkSGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIEJPVFRPTTogYWxsb3cgYnJvd3NlciB0byBpbmNyZWFzZSBzY3JvbGxhYmxlIGFyZWEgYW5kIGltbWVkaWF0ZWx5IHNldCBzY3JvbGxcblxuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgICAgICBzY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbERvd24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0b3AnOlxuICAgICAgLy8gMTogdGhlIG1lbnUgd2lsbCBmaXQsIGRvIG5vdGhpbmdcbiAgICAgIGlmICh2aWV3U3BhY2VBYm92ZSA+PSBtZW51SGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfSAvLyAyOiB0aGUgbWVudSB3aWxsIGZpdCwgaWYgc2Nyb2xsZWRcblxuXG4gICAgICBpZiAoc2Nyb2xsU3BhY2VBYm92ZSA+PSBtZW51SGVpZ2h0ICYmICFpc0ZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIGFuaW1hdGVkU2Nyb2xsVG8oc2Nyb2xsUGFyZW50LCBzY3JvbGxVcCwgc2Nyb2xsRHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9IC8vIDM6IHRoZSBtZW51IHdpbGwgZml0LCBpZiBjb25zdHJhaW5lZFxuXG5cbiAgICAgIGlmICghaXNGaXhlZFBvc2l0aW9uICYmIHNjcm9sbFNwYWNlQWJvdmUgPj0gbWluSGVpZ2h0IHx8IGlzRml4ZWRQb3NpdGlvbiAmJiB2aWV3U3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQpIHtcbiAgICAgICAgdmFyIF9jb25zdHJhaW5lZEhlaWdodDIgPSBtYXhIZWlnaHQ7IC8vIHdlIHdhbnQgdG8gcHJvdmlkZSBhcyBtdWNoIG9mIHRoZSBtZW51IGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyLFxuICAgICAgICAvLyBzbyBnaXZlIHRoZW0gd2hhdGV2ZXIgaXMgYXZhaWxhYmxlIGJlbG93IHJhdGhlciB0aGFuIHRoZSBtaW5IZWlnaHQuXG5cbiAgICAgICAgaWYgKCFpc0ZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsU3BhY2VBYm92ZSA+PSBtaW5IZWlnaHQgfHwgaXNGaXhlZFBvc2l0aW9uICYmIHZpZXdTcGFjZUFib3ZlID49IG1pbkhlaWdodCkge1xuICAgICAgICAgIF9jb25zdHJhaW5lZEhlaWdodDIgPSBpc0ZpeGVkUG9zaXRpb24gPyB2aWV3U3BhY2VBYm92ZSAtIG1hcmdpblRvcCA6IHNjcm9sbFNwYWNlQWJvdmUgLSBtYXJnaW5Ub3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgYW5pbWF0ZWRTY3JvbGxUbyhzY3JvbGxQYXJlbnQsIHNjcm9sbFVwLCBzY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBfY29uc3RyYWluZWRIZWlnaHQyXG4gICAgICAgIH07XG4gICAgICB9IC8vIDQuIG5vdCBlbm91Z2ggc3BhY2UsIHRoZSBicm93c2VyIFdJTEwgTk9UIGluY3JlYXNlIHNjcm9sbGFibGUgYXJlYSB3aGVuXG4gICAgICAvLyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgZWxlbWVudCByZW5kZXJlZCBhYm92ZSB0aGUgdmlld3BvcnQgKG9ubHkgYmVsb3cpLlxuICAgICAgLy8gRmxpcCB0aGUgbWVudSwgcmVuZGVyIGJlbG93XG5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwbGFjZW1lbnQgcHJvdmlkZWQgXFxcIlwiLmNvbmNhdChwbGFjZW1lbnQsIFwiXFxcIi5cIikpO1xuICB9IC8vIGZ1bGZpbCBjb250cmFjdCB3aXRoIGZsb3c6IGltcGxpY2l0IHJldHVybiB2YWx1ZSBvZiB1bmRlZmluZWRcblxuXG4gIHJldHVybiBkZWZhdWx0U3RhdGU7XG59IC8vIE1lbnUgQ29tcG9uZW50XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gYWxpZ25Ub0NvbnRyb2wocGxhY2VtZW50KSB7XG4gIHZhciBwbGFjZW1lbnRUb0NTU1Byb3AgPSB7XG4gICAgYm90dG9tOiAndG9wJyxcbiAgICB0b3A6ICdib3R0b20nXG4gIH07XG4gIHJldHVybiBwbGFjZW1lbnQgPyBwbGFjZW1lbnRUb0NTU1Byb3BbcGxhY2VtZW50XSA6ICdib3R0b20nO1xufVxuXG52YXIgY29lcmNlUGxhY2VtZW50ID0gZnVuY3Rpb24gY29lcmNlUGxhY2VtZW50KHApIHtcbiAgcmV0dXJuIHAgPT09ICdhdXRvJyA/ICdib3R0b20nIDogcDtcbn07XG5cbnZhciBtZW51Q1NTID0gZnVuY3Rpb24gbWVudUNTUyhfcmVmMikge1xuICB2YXIgX3JlZjM7XG5cbiAgdmFyIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYyJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIF9yZWYzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgYWxpZ25Ub0NvbnRyb2wocGxhY2VtZW50KSwgJzEwMCUnKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcImJhY2tncm91bmRDb2xvclwiLCBjb2xvcnMubmV1dHJhbDApLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiYm9yZGVyUmFkaXVzXCIsIGJvcmRlclJhZGl1cyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJib3hTaGFkb3dcIiwgJzAgMCAwIDFweCBoc2xhKDAsIDAlLCAwJSwgMC4xKSwgMCA0cHggMTFweCBoc2xhKDAsIDAlLCAwJSwgMC4xKScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwibWFyZ2luQm90dG9tXCIsIHNwYWNpbmcubWVudUd1dHRlciksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgXCJtYXJnaW5Ub3BcIiwgc3BhY2luZy5tZW51R3V0dGVyKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcInBvc2l0aW9uXCIsICdhYnNvbHV0ZScpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwid2lkdGhcIiwgJzEwMCUnKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBcInpJbmRleFwiLCAxKSwgX3JlZjM7XG59OyAvLyBOT1RFOiBpbnRlcm5hbCBvbmx5XG5cbnZhciBNZW51UGxhY2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW51UGxhY2VyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51UGxhY2VyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVQbGFjZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoTWVudVBsYWNlcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInN0YXRlXCIsIHtcbiAgICAgIG1heEhlaWdodDogX3RoaXMucHJvcHMubWF4TWVudUhlaWdodCxcbiAgICAgIHBsYWNlbWVudDogbnVsbFxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFBsYWNlbWVudFwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtaW5NZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMubWluTWVudUhlaWdodCxcbiAgICAgICAgICBtYXhNZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMubWF4TWVudUhlaWdodCxcbiAgICAgICAgICBtZW51UGxhY2VtZW50ID0gX3RoaXMkcHJvcHMubWVudVBsYWNlbWVudCxcbiAgICAgICAgICBtZW51UG9zaXRpb24gPSBfdGhpcyRwcm9wcy5tZW51UG9zaXRpb24sXG4gICAgICAgICAgbWVudVNob3VsZFNjcm9sbEludG9WaWV3ID0gX3RoaXMkcHJvcHMubWVudVNob3VsZFNjcm9sbEludG9WaWV3LFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWU7XG4gICAgICB2YXIgZ2V0UG9ydGFsUGxhY2VtZW50ID0gX3RoaXMuY29udGV4dC5nZXRQb3J0YWxQbGFjZW1lbnQ7XG4gICAgICBpZiAoIXJlZikgcmV0dXJuOyAvLyBETyBOT1Qgc2Nyb2xsIGlmIHBvc2l0aW9uIGlzIGZpeGVkXG5cbiAgICAgIHZhciBpc0ZpeGVkUG9zaXRpb24gPSBtZW51UG9zaXRpb24gPT09ICdmaXhlZCc7XG4gICAgICB2YXIgc2hvdWxkU2Nyb2xsID0gbWVudVNob3VsZFNjcm9sbEludG9WaWV3ICYmICFpc0ZpeGVkUG9zaXRpb247XG4gICAgICB2YXIgc3RhdGUgPSBnZXRNZW51UGxhY2VtZW50KHtcbiAgICAgICAgbWF4SGVpZ2h0OiBtYXhNZW51SGVpZ2h0LFxuICAgICAgICBtZW51RWw6IHJlZixcbiAgICAgICAgbWluSGVpZ2h0OiBtaW5NZW51SGVpZ2h0LFxuICAgICAgICBwbGFjZW1lbnQ6IG1lbnVQbGFjZW1lbnQsXG4gICAgICAgIHNob3VsZFNjcm9sbDogc2hvdWxkU2Nyb2xsLFxuICAgICAgICBpc0ZpeGVkUG9zaXRpb246IGlzRml4ZWRQb3NpdGlvbixcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9KTtcbiAgICAgIGlmIChnZXRQb3J0YWxQbGFjZW1lbnQpIGdldFBvcnRhbFBsYWNlbWVudChzdGF0ZSk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRVcGRhdGVkUHJvcHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1lbnVQbGFjZW1lbnQgPSBfdGhpcy5wcm9wcy5tZW51UGxhY2VtZW50O1xuICAgICAgdmFyIHBsYWNlbWVudCA9IF90aGlzLnN0YXRlLnBsYWNlbWVudCB8fCBjb2VyY2VQbGFjZW1lbnQobWVudVBsYWNlbWVudCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIG1heEhlaWdodDogX3RoaXMuc3RhdGUubWF4SGVpZ2h0XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZW51UGxhY2VyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICAgIHJlZjogdGhpcy5nZXRQbGFjZW1lbnQsXG4gICAgICAgIHBsYWNlclByb3BzOiB0aGlzLmdldFVwZGF0ZWRQcm9wcygpXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVudVBsYWNlcjtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1lbnVQbGFjZXIsIFwiY29udGV4dFR5cGVzXCIsIHtcbiAgZ2V0UG9ydGFsUGxhY2VtZW50OiBQcm9wVHlwZXMuZnVuY1xufSk7XG5cbnZhciBNZW51ID0gZnVuY3Rpb24gTWVudShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHZhciBjbiA9IGN4KFxuICAvKiNfX1BVUkVfXyovXG4gIGNzcyhnZXRTdHlsZXMoJ21lbnUnLCBwcm9wcykpLCB7XG4gICAgbWVudTogdHJ1ZVxuICB9LCBjbGFzc05hbWUpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjblxuICB9LCBpbm5lclByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZlxuICB9KSwgY2hpbGRyZW4pO1xufTtcbi8vIE1lbnUgTGlzdFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBtZW51TGlzdENTUyA9IGZ1bmN0aW9uIG1lbnVMaXN0Q1NTKF9yZWY0KSB7XG4gIHZhciBtYXhIZWlnaHQgPSBfcmVmNC5tYXhIZWlnaHQsXG4gICAgICBiYXNlVW5pdCA9IF9yZWY0LnRoZW1lLnNwYWNpbmcuYmFzZVVuaXQ7XG4gIHJldHVybiB7XG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQsXG4gICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgcGFkZGluZ0JvdHRvbTogYmFzZVVuaXQsXG4gICAgcGFkZGluZ1RvcDogYmFzZVVuaXQsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gcmVxdWlyZWQgZm9yIG9mZnNldFtIZWlnaHQsIFRvcF0gPiBrZXlib2FyZCBzY3JvbGxcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICB9O1xufTtcbnZhciBNZW51TGlzdCA9IGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlzTXVsdGkgPSBwcm9wcy5pc011bHRpLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ21lbnVMaXN0JywgcHJvcHMpKSwge1xuICAgICAgJ21lbnUtbGlzdCc6IHRydWUsXG4gICAgICAnbWVudS1saXN0LS1pcy1tdWx0aSc6IGlzTXVsdGlcbiAgICB9LCBjbGFzc05hbWUpLFxuICAgIHJlZjogaW5uZXJSZWZcbiAgfSwgY2hpbGRyZW4pO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNZW51IE5vdGljZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbm90aWNlQ1NTID0gZnVuY3Rpb24gbm90aWNlQ1NTKF9yZWY1KSB7XG4gIHZhciBfcmVmNSR0aGVtZSA9IF9yZWY1LnRoZW1lLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNSR0aGVtZS5zcGFjaW5nLmJhc2VVbml0LFxuICAgICAgY29sb3JzID0gX3JlZjUkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDQwLFxuICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KGJhc2VVbml0ICogMiwgXCJweCBcIikuY29uY2F0KGJhc2VVbml0ICogMywgXCJweFwiKSxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gIH07XG59O1xuXG52YXIgbm9PcHRpb25zTWVzc2FnZUNTUyA9IG5vdGljZUNTUztcbnZhciBsb2FkaW5nTWVzc2FnZUNTUyA9IG5vdGljZUNTUztcbnZhciBOb09wdGlvbnNNZXNzYWdlID0gZnVuY3Rpb24gTm9PcHRpb25zTWVzc2FnZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpbm5lclByb3BzID0gcHJvcHMuaW5uZXJQcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ25vT3B0aW9uc01lc3NhZ2UnLCBwcm9wcykpLCB7XG4gICAgICAnbWVudS1ub3RpY2UnOiB0cnVlLFxuICAgICAgJ21lbnUtbm90aWNlLS1uby1vcHRpb25zJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5Ob09wdGlvbnNNZXNzYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46ICdObyBvcHRpb25zJ1xufTtcbnZhciBMb2FkaW5nTWVzc2FnZSA9IGZ1bmN0aW9uIExvYWRpbmdNZXNzYWdlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnbG9hZGluZ01lc3NhZ2UnLCBwcm9wcykpLCB7XG4gICAgICAnbWVudS1ub3RpY2UnOiB0cnVlLFxuICAgICAgJ21lbnUtbm90aWNlLS1sb2FkaW5nJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5Mb2FkaW5nTWVzc2FnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiAnTG9hZGluZy4uLidcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTWVudSBQb3J0YWxcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbWVudVBvcnRhbENTUyA9IGZ1bmN0aW9uIG1lbnVQb3J0YWxDU1MoX3JlZjYpIHtcbiAgdmFyIHJlY3QgPSBfcmVmNi5yZWN0LFxuICAgICAgb2Zmc2V0ID0gX3JlZjYub2Zmc2V0LFxuICAgICAgcG9zaXRpb24gPSBfcmVmNi5wb3NpdGlvbjtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgIHRvcDogb2Zmc2V0LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIHpJbmRleDogMVxuICB9O1xufTtcbnZhciBNZW51UG9ydGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTWVudVBvcnRhbCwgX0NvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE1lbnVQb3J0YWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjM7XG5cbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVQb3J0YWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjMgPSBfZ2V0UHJvdG90eXBlT2YoTWVudVBvcnRhbCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMywgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBwbGFjZW1lbnQ6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSksIFwiZ2V0UG9ydGFsUGxhY2VtZW50XCIsIGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgdmFyIHBsYWNlbWVudCA9IF9yZWY3LnBsYWNlbWVudDtcbiAgICAgIHZhciBpbml0aWFsUGxhY2VtZW50ID0gY29lcmNlUGxhY2VtZW50KF90aGlzMi5wcm9wcy5tZW51UGxhY2VtZW50KTsgLy8gYXZvaWQgcmUtcmVuZGVycyBpZiB0aGUgcGxhY2VtZW50IGhhcyBub3QgY2hhbmdlZFxuXG4gICAgICBpZiAocGxhY2VtZW50ICE9PSBpbml0aWFsUGxhY2VtZW50KSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVQb3J0YWwsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRQb3J0YWxQbGFjZW1lbnQ6IHRoaXMuZ2V0UG9ydGFsUGxhY2VtZW50XG4gICAgICB9O1xuICAgIH0gLy8gY2FsbGJhY2sgZm9yIG9jY2Fzc2lvbnMgd2hlcmUgdGhlIG1lbnUgbXVzdCBcImZsaXBcIlxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFwcGVuZFRvID0gX3RoaXMkcHJvcHMyLmFwcGVuZFRvLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRyb2xFbGVtZW50ID0gX3RoaXMkcHJvcHMyLmNvbnRyb2xFbGVtZW50LFxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQgPSBfdGhpcyRwcm9wczIubWVudVBsYWNlbWVudCxcbiAgICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzMi5tZW51UG9zaXRpb24sXG4gICAgICAgICAgZ2V0U3R5bGVzID0gX3RoaXMkcHJvcHMyLmdldFN0eWxlcztcbiAgICAgIHZhciBpc0ZpeGVkID0gcG9zaXRpb24gPT09ICdmaXhlZCc7IC8vIGJhaWwgZWFybHkgaWYgcmVxdWlyZWQgZWxlbWVudHMgYXJlbid0IHByZXNlbnRcblxuICAgICAgaWYgKCFhcHBlbmRUbyAmJiAhaXNGaXhlZCB8fCAhY29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0aGlzLnN0YXRlLnBsYWNlbWVudCB8fCBjb2VyY2VQbGFjZW1lbnQobWVudVBsYWNlbWVudCk7XG4gICAgICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50T2JqKGNvbnRyb2xFbGVtZW50KTtcbiAgICAgIHZhciBzY3JvbGxEaXN0YW5jZSA9IGlzRml4ZWQgPyAwIDogd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgdmFyIG9mZnNldCA9IHJlY3RbcGxhY2VtZW50XSArIHNjcm9sbERpc3RhbmNlO1xuICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICByZWN0OiByZWN0XG4gICAgICB9OyAvLyBzYW1lIHdyYXBwZXIgZWxlbWVudCB3aGV0aGVyIGZpeGVkIG9yIHBvcnRhbGxlZFxuXG4gICAgICB2YXIgbWVudVdyYXBwZXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOlxuICAgICAgICAvKiNfX1BVUkVfXyovXG5cbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBjc3MoZ2V0U3R5bGVzKCdtZW51UG9ydGFsJywgc3RhdGUpKVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgcmV0dXJuIGFwcGVuZFRvID8gY3JlYXRlUG9ydGFsKG1lbnVXcmFwcGVyLCBhcHBlbmRUbykgOiBtZW51V3JhcHBlcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVudVBvcnRhbDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1lbnVQb3J0YWwsIFwiY2hpbGRDb250ZXh0VHlwZXNcIiwge1xuICBnZXRQb3J0YWxQbGFjZW1lbnQ6IFByb3BUeXBlcy5mdW5jXG59KTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgX3R5cGVvZihhKSA9PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGIpID09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFyckEgPSBpc0FycmF5KGEpLFxuICAgICAgICBhcnJCID0gaXNBcnJheShiKSxcbiAgICAgICAgaSxcbiAgICAgICAgbGVuZ3RoLFxuICAgICAgICBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlLFxuICAgICAgICBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuICAgIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkYXRlQSAmJiBkYXRlQikgcmV0dXJuIGEuZ2V0VGltZSgpID09IGIuZ2V0VGltZSgpO1xuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cCxcbiAgICAgICAgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuICAgIHZhciBrZXlzID0ga2V5TGlzdChhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggIT09IGtleUxpc3QoYikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuICAgIC8vIEN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcblxuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59IC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxuXG5mdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcblxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxudmFyIGRpYWNyaXRpY3MgPSBbe1xuICBiYXNlOiAnQScsXG4gIGxldHRlcnM6IC9bXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rl0vZ1xufSwge1xuICBiYXNlOiAnQUEnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzJdL2dcbn0sIHtcbiAgYmFzZTogJ0FFJyxcbiAgbGV0dGVyczogL1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2dcbn0sIHtcbiAgYmFzZTogJ0FPJyxcbiAgbGV0dGVyczogL1tcXHVBNzM0XS9nXG59LCB7XG4gIGJhc2U6ICdBVScsXG4gIGxldHRlcnM6IC9bXFx1QTczNl0vZ1xufSwge1xuICBiYXNlOiAnQVYnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzhcXHVBNzNBXS9nXG59LCB7XG4gIGJhc2U6ICdBWScsXG4gIGxldHRlcnM6IC9bXFx1QTczQ10vZ1xufSwge1xuICBiYXNlOiAnQicsXG4gIGxldHRlcnM6IC9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nXG59LCB7XG4gIGJhc2U6ICdDJyxcbiAgbGV0dGVyczogL1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2dcbn0sIHtcbiAgYmFzZTogJ0QnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5XS9nXG59LCB7XG4gIGJhc2U6ICdEWicsXG4gIGxldHRlcnM6IC9bXFx1MDFGMVxcdTAxQzRdL2dcbn0sIHtcbiAgYmFzZTogJ0R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYyXFx1MDFDNV0vZ1xufSwge1xuICBiYXNlOiAnRScsXG4gIGxldHRlcnM6IC9bXFx1MDA0NVxcdTI0QkFcXHVGRjI1XFx1MDBDOFxcdTAwQzlcXHUwMENBXFx1MUVDMFxcdTFFQkVcXHUxRUM0XFx1MUVDMlxcdTFFQkNcXHUwMTEyXFx1MUUxNFxcdTFFMTZcXHUwMTE0XFx1MDExNlxcdTAwQ0JcXHUxRUJBXFx1MDExQVxcdTAyMDRcXHUwMjA2XFx1MUVCOFxcdTFFQzZcXHUwMjI4XFx1MUUxQ1xcdTAxMThcXHUxRTE4XFx1MUUxQVxcdTAxOTBcXHUwMThFXS9nXG59LCB7XG4gIGJhc2U6ICdGJyxcbiAgbGV0dGVyczogL1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2dcbn0sIHtcbiAgYmFzZTogJ0cnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZ1xufSwge1xuICBiYXNlOiAnSCcsXG4gIGxldHRlcnM6IC9bXFx1MDA0OFxcdTI0QkRcXHVGRjI4XFx1MDEyNFxcdTFFMjJcXHUxRTI2XFx1MDIxRVxcdTFFMjRcXHUxRTI4XFx1MUUyQVxcdTAxMjZcXHUyQzY3XFx1MkM3NVxcdUE3OERdL2dcbn0sIHtcbiAgYmFzZTogJ0knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nXG59LCB7XG4gIGJhc2U6ICdKJyxcbiAgbGV0dGVyczogL1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZ1xufSwge1xuICBiYXNlOiAnSycsXG4gIGxldHRlcnM6IC9bXFx1MDA0QlxcdTI0QzBcXHVGRjJCXFx1MUUzMFxcdTAxRThcXHUxRTMyXFx1MDEzNlxcdTFFMzRcXHUwMTk4XFx1MkM2OVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3QTJdL2dcbn0sIHtcbiAgYmFzZTogJ0wnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ1xufSwge1xuICBiYXNlOiAnTEonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQzddL2dcbn0sIHtcbiAgYmFzZTogJ0xqJyxcbiAgbGV0dGVyczogL1tcXHUwMUM4XS9nXG59LCB7XG4gIGJhc2U6ICdNJyxcbiAgbGV0dGVyczogL1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ1xufSwge1xuICBiYXNlOiAnTicsXG4gIGxldHRlcnM6IC9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZ1xufSwge1xuICBiYXNlOiAnTkonLFxuICBsZXR0ZXJzOiAvW1xcdTAxQ0FdL2dcbn0sIHtcbiAgYmFzZTogJ05qJyxcbiAgbGV0dGVyczogL1tcXHUwMUNCXS9nXG59LCB7XG4gIGJhc2U6ICdPJyxcbiAgbGV0dGVyczogL1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nXG59LCB7XG4gIGJhc2U6ICdPSScsXG4gIGxldHRlcnM6IC9bXFx1MDFBMl0vZ1xufSwge1xuICBiYXNlOiAnT08nLFxuICBsZXR0ZXJzOiAvW1xcdUE3NEVdL2dcbn0sIHtcbiAgYmFzZTogJ09VJyxcbiAgbGV0dGVyczogL1tcXHUwMjIyXS9nXG59LCB7XG4gIGJhc2U6ICdQJyxcbiAgbGV0dGVyczogL1tcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0XS9nXG59LCB7XG4gIGJhc2U6ICdRJyxcbiAgbGV0dGVyczogL1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2dcbn0sIHtcbiAgYmFzZTogJ1InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nXG59LCB7XG4gIGJhc2U6ICdTJyxcbiAgbGV0dGVyczogL1tcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NF0vZ1xufSwge1xuICBiYXNlOiAnVCcsXG4gIGxldHRlcnM6IC9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nXG59LCB7XG4gIGJhc2U6ICdUWicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOF0vZ1xufSwge1xuICBiYXNlOiAnVScsXG4gIGxldHRlcnM6IC9bXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NF0vZ1xufSwge1xuICBiYXNlOiAnVicsXG4gIGxldHRlcnM6IC9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2dcbn0sIHtcbiAgYmFzZTogJ1ZZJyxcbiAgbGV0dGVyczogL1tcXHVBNzYwXS9nXG59LCB7XG4gIGJhc2U6ICdXJyxcbiAgbGV0dGVyczogL1tcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyXS9nXG59LCB7XG4gIGJhc2U6ICdYJyxcbiAgbGV0dGVyczogL1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ1xufSwge1xuICBiYXNlOiAnWScsXG4gIGxldHRlcnM6IC9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nXG59LCB7XG4gIGJhc2U6ICdaJyxcbiAgbGV0dGVyczogL1tcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2Ml0vZ1xufSwge1xuICBiYXNlOiAnYScsXG4gIGxldHRlcnM6IC9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2dcbn0sIHtcbiAgYmFzZTogJ2FhJyxcbiAgbGV0dGVyczogL1tcXHVBNzMzXS9nXG59LCB7XG4gIGJhc2U6ICdhZScsXG4gIGxldHRlcnM6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nXG59LCB7XG4gIGJhc2U6ICdhbycsXG4gIGxldHRlcnM6IC9bXFx1QTczNV0vZ1xufSwge1xuICBiYXNlOiAnYXUnLFxuICBsZXR0ZXJzOiAvW1xcdUE3MzddL2dcbn0sIHtcbiAgYmFzZTogJ2F2JyxcbiAgbGV0dGVyczogL1tcXHVBNzM5XFx1QTczQl0vZ1xufSwge1xuICBiYXNlOiAnYXknLFxuICBsZXR0ZXJzOiAvW1xcdUE3M0RdL2dcbn0sIHtcbiAgYmFzZTogJ2InLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZ1xufSwge1xuICBiYXNlOiAnYycsXG4gIGxldHRlcnM6IC9bXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NF0vZ1xufSwge1xuICBiYXNlOiAnZCcsXG4gIGxldHRlcnM6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2dcbn0sIHtcbiAgYmFzZTogJ2R6JyxcbiAgbGV0dGVyczogL1tcXHUwMUYzXFx1MDFDNl0vZ1xufSwge1xuICBiYXNlOiAnZScsXG4gIGxldHRlcnM6IC9bXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERF0vZ1xufSwge1xuICBiYXNlOiAnZicsXG4gIGxldHRlcnM6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nXG59LCB7XG4gIGJhc2U6ICdnJyxcbiAgbGV0dGVyczogL1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2dcbn0sIHtcbiAgYmFzZTogJ2gnLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZ1xufSwge1xuICBiYXNlOiAnaHYnLFxuICBsZXR0ZXJzOiAvW1xcdTAxOTVdL2dcbn0sIHtcbiAgYmFzZTogJ2knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nXG59LCB7XG4gIGJhc2U6ICdqJyxcbiAgbGV0dGVyczogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2dcbn0sIHtcbiAgYmFzZTogJ2snLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nXG59LCB7XG4gIGJhc2U6ICdsJyxcbiAgbGV0dGVyczogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nXG59LCB7XG4gIGJhc2U6ICdsaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDOV0vZ1xufSwge1xuICBiYXNlOiAnbScsXG4gIGxldHRlcnM6IC9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2dcbn0sIHtcbiAgYmFzZTogJ24nLFxuICBsZXR0ZXJzOiAvW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nXG59LCB7XG4gIGJhc2U6ICduaicsXG4gIGxldHRlcnM6IC9bXFx1MDFDQ10vZ1xufSwge1xuICBiYXNlOiAnbycsXG4gIGxldHRlcnM6IC9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ1xufSwge1xuICBiYXNlOiAnb2knLFxuICBsZXR0ZXJzOiAvW1xcdTAxQTNdL2dcbn0sIHtcbiAgYmFzZTogJ291JyxcbiAgbGV0dGVyczogL1tcXHUwMjIzXS9nXG59LCB7XG4gIGJhc2U6ICdvbycsXG4gIGxldHRlcnM6IC9bXFx1QTc0Rl0vZ1xufSwge1xuICBiYXNlOiAncCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZ1xufSwge1xuICBiYXNlOiAncScsXG4gIGxldHRlcnM6IC9bXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5XS9nXG59LCB7XG4gIGJhc2U6ICdyJyxcbiAgbGV0dGVyczogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ1xufSwge1xuICBiYXNlOiAncycsXG4gIGxldHRlcnM6IC9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nXG59LCB7XG4gIGJhc2U6ICd0JyxcbiAgbGV0dGVyczogL1tcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3XS9nXG59LCB7XG4gIGJhc2U6ICd0eicsXG4gIGxldHRlcnM6IC9bXFx1QTcyOV0vZ1xufSwge1xuICBiYXNlOiAndScsXG4gIGxldHRlcnM6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ1xufSwge1xuICBiYXNlOiAndicsXG4gIGxldHRlcnM6IC9bXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOENdL2dcbn0sIHtcbiAgYmFzZTogJ3Z5JyxcbiAgbGV0dGVyczogL1tcXHVBNzYxXS9nXG59LCB7XG4gIGJhc2U6ICd3JyxcbiAgbGV0dGVyczogL1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZ1xufSwge1xuICBiYXNlOiAneCcsXG4gIGxldHRlcnM6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2dcbn0sIHtcbiAgYmFzZTogJ3knLFxuICBsZXR0ZXJzOiAvW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2dcbn0sIHtcbiAgYmFzZTogJ3onLFxuICBsZXR0ZXJzOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nXG59XTtcbnZhciBzdHJpcERpYWNyaXRpY3MgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlhY3JpdGljcy5sZW5ndGg7IGkrKykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGRpYWNyaXRpY3NbaV0ubGV0dGVycywgZGlhY3JpdGljc1tpXS5iYXNlKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG52YXIgdHJpbVN0cmluZyA9IGZ1bmN0aW9uIHRyaW1TdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxudmFyIGRlZmF1bHRTdHJpbmdpZnkgPSBmdW5jdGlvbiBkZWZhdWx0U3RyaW5naWZ5KG9wdGlvbikge1xuICByZXR1cm4gXCJcIi5jb25jYXQob3B0aW9uLmxhYmVsLCBcIiBcIikuY29uY2F0KG9wdGlvbi52YWx1ZSk7XG59O1xuXG52YXIgY3JlYXRlRmlsdGVyID0gZnVuY3Rpb24gY3JlYXRlRmlsdGVyKGNvbmZpZykge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbiwgcmF3SW5wdXQpIHtcbiAgICB2YXIgX2lnbm9yZUNhc2UkaWdub3JlQWNjID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBpZ25vcmVDYXNlOiB0cnVlLFxuICAgICAgaWdub3JlQWNjZW50czogdHJ1ZSxcbiAgICAgIHN0cmluZ2lmeTogZGVmYXVsdFN0cmluZ2lmeSxcbiAgICAgIHRyaW06IHRydWUsXG4gICAgICBtYXRjaEZyb206ICdhbnknXG4gICAgfSwgY29uZmlnKSxcbiAgICAgICAgaWdub3JlQ2FzZSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5pZ25vcmVDYXNlLFxuICAgICAgICBpZ25vcmVBY2NlbnRzID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLmlnbm9yZUFjY2VudHMsXG4gICAgICAgIHN0cmluZ2lmeSA9IF9pZ25vcmVDYXNlJGlnbm9yZUFjYy5zdHJpbmdpZnksXG4gICAgICAgIHRyaW0gPSBfaWdub3JlQ2FzZSRpZ25vcmVBY2MudHJpbSxcbiAgICAgICAgbWF0Y2hGcm9tID0gX2lnbm9yZUNhc2UkaWdub3JlQWNjLm1hdGNoRnJvbTtcblxuICAgIHZhciBpbnB1dCA9IHRyaW0gPyB0cmltU3RyaW5nKHJhd0lucHV0KSA6IHJhd0lucHV0O1xuICAgIHZhciBjYW5kaWRhdGUgPSB0cmltID8gdHJpbVN0cmluZyhzdHJpbmdpZnkob3B0aW9uKSkgOiBzdHJpbmdpZnkob3B0aW9uKTtcblxuICAgIGlmIChpZ25vcmVDYXNlKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQWNjZW50cykge1xuICAgICAgaW5wdXQgPSBzdHJpcERpYWNyaXRpY3MoaW5wdXQpO1xuICAgICAgY2FuZGlkYXRlID0gc3RyaXBEaWFjcml0aWNzKGNhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoRnJvbSA9PT0gJ3N0YXJ0JyA/IGNhbmRpZGF0ZS5zdWJzdHIoMCwgaW5wdXQubGVuZ3RoKSA9PT0gaW5wdXQgOiBjYW5kaWRhdGUuaW5kZXhPZihpbnB1dCkgPiAtMTtcbiAgfTtcbn07XG5cbnZhciBBMTF5VGV4dCA9IGZ1bmN0aW9uIEExMXlUZXh0KHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3Moe1xuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmVkJyxcbiAgICAgIGNvbG9yOiAnYmx1ZSdcbiAgICB9KVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIER1bW15SW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKER1bW15SW5wdXQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIER1bW15SW5wdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIER1bW15SW5wdXQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEdW1teUlucHV0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEdW1teUlucHV0LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpblByb3AgPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgICBvdXQgPSBfdGhpcyRwcm9wcy5vdXQsXG4gICAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgICBhcHBlYXIgPSBfdGhpcyRwcm9wcy5hcHBlYXIsXG4gICAgICAgICAgZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgICBleGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIGVtb3Rpb24gPSBfdGhpcyRwcm9wcy5lbW90aW9uLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBbXCJpblwiLCBcIm91dFwiLCBcIm9uRXhpdGVkXCIsIFwiYXBwZWFyXCIsIFwiZW50ZXJcIiwgXCJleGl0XCIsIFwiaW5uZXJSZWZcIiwgXCJlbW90aW9uXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTpcbiAgICAgICAgLyojX19QVVJFX18qL1xuXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgY3NzKHtcbiAgICAgICAgICAvLyBnZXQgcmlkIG9mIGFueSBkZWZhdWx0IHN0eWxlc1xuICAgICAgICAgIGJhY2tncm91bmQ6IDAsXG4gICAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgIC8vIGltcG9ydGFudCEgd2l0aG91dCBgd2lkdGhgIGJyb3dzZXJzIHdvbid0IGFsbG93IGZvY3VzXG4gICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBkZXNrdG9wXG4gICAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICAgIGxlZnQ6IC0xMDAsXG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSdcbiAgICAgICAgfSlcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHVtbXlJbnB1dDtcbn0oQ29tcG9uZW50KTtcblxudmFyIE5vZGVSZXNvbHZlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTm9kZVJlc29sdmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOb2RlUmVzb2x2ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVSZXNvbHZlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE5vZGVSZXNvbHZlcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm9kZVJlc29sdmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMuaW5uZXJSZWYoZmluZERPTU5vZGUodGhpcykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMuaW5uZXJSZWYobnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm9kZVJlc29sdmVyO1xufShDb21wb25lbnQpO1xuXG52YXIgU1RZTEVfS0VZUyA9IFsnYm94U2l6aW5nJywgJ2hlaWdodCcsICdvdmVyZmxvdycsICdwYWRkaW5nUmlnaHQnLCAncG9zaXRpb24nXTtcbnZhciBMT0NLX1NUWUxFUyA9IHtcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIGFjY291bnQgZm9yIHBvc3NpYmxlIGRlY2xhcmF0aW9uIGB3aWR0aDogMTAwJTtgIG9uIGJvZHlcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn07XG5cbmZ1bmN0aW9uIHByZXZlbnRUb3VjaE1vdmUoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5mdW5jdGlvbiBhbGxvd1RvdWNoTW92ZShlKSB7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5mdW5jdGlvbiBwcmV2ZW50SW5lcnRpYVNjcm9sbCgpIHtcbiAgdmFyIHRvcCA9IHRoaXMuc2Nyb2xsVG9wO1xuICB2YXIgdG90YWxTY3JvbGwgPSB0aGlzLnNjcm9sbEhlaWdodDtcbiAgdmFyIGN1cnJlbnRTY3JvbGwgPSB0b3AgKyB0aGlzLm9mZnNldEhlaWdodDtcblxuICBpZiAodG9wID09PSAwKSB7XG4gICAgdGhpcy5zY3JvbGxUb3AgPSAxO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRTY3JvbGwgPT09IHRvdGFsU2Nyb2xsKSB7XG4gICAgdGhpcy5zY3JvbGxUb3AgPSB0b3AgLSAxO1xuICB9XG59IC8vIGBvbnRvdWNoc3RhcnRgIGNoZWNrIHdvcmtzIG9uIG1vc3QgYnJvd3NlcnNcbi8vIGBtYXhUb3VjaFBvaW50c2Agd29ya3Mgb24gSUUxMC8xMSBhbmQgU3VyZmFjZVxuXG5mdW5jdGlvbiBpc1RvdWNoRGV2aWNlKCkge1xuICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cztcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG52YXIgYWN0aXZlU2Nyb2xsTG9ja3MgPSAwO1xuXG52YXIgU2Nyb2xsTG9jayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsTG9jaywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsTG9jaygpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxMb2NrKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNjcm9sbExvY2spKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvcmlnaW5hbFN0eWxlc1wiLCB7fSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwibGlzdGVuZXJPcHRpb25zXCIsIHtcbiAgICAgIGNhcHR1cmU6IGZhbHNlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxMb2NrLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIWNhblVzZURPTSkgcmV0dXJuO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY2NvdW50Rm9yU2Nyb2xsYmFycyA9IF90aGlzJHByb3BzLmFjY291bnRGb3JTY3JvbGxiYXJzLFxuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0ID0gX3RoaXMkcHJvcHMudG91Y2hTY3JvbGxUYXJnZXQ7XG4gICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgIHZhciB0YXJnZXRTdHlsZSA9IHRhcmdldCAmJiB0YXJnZXQuc3R5bGU7XG5cbiAgICAgIGlmIChhY2NvdW50Rm9yU2Nyb2xsYmFycykge1xuICAgICAgICAvLyBzdG9yZSBhbnkgc3R5bGVzIGFscmVhZHkgYXBwbGllZCB0byB0aGUgYm9keVxuICAgICAgICBTVFlMRV9LRVlTLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHZhciB2YWwgPSB0YXJnZXRTdHlsZSAmJiB0YXJnZXRTdHlsZVtrZXldO1xuICAgICAgICAgIF90aGlzMi5vcmlnaW5hbFN0eWxlc1trZXldID0gdmFsO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gYXBwbHkgdGhlIGxvY2sgc3R5bGVzIGFuZCBwYWRkaW5nIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHNjcm9sbCBsb2NrXG5cblxuICAgICAgaWYgKGFjY291bnRGb3JTY3JvbGxiYXJzICYmIGFjdGl2ZVNjcm9sbExvY2tzIDwgMSkge1xuICAgICAgICB2YXIgY3VycmVudFBhZGRpbmcgPSBwYXJzZUludCh0aGlzLm9yaWdpbmFsU3R5bGVzLnBhZGRpbmdSaWdodCwgMTApIHx8IDA7XG4gICAgICAgIHZhciBjbGllbnRXaWR0aCA9IGRvY3VtZW50LmJvZHkgPyBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDogMDtcbiAgICAgICAgdmFyIGFkanVzdGVkUGFkZGluZyA9IHdpbmRvdy5pbm5lcldpZHRoIC0gY2xpZW50V2lkdGggKyBjdXJyZW50UGFkZGluZyB8fCAwO1xuICAgICAgICBPYmplY3Qua2V5cyhMT0NLX1NUWUxFUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHZhbCA9IExPQ0tfU1RZTEVTW2tleV07XG5cbiAgICAgICAgICBpZiAodGFyZ2V0U3R5bGUpIHtcbiAgICAgICAgICAgIHRhcmdldFN0eWxlW2tleV0gPSB2YWw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGFyZ2V0U3R5bGUpIHtcbiAgICAgICAgICB0YXJnZXRTdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChhZGp1c3RlZFBhZGRpbmcsIFwicHhcIik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gYWNjb3VudCBmb3IgdG91Y2ggZGV2aWNlc1xuXG5cbiAgICAgIGlmICh0YXJnZXQgJiYgaXNUb3VjaERldmljZSgpKSB7XG4gICAgICAgIC8vIE1vYmlsZSBTYWZhcmkgaWdub3JlcyB7IG92ZXJmbG93OiBoaWRkZW4gfSBkZWNsYXJhdGlvbiBvbiB0aGUgYm9keS5cbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnRUb3VjaE1vdmUsIHRoaXMubGlzdGVuZXJPcHRpb25zKTsgLy8gQWxsb3cgc2Nyb2xsIG9uIHByb3ZpZGVkIHRhcmdldFxuXG4gICAgICAgIGlmICh0b3VjaFNjcm9sbFRhcmdldCkge1xuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBwcmV2ZW50SW5lcnRpYVNjcm9sbCwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGFsbG93VG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gaW5jcmVtZW50IGFjdGl2ZSBzY3JvbGwgbG9ja3NcblxuXG4gICAgICBhY3RpdmVTY3JvbGxMb2NrcyArPSAxO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIWNhblVzZURPTSkgcmV0dXJuO1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWNjb3VudEZvclNjcm9sbGJhcnMgPSBfdGhpcyRwcm9wczIuYWNjb3VudEZvclNjcm9sbGJhcnMsXG4gICAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQgPSBfdGhpcyRwcm9wczIudG91Y2hTY3JvbGxUYXJnZXQ7XG4gICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgIHZhciB0YXJnZXRTdHlsZSA9IHRhcmdldCAmJiB0YXJnZXQuc3R5bGU7IC8vIHNhZmVseSBkZWNyZW1lbnQgYWN0aXZlIHNjcm9sbCBsb2Nrc1xuXG4gICAgICBhY3RpdmVTY3JvbGxMb2NrcyA9IE1hdGgubWF4KGFjdGl2ZVNjcm9sbExvY2tzIC0gMSwgMCk7IC8vIHJlYXBwbHkgb3JpZ2luYWwgYm9keSBzdHlsZXMsIGlmIGFueVxuXG4gICAgICBpZiAoYWNjb3VudEZvclNjcm9sbGJhcnMgJiYgYWN0aXZlU2Nyb2xsTG9ja3MgPCAxKSB7XG4gICAgICAgIFNUWUxFX0tFWVMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHZhbCA9IF90aGlzMy5vcmlnaW5hbFN0eWxlc1trZXldO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgICAgICAgICB0YXJnZXRTdHlsZVtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IC8vIHJlbW92ZSB0b3VjaCBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAodGFyZ2V0ICYmIGlzVG91Y2hEZXZpY2UoKSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcHJldmVudFRvdWNoTW92ZSwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuXG4gICAgICAgIGlmICh0b3VjaFNjcm9sbFRhcmdldCkge1xuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBwcmV2ZW50SW5lcnRpYVNjcm9sbCwgdGhpcy5saXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGFsbG93VG91Y2hNb3ZlLCB0aGlzLmxpc3RlbmVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxMb2NrO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsTG9jaywgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhY2NvdW50Rm9yU2Nyb2xsYmFyczogdHJ1ZVxufSk7XG5cbi8vIE5PVEU6XG4vLyBXZSBzaG91bGRuJ3QgbmVlZCB0aGlzIGFmdGVyIHVwZGF0aW5nIHRvIFJlYWN0IHYxNi4zLjAsIHdoaWNoIGludHJvZHVjZXM6XG4vLyAtIGNyZWF0ZVJlZigpIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNyZWF0ZXJlZlxuLy8gLSBmb3J3YXJkUmVmKCkgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Zm9yd2FyZHJlZlxudmFyIFNjcm9sbEJsb2NrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsQmxvY2ssIF9QdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxCbG9jaygpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxCbG9jayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTY3JvbGxCbG9jaykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInN0YXRlXCIsIHtcbiAgICAgIHRvdWNoU2Nyb2xsVGFyZ2V0OiBudWxsXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0U2Nyb2xsVGFyZ2V0XCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIGlmIChyZWYgPT09IF90aGlzLnN0YXRlLnRvdWNoU2Nyb2xsVGFyZ2V0KSByZXR1cm47XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQ6IHJlZlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiYmx1clNlbGVjdElucHV0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcm9sbEJsb2NrLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGlzRW5hYmxlZCA9IF90aGlzJHByb3BzLmlzRW5hYmxlZDtcbiAgICAgIHZhciB0b3VjaFNjcm9sbFRhcmdldCA9IHRoaXMuc3RhdGUudG91Y2hTY3JvbGxUYXJnZXQ7IC8vIGJhaWwgZWFybHkgaWYgbm90IGVuYWJsZWRcblxuICAgICAgaWYgKCFpc0VuYWJsZWQpIHJldHVybiBjaGlsZHJlbjtcbiAgICAgIC8qXG4gICAgICAgKiBEaXZcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogYmxvY2tzIHNjcm9sbGluZyBvbiBub24tYm9keSBlbGVtZW50cyBiZWhpbmQgdGhlIG1lbnVcbiAgICAgICAgKiBOb2RlUmVzb2x2ZXJcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogd2UgbmVlZCBhIHJlZmVyZW5jZSB0byB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50IHRvIFwidW5sb2NrXCIgc2Nyb2xsIG9uXG4gICAgICAgKiBtb2JpbGUgZGV2aWNlc1xuICAgICAgICAqIFNjcm9sbExvY2tcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogYWN0dWFsbHkgZG9lcyB0aGUgc2Nyb2xsIGxvY2tpbmdcbiAgICAgICAqL1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogdGhpcy5ibHVyU2VsZWN0SW5wdXQsXG4gICAgICAgIGNsYXNzTmFtZTpcbiAgICAgICAgLyojX19QVVJFX18qL1xuXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgY3NzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICB0b3A6IDBcbiAgICAgICAgfSlcbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KE5vZGVSZXNvbHZlciwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRTY3JvbGxUYXJnZXRcbiAgICAgIH0sIGNoaWxkcmVuKSwgdG91Y2hTY3JvbGxUYXJnZXQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbExvY2ssIHtcbiAgICAgICAgdG91Y2hTY3JvbGxUYXJnZXQ6IHRvdWNoU2Nyb2xsVGFyZ2V0XG4gICAgICB9KSA6IG51bGwpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxCbG9jaztcbn0oUHVyZUNvbXBvbmVudCk7XG5cbnZhciBTY3JvbGxDYXB0b3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNjcm9sbENhcHRvciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsQ2FwdG9yKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbENhcHRvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTY3JvbGxDYXB0b3IpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpc0JvdHRvbVwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaXNUb3BcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNjcm9sbFRhcmdldFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInRvdWNoU3RhcnRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjYW5jZWxTY3JvbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlRXZlbnREZWx0YVwiLCBmdW5jdGlvbiAoZXZlbnQsIGRlbHRhKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkJvdHRvbUFycml2ZSA9IF90aGlzJHByb3BzLm9uQm90dG9tQXJyaXZlLFxuICAgICAgICAgIG9uQm90dG9tTGVhdmUgPSBfdGhpcyRwcm9wcy5vbkJvdHRvbUxlYXZlLFxuICAgICAgICAgIG9uVG9wQXJyaXZlID0gX3RoaXMkcHJvcHMub25Ub3BBcnJpdmUsXG4gICAgICAgICAgb25Ub3BMZWF2ZSA9IF90aGlzJHByb3BzLm9uVG9wTGVhdmU7XG4gICAgICB2YXIgX3RoaXMkc2Nyb2xsVGFyZ2V0ID0gX3RoaXMuc2Nyb2xsVGFyZ2V0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHNjcm9sbFRhcmdldC5zY3JvbGxUb3AsXG4gICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3RoaXMkc2Nyb2xsVGFyZ2V0LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICBjbGllbnRIZWlnaHQgPSBfdGhpcyRzY3JvbGxUYXJnZXQuY2xpZW50SGVpZ2h0O1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLnNjcm9sbFRhcmdldDtcbiAgICAgIHZhciBpc0RlbHRhUG9zaXRpdmUgPSBkZWx0YSA+IDA7XG4gICAgICB2YXIgYXZhaWxhYmxlU2Nyb2xsID0gc2Nyb2xsSGVpZ2h0IC0gY2xpZW50SGVpZ2h0IC0gc2Nyb2xsVG9wO1xuICAgICAgdmFyIHNob3VsZENhbmNlbFNjcm9sbCA9IGZhbHNlOyAvLyByZXNldCBib3R0b20vdG9wIGZsYWdzXG5cbiAgICAgIGlmIChhdmFpbGFibGVTY3JvbGwgPiBkZWx0YSAmJiBfdGhpcy5pc0JvdHRvbSkge1xuICAgICAgICBpZiAob25Cb3R0b21MZWF2ZSkgb25Cb3R0b21MZWF2ZShldmVudCk7XG4gICAgICAgIF90aGlzLmlzQm90dG9tID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RlbHRhUG9zaXRpdmUgJiYgX3RoaXMuaXNUb3ApIHtcbiAgICAgICAgaWYgKG9uVG9wTGVhdmUpIG9uVG9wTGVhdmUoZXZlbnQpO1xuICAgICAgICBfdGhpcy5pc1RvcCA9IGZhbHNlO1xuICAgICAgfSAvLyBib3R0b20gbGltaXRcblxuXG4gICAgICBpZiAoaXNEZWx0YVBvc2l0aXZlICYmIGRlbHRhID4gYXZhaWxhYmxlU2Nyb2xsKSB7XG4gICAgICAgIGlmIChvbkJvdHRvbUFycml2ZSAmJiAhX3RoaXMuaXNCb3R0b20pIHtcbiAgICAgICAgICBvbkJvdHRvbUFycml2ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuc2Nyb2xsVG9wID0gc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBzaG91bGRDYW5jZWxTY3JvbGwgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pc0JvdHRvbSA9IHRydWU7IC8vIHRvcCBsaW1pdFxuICAgICAgfSBlbHNlIGlmICghaXNEZWx0YVBvc2l0aXZlICYmIC1kZWx0YSA+IHNjcm9sbFRvcCkge1xuICAgICAgICBpZiAob25Ub3BBcnJpdmUgJiYgIV90aGlzLmlzVG9wKSB7XG4gICAgICAgICAgb25Ub3BBcnJpdmUoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHNob3VsZENhbmNlbFNjcm9sbCA9IHRydWU7XG4gICAgICAgIF90aGlzLmlzVG9wID0gdHJ1ZTtcbiAgICAgIH0gLy8gY2FuY2VsIHNjcm9sbFxuXG5cbiAgICAgIGlmIChzaG91bGRDYW5jZWxTY3JvbGwpIHtcbiAgICAgICAgX3RoaXMuY2FuY2VsU2Nyb2xsKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbldoZWVsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuaGFuZGxlRXZlbnREZWx0YShldmVudCwgZXZlbnQuZGVsdGFZKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvblRvdWNoU3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBzZXQgdG91Y2ggc3RhcnQgc28gd2UgY2FuIGNhbGN1bGF0ZSB0b3VjaG1vdmUgZGVsdGFcbiAgICAgIF90aGlzLnRvdWNoU3RhcnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hNb3ZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGRlbHRhWSA9IF90aGlzLnRvdWNoU3RhcnQgLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuXG4gICAgICBfdGhpcy5oYW5kbGVFdmVudERlbHRhKGV2ZW50LCBkZWx0YVkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFNjcm9sbFRhcmdldFwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zY3JvbGxUYXJnZXQgPSByZWY7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQ2FwdG9yLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmcodGhpcy5zY3JvbGxUYXJnZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuc3RvcExpc3RlbmluZyh0aGlzLnNjcm9sbFRhcmdldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0TGlzdGVuaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nKGVsKSB7XG4gICAgICAvLyBiYWlsIGVhcmx5IGlmIG5vIHNjcm9sbCBhdmFpbGFibGVcbiAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgIGlmIChlbC5zY3JvbGxIZWlnaHQgPD0gZWwuY2xpZW50SGVpZ2h0KSByZXR1cm47IC8vIGFsbCB0aGUgaWYgc3RhdGVtZW50cyBhcmUgdG8gYXBwZWFzZSBGbG93IPCfmKJcblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWwuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKGVsKSB7XG4gICAgICAvLyBiYWlsIGVhcmx5IGlmIG5vIHNjcm9sbCBhdmFpbGFibGVcbiAgICAgIGlmIChlbC5zY3JvbGxIZWlnaHQgPD0gZWwuY2xpZW50SGVpZ2h0KSByZXR1cm47IC8vIGFsbCB0aGUgaWYgc3RhdGVtZW50cyBhcmUgdG8gYXBwZWFzZSBGbG93IPCfmKJcblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlbC5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE5vZGVSZXNvbHZlciwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5nZXRTY3JvbGxUYXJnZXRcbiAgICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxDYXB0b3I7XG59KENvbXBvbmVudCk7XG5cbnZhciBTY3JvbGxDYXB0b3JTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gIF9pbmhlcml0cyhTY3JvbGxDYXB0b3JTd2l0Y2gsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBTY3JvbGxDYXB0b3JTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbENhcHRvclN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNjcm9sbENhcHRvclN3aXRjaCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQ2FwdG9yU3dpdGNoLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNFbmFibGVkID0gX3RoaXMkcHJvcHMyLmlzRW5hYmxlZCxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcImlzRW5hYmxlZFwiXSk7XG5cbiAgICAgIHJldHVybiBpc0VuYWJsZWQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbENhcHRvciwgcHJvcHMpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Nyb2xsQ2FwdG9yU3dpdGNoO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsQ2FwdG9yU3dpdGNoLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGlzRW5hYmxlZDogdHJ1ZVxufSk7XG5cbnZhciBpbnN0cnVjdGlvbnNBcmlhTWVzc2FnZSA9IGZ1bmN0aW9uIGluc3RydWN0aW9uc0FyaWFNZXNzYWdlKGV2ZW50KSB7XG4gIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIGlzU2VhcmNoYWJsZSA9IGNvbnRleHQuaXNTZWFyY2hhYmxlLFxuICAgICAgaXNNdWx0aSA9IGNvbnRleHQuaXNNdWx0aSxcbiAgICAgIGxhYmVsID0gY29udGV4dC5sYWJlbDtcblxuICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgY2FzZSAnbWVudSc6XG4gICAgICByZXR1cm4gJ1VzZSBVcCBhbmQgRG93biB0byBjaG9vc2Ugb3B0aW9ucywgcHJlc3MgRW50ZXIgdG8gc2VsZWN0IHRoZSBjdXJyZW50bHkgZm9jdXNlZCBvcHRpb24sIHByZXNzIEVzY2FwZSB0byBleGl0IHRoZSBtZW51LCBwcmVzcyBUYWIgdG8gc2VsZWN0IHRoZSBvcHRpb24gYW5kIGV4aXQgdGhlIG1lbnUuJztcblxuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChsYWJlbCA/IGxhYmVsIDogJ1NlbGVjdCcsIFwiIGlzIGZvY3VzZWQgXCIpLmNvbmNhdChpc1NlYXJjaGFibGUgPyAnLHR5cGUgdG8gcmVmaW5lIGxpc3QnIDogJycsIFwiLCBwcmVzcyBEb3duIHRvIG9wZW4gdGhlIG1lbnUsIFwiKS5jb25jYXQoaXNNdWx0aSA/ICcgcHJlc3MgbGVmdCB0byBmb2N1cyBzZWxlY3RlZCB2YWx1ZXMnIDogJycpO1xuXG4gICAgY2FzZSAndmFsdWUnOlxuICAgICAgcmV0dXJuICdVc2UgbGVmdCBhbmQgcmlnaHQgdG8gdG9nZ2xlIGJldHdlZW4gZm9jdXNlZCB2YWx1ZXMsIHByZXNzIEJhY2tzcGFjZSB0byByZW1vdmUgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHZhbHVlJztcbiAgfVxufTtcbnZhciB2YWx1ZUV2ZW50QXJpYU1lc3NhZ2UgPSBmdW5jdGlvbiB2YWx1ZUV2ZW50QXJpYU1lc3NhZ2UoZXZlbnQsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gY29udGV4dC52YWx1ZTtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gIHN3aXRjaCAoZXZlbnQpIHtcbiAgICBjYXNlICdkZXNlbGVjdC1vcHRpb24nOlxuICAgIGNhc2UgJ3BvcC12YWx1ZSc6XG4gICAgY2FzZSAncmVtb3ZlLXZhbHVlJzpcbiAgICAgIHJldHVybiBcIm9wdGlvbiBcIi5jb25jYXQodmFsdWUsIFwiLCBkZXNlbGVjdGVkLlwiKTtcblxuICAgIGNhc2UgJ3NlbGVjdC1vcHRpb24nOlxuICAgICAgcmV0dXJuIFwib3B0aW9uIFwiLmNvbmNhdCh2YWx1ZSwgXCIsIHNlbGVjdGVkLlwiKTtcbiAgfVxufTtcbnZhciB2YWx1ZUZvY3VzQXJpYU1lc3NhZ2UgPSBmdW5jdGlvbiB2YWx1ZUZvY3VzQXJpYU1lc3NhZ2UoX3JlZikge1xuICB2YXIgZm9jdXNlZFZhbHVlID0gX3JlZi5mb2N1c2VkVmFsdWUsXG4gICAgICBnZXRPcHRpb25MYWJlbCA9IF9yZWYuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICBzZWxlY3RWYWx1ZSA9IF9yZWYuc2VsZWN0VmFsdWU7XG4gIHJldHVybiBcInZhbHVlIFwiLmNvbmNhdChnZXRPcHRpb25MYWJlbChmb2N1c2VkVmFsdWUpLCBcIiBmb2N1c2VkLCBcIikuY29uY2F0KHNlbGVjdFZhbHVlLmluZGV4T2YoZm9jdXNlZFZhbHVlKSArIDEsIFwiIG9mIFwiKS5jb25jYXQoc2VsZWN0VmFsdWUubGVuZ3RoLCBcIi5cIik7XG59O1xudmFyIG9wdGlvbkZvY3VzQXJpYU1lc3NhZ2UgPSBmdW5jdGlvbiBvcHRpb25Gb2N1c0FyaWFNZXNzYWdlKF9yZWYyKSB7XG4gIHZhciBmb2N1c2VkT3B0aW9uID0gX3JlZjIuZm9jdXNlZE9wdGlvbixcbiAgICAgIGdldE9wdGlvbkxhYmVsID0gX3JlZjIuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgcmV0dXJuIFwib3B0aW9uIFwiLmNvbmNhdChnZXRPcHRpb25MYWJlbChmb2N1c2VkT3B0aW9uKSwgXCIgZm9jdXNlZCwgXCIpLmNvbmNhdChvcHRpb25zLmluZGV4T2YoZm9jdXNlZE9wdGlvbikgKyAxLCBcIiBvZiBcIikuY29uY2F0KG9wdGlvbnMubGVuZ3RoLCBcIi5cIik7XG59O1xudmFyIHJlc3VsdHNBcmlhTWVzc2FnZSA9IGZ1bmN0aW9uIHJlc3VsdHNBcmlhTWVzc2FnZShfcmVmMykge1xuICB2YXIgaW5wdXRWYWx1ZSA9IF9yZWYzLmlucHV0VmFsdWUsXG4gICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlID0gX3JlZjMuc2NyZWVuUmVhZGVyTWVzc2FnZTtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHNjcmVlblJlYWRlck1lc3NhZ2UpLmNvbmNhdChpbnB1dFZhbHVlID8gJyBmb3Igc2VhcmNoIHRlcm0gJyArIGlucHV0VmFsdWUgOiAnJywgXCIuXCIpO1xufTtcblxudmFyIGZvcm1hdEdyb3VwTGFiZWwgPSBmdW5jdGlvbiBmb3JtYXRHcm91cExhYmVsKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5sYWJlbDtcbn07XG52YXIgZ2V0T3B0aW9uTGFiZWwgPSBmdW5jdGlvbiBnZXRPcHRpb25MYWJlbChvcHRpb24pIHtcbiAgcmV0dXJuIG9wdGlvbi5sYWJlbDtcbn07XG52YXIgZ2V0T3B0aW9uVmFsdWUgPSBmdW5jdGlvbiBnZXRPcHRpb25WYWx1ZShvcHRpb24pIHtcbiAgcmV0dXJuIG9wdGlvbi52YWx1ZTtcbn07XG52YXIgaXNPcHRpb25EaXNhYmxlZCA9IGZ1bmN0aW9uIGlzT3B0aW9uRGlzYWJsZWQob3B0aW9uKSB7XG4gIHJldHVybiAhIW9wdGlvbi5pc0Rpc2FibGVkO1xufTtcblxudmFyIGNvbnRhaW5lckNTUyA9IGZ1bmN0aW9uIGNvbnRhaW5lckNTUyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNSdGwgPSBfcmVmLmlzUnRsO1xuICByZXR1cm4ge1xuICAgIGRpcmVjdGlvbjogaXNSdGwgPyAncnRsJyA6IG51bGwsXG4gICAgcG9pbnRlckV2ZW50czogaXNEaXNhYmxlZCA/ICdub25lJyA6IG51bGwsXG4gICAgLy8gY2FuY2VsIG1vdXNlIGV2ZW50cyB3aGVuIGRpc2FibGVkXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfTtcbn07XG52YXIgU2VsZWN0Q29udGFpbmVyID0gZnVuY3Rpb24gU2VsZWN0Q29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgaXNEaXNhYmxlZCA9IHByb3BzLmlzRGlzYWJsZWQsXG4gICAgICBpc1J0bCA9IHByb3BzLmlzUnRsO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnY29udGFpbmVyJywgcHJvcHMpKSwge1xuICAgICAgJy0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJy0taXMtcnRsJzogaXNSdGxcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFZhbHVlIENvbnRhaW5lclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciB2YWx1ZUNvbnRhaW5lckNTUyA9IGZ1bmN0aW9uIHZhbHVlQ29udGFpbmVyQ1NTKF9yZWYyKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZjIudGhlbWUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleDogMSxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgLyAyLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZy5iYXNlVW5pdCAqIDIsIFwicHhcIiksXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH07XG59O1xudmFyIFZhbHVlQ29udGFpbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWYWx1ZUNvbnRhaW5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVmFsdWVDb250YWluZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbHVlQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVmFsdWVDb250YWluZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhbHVlQ29udGFpbmVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjeCA9IF90aGlzJHByb3BzLmN4LFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wcy5pc011bHRpLFxuICAgICAgICAgIGdldFN0eWxlcyA9IF90aGlzJHByb3BzLmdldFN0eWxlcyxcbiAgICAgICAgICBoYXNWYWx1ZSA9IF90aGlzJHByb3BzLmhhc1ZhbHVlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGN4KFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIGNzcyhnZXRTdHlsZXMoJ3ZhbHVlQ29udGFpbmVyJywgdGhpcy5wcm9wcykpLCB7XG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lcic6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlLWNvbnRhaW5lci0taXMtbXVsdGknOiBpc011bHRpLFxuICAgICAgICAgICd2YWx1ZS1jb250YWluZXItLWhhcy12YWx1ZSc6IGhhc1ZhbHVlXG4gICAgICAgIH0sIGNsYXNzTmFtZSlcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWVDb250YWluZXI7XG59KENvbXBvbmVudCk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gSW5kaWNhdG9yIENvbnRhaW5lclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBpbmRpY2F0b3JzQ29udGFpbmVyQ1NTID0gZnVuY3Rpb24gaW5kaWNhdG9yc0NvbnRhaW5lckNTUygpIHtcbiAgcmV0dXJuIHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFNocmluazogMFxuICB9O1xufTtcbnZhciBJbmRpY2F0b3JzQ29udGFpbmVyID0gZnVuY3Rpb24gSW5kaWNhdG9yc0NvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdpbmRpY2F0b3JzQ29udGFpbmVyJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvcnMnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBjaGlsZHJlbik7XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgSWNvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIFN2ZyA9IGZ1bmN0aW9uIFN2ZyhfcmVmKSB7XG4gIHZhciBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIGhlaWdodDogc2l6ZSxcbiAgICB3aWR0aDogc2l6ZSxcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3Moe1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InLFxuICAgICAgc3Ryb2tlV2lkdGg6IDBcbiAgICB9KVxuICB9LCBwcm9wcykpO1xufTtcblxudmFyIENyb3NzSWNvbiA9IGZ1bmN0aW9uIENyb3NzSWNvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTdmcsIF9leHRlbmRzKHtcbiAgICBzaXplOiAyMFxuICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xNC4zNDggMTQuODQ5Yy0wLjQ2OSAwLjQ2OS0xLjIyOSAwLjQ2OS0xLjY5NyAwbC0yLjY1MS0zLjAzMC0yLjY1MSAzLjAyOWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMC0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOSAwLTEuNjk3bDIuNzU4LTMuMTUtMi43NTktMy4xNTJjLTAuNDY5LTAuNDY5LTAuNDY5LTEuMjI4IDAtMS42OTdzMS4yMjgtMC40NjkgMS42OTcgMGwyLjY1MiAzLjAzMSAyLjY1MS0zLjAzMWMwLjQ2OS0wLjQ2OSAxLjIyOC0wLjQ2OSAxLjY5NyAwczAuNDY5IDEuMjI5IDAgMS42OTdsLTIuNzU4IDMuMTUyIDIuNzU4IDMuMTVjMC40NjkgMC40NjkgMC40NjkgMS4yMjkgMCAxLjY5OHpcIlxuICB9KSk7XG59O1xudmFyIERvd25DaGV2cm9uID0gZnVuY3Rpb24gRG93bkNoZXZyb24ocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnLCBfZXh0ZW5kcyh7XG4gICAgc2l6ZTogMjBcbiAgfSwgcHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNC41MTYgNy41NDhjMC40MzYtMC40NDYgMS4wNDMtMC40ODEgMS41NzYgMGwzLjkwOCAzLjc0NyAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDAgMS42MTUtMC40MDYgMC40MTgtNC42OTUgNC41MDItNC42OTUgNC41MDItMC4yMTcgMC4yMjMtMC41MDIgMC4zMzUtMC43ODcgMC4zMzVzLTAuNTctMC4xMTItMC43ODktMC4zMzVjMCAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCJcbiAgfSkpO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEJ1dHRvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgYmFzZUNTUyA9IGZ1bmN0aW9uIGJhc2VDU1MoX3JlZjIpIHtcbiAgdmFyIGlzRm9jdXNlZCA9IF9yZWYyLmlzRm9jdXNlZCxcbiAgICAgIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBiYXNlVW5pdCA9IF9yZWYyJHRoZW1lLnNwYWNpbmcuYmFzZVVuaXQsXG4gICAgICBjb2xvcnMgPSBfcmVmMiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsNjAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiBiYXNlVW5pdCAqIDIsXG4gICAgdHJhbnNpdGlvbjogJ2NvbG9yIDE1MG1zJyxcbiAgICAnOmhvdmVyJzoge1xuICAgICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsODAgOiBjb2xvcnMubmV1dHJhbDQwXG4gICAgfVxuICB9O1xufTtcblxudmFyIGRyb3Bkb3duSW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbnZhciBEcm9wZG93bkluZGljYXRvciA9IGZ1bmN0aW9uIERyb3Bkb3duSW5kaWNhdG9yKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgaW5uZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2Ryb3Bkb3duSW5kaWNhdG9yJywgcHJvcHMpKSwge1xuICAgICAgJ2luZGljYXRvcic6IHRydWUsXG4gICAgICAnZHJvcGRvd24taW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIGNoaWxkcmVuIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG93bkNoZXZyb24sIG51bGwpKTtcbn07XG52YXIgY2xlYXJJbmRpY2F0b3JDU1MgPSBiYXNlQ1NTO1xudmFyIENsZWFySW5kaWNhdG9yID0gZnVuY3Rpb24gQ2xlYXJJbmRpY2F0b3IocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnY2xlYXJJbmRpY2F0b3InLCBwcm9wcykpLCB7XG4gICAgICAnaW5kaWNhdG9yJzogdHJ1ZSxcbiAgICAgICdjbGVhci1pbmRpY2F0b3InOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9KSwgY2hpbGRyZW4gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChDcm9zc0ljb24sIG51bGwpKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2VwYXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGluZGljYXRvclNlcGFyYXRvckNTUyA9IGZ1bmN0aW9uIGluZGljYXRvclNlcGFyYXRvckNTUyhfcmVmMykge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYzLmlzRGlzYWJsZWQsXG4gICAgICBfcmVmMyR0aGVtZSA9IF9yZWYzLnRoZW1lLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmMyR0aGVtZS5zcGFjaW5nLmJhc2VVbml0LFxuICAgICAgY29sb3JzID0gX3JlZjMkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGFsaWduU2VsZjogJ3N0cmV0Y2gnLFxuICAgIGJhY2tncm91bmRDb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsMTAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgIG1hcmdpbkJvdHRvbTogYmFzZVVuaXQgKiAyLFxuICAgIG1hcmdpblRvcDogYmFzZVVuaXQgKiAyLFxuICAgIHdpZHRoOiAxXG4gIH07XG59O1xudmFyIEluZGljYXRvclNlcGFyYXRvciA9IGZ1bmN0aW9uIEluZGljYXRvclNlcGFyYXRvcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdpbmRpY2F0b3JTZXBhcmF0b3InLCBwcm9wcykpLCB7XG4gICAgICAnaW5kaWNhdG9yLXNlcGFyYXRvcic6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0pKTtcbn07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTG9hZGluZ1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBrZXlmcmFtZXNOYW1lID0gJ3JlYWN0LXNlbGVjdC1sb2FkaW5nLWluZGljYXRvcic7XG52YXIga2V5ZnJhbWVzSW5qZWN0ZWQgPSBmYWxzZTtcbnZhciBsb2FkaW5nSW5kaWNhdG9yQ1NTID0gZnVuY3Rpb24gbG9hZGluZ0luZGljYXRvckNTUyhfcmVmNCkge1xuICB2YXIgaXNGb2N1c2VkID0gX3JlZjQuaXNGb2N1c2VkLFxuICAgICAgc2l6ZSA9IF9yZWY0LnNpemUsXG4gICAgICBfcmVmNCR0aGVtZSA9IF9yZWY0LnRoZW1lLFxuICAgICAgY29sb3JzID0gX3JlZjQkdGhlbWUuY29sb3JzLFxuICAgICAgYmFzZVVuaXQgPSBfcmVmNCR0aGVtZS5zcGFjaW5nLmJhc2VVbml0O1xuICByZXR1cm4ge1xuICAgIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDYwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZzogYmFzZVVuaXQgKiAyLFxuICAgIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG4gICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICBmb250U2l6ZTogc2l6ZSxcbiAgICBsaW5lSGVpZ2h0OiAxLFxuICAgIG1hcmdpblJpZ2h0OiBzaXplLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgfTtcbn07XG5cbnZhciBMb2FkaW5nRG90ID0gZnVuY3Rpb24gTG9hZGluZ0RvdChfcmVmNSkge1xuICB2YXIgY29sb3IgPSBfcmVmNS5jb2xvcixcbiAgICAgIGRlbGF5ID0gX3JlZjUuZGVsYXksXG4gICAgICBvZmZzZXQgPSBfcmVmNS5vZmZzZXQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3Moe1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICcxcycsXG4gICAgICBhbmltYXRpb25EZWxheTogXCJcIi5jb25jYXQoZGVsYXksIFwibXNcIiksXG4gICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogJ2luZmluaXRlJyxcbiAgICAgIGFuaW1hdGlvbk5hbWU6IGtleWZyYW1lc05hbWUsXG4gICAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogJ2Vhc2UtaW4tb3V0JyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICBib3JkZXJSYWRpdXM6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBtYXJnaW5MZWZ0OiBvZmZzZXQgPyAnMWVtJyA6IG51bGwsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICB3aWR0aDogJzFlbSdcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24gTG9hZGluZ0luZGljYXRvcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaXNSdGwgPSBwcm9wcy5pc1J0bCxcbiAgICAgIGNvbG9ycyA9IHByb3BzLnRoZW1lLmNvbG9ycztcbiAgdmFyIGNvbG9yID0gaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw4MCA6IGNvbG9ycy5uZXV0cmFsMjA7XG5cbiAgaWYgKCFrZXlmcmFtZXNJbmplY3RlZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICBpbmplY3RHbG9iYWwoXCJAa2V5ZnJhbWVzIFwiLCBrZXlmcmFtZXNOYW1lLCBcInswJSw4MCUsMTAwJXtvcGFjaXR5OjA7fTQwJXtvcGFjaXR5OjE7fX07XCIpO1xuICAgIGtleWZyYW1lc0luamVjdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnbG9hZGluZ0luZGljYXRvcicsIHByb3BzKSksIHtcbiAgICAgICdpbmRpY2F0b3InOiB0cnVlLFxuICAgICAgJ2xvYWRpbmctaW5kaWNhdG9yJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0RvdCwge1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkZWxheTogMCxcbiAgICBvZmZzZXQ6IGlzUnRsXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmdEb3QsIHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgZGVsYXk6IDE2MCxcbiAgICBvZmZzZXQ6IHRydWVcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0RvdCwge1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkZWxheTogMzIwLFxuICAgIG9mZnNldDogIWlzUnRsXG4gIH0pKTtcbn07XG5Mb2FkaW5nSW5kaWNhdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogNFxufTtcblxudmFyIGNzcyQxID0gZnVuY3Rpb24gY3NzJCQxKF9yZWYpIHtcbiAgdmFyIGlzRGlzYWJsZWQgPSBfcmVmLmlzRGlzYWJsZWQsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgY29sb3JzID0gX3JlZiR0aGVtZS5jb2xvcnMsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmJHRoZW1lLmJvcmRlclJhZGl1cyxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw1IDogY29sb3JzLm5ldXRyYWwwLFxuICAgIGJvcmRlckNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGlzRm9jdXNlZCA/IGNvbG9ycy5wcmltYXJ5IDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBib3hTaGFkb3c6IGlzRm9jdXNlZCA/IFwiMCAwIDAgMXB4IFwiLmNvbmNhdChjb2xvcnMucHJpbWFyeSkgOiBudWxsLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgbWluSGVpZ2h0OiBzcGFjaW5nLmNvbnRyb2xIZWlnaHQsXG4gICAgb3V0bGluZTogJzAgIWltcG9ydGFudCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNpdGlvbjogJ2FsbCAxMDBtcycsXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBib3JkZXJDb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMubmV1dHJhbDMwXG4gICAgfVxuICB9O1xufTtcblxudmFyIENvbnRyb2wgPSBmdW5jdGlvbiBDb250cm9sKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGlzRGlzYWJsZWQgPSBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzLFxuICAgICAgbWVudUlzT3BlbiA9IHByb3BzLm1lbnVJc09wZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY3goXG4gICAgLyojX19QVVJFX18qL1xuICAgIGNzcyhnZXRTdHlsZXMoJ2NvbnRyb2wnLCBwcm9wcykpLCB7XG4gICAgICAnY29udHJvbCc6IHRydWUsXG4gICAgICAnY29udHJvbC0taXMtZGlzYWJsZWQnOiBpc0Rpc2FibGVkLFxuICAgICAgJ2NvbnRyb2wtLWlzLWZvY3VzZWQnOiBpc0ZvY3VzZWQsXG4gICAgICAnY29udHJvbC0tbWVudS1pcy1vcGVuJzogbWVudUlzT3BlblxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBncm91cENTUyA9IGZ1bmN0aW9uIGdyb3VwQ1NTKF9yZWYpIHtcbiAgdmFyIHNwYWNpbmcgPSBfcmVmLnRoZW1lLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5iYXNlVW5pdCAqIDIsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZy5iYXNlVW5pdCAqIDJcbiAgfTtcbn07XG5cbnZhciBHcm91cCA9IGZ1bmN0aW9uIEdyb3VwKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY3ggPSBwcm9wcy5jeCxcbiAgICAgIGdldFN0eWxlcyA9IHByb3BzLmdldFN0eWxlcyxcbiAgICAgIEhlYWRpbmcgPSBwcm9wcy5IZWFkaW5nLFxuICAgICAgaGVhZGluZ1Byb3BzID0gcHJvcHMuaGVhZGluZ1Byb3BzLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IHByb3BzLnNlbGVjdFByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnZ3JvdXAnLCBwcm9wcykpLCB7XG4gICAgICAnZ3JvdXAnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRpbmcsIF9leHRlbmRzKHt9LCBoZWFkaW5nUHJvcHMsIHtcbiAgICBzZWxlY3RQcm9wczogc2VsZWN0UHJvcHMsXG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGdldFN0eWxlczogZ2V0U3R5bGVzLFxuICAgIGN4OiBjeFxuICB9KSwgbGFiZWwpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGNoaWxkcmVuKSk7XG59O1xuXG52YXIgZ3JvdXBIZWFkaW5nQ1NTID0gZnVuY3Rpb24gZ3JvdXBIZWFkaW5nQ1NTKF9yZWYyKSB7XG4gIHZhciBzcGFjaW5nID0gX3JlZjIudGhlbWUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBjb2xvcjogJyM5OTknLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICc3NSUnLFxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgIG1hcmdpbkJvdHRvbTogJzAuMjVlbScsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcuYmFzZVVuaXQgKiAzLFxuICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy5iYXNlVW5pdCAqIDMsXG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbiAgfTtcbn07XG52YXIgR3JvdXBIZWFkaW5nID0gZnVuY3Rpb24gR3JvdXBIZWFkaW5nKHByb3BzKSB7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgIHNlbGVjdFByb3BzID0gcHJvcHMuc2VsZWN0UHJvcHMsXG4gICAgICBjbGVhblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJjeFwiLCBcImdldFN0eWxlc1wiLCBcInRoZW1lXCIsIFwic2VsZWN0UHJvcHNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdncm91cEhlYWRpbmcnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIGNsZWFuUHJvcHMpKSksIHtcbiAgICAgICdncm91cC1oZWFkaW5nJzogdHJ1ZVxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgY2xlYW5Qcm9wcykpO1xufTtcblxudmFyIGlucHV0Q1NTID0gZnVuY3Rpb24gaW5wdXRDU1MoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIG1hcmdpbjogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgdmlzaWJpbGl0eTogaXNEaXNhYmxlZCA/ICdoaWRkZW4nIDogJ3Zpc2libGUnLFxuICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbDgwXG4gIH07XG59O1xuXG52YXIgaW5wdXRTdHlsZSA9IGZ1bmN0aW9uIGlucHV0U3R5bGUoaXNIaWRkZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgIG9wYWNpdHk6IGlzSGlkZGVuID8gMCA6IDEsXG4gICAgb3V0bGluZTogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfTtcbn07XG5cbnZhciBJbnB1dCA9IGZ1bmN0aW9uIElucHV0KF9yZWYyKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICBjeCA9IF9yZWYyLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gX3JlZjIuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIGlzSGlkZGVuID0gX3JlZjIuaXNIaWRkZW4sXG4gICAgICBpc0Rpc2FibGVkID0gX3JlZjIuaXNEaXNhYmxlZCxcbiAgICAgIHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBzZWxlY3RQcm9wcyA9IF9yZWYyLnNlbGVjdFByb3BzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFtcImNsYXNzTmFtZVwiLCBcImN4XCIsIFwiZ2V0U3R5bGVzXCIsIFwiaW5uZXJSZWZcIiwgXCJpc0hpZGRlblwiLCBcImlzRGlzYWJsZWRcIiwgXCJ0aGVtZVwiLCBcInNlbGVjdFByb3BzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOlxuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdpbnB1dCcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgcHJvcHMpKSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvc2l6ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChudWxsLCB7XG4gICAgICAnaW5wdXQnOiB0cnVlXG4gICAgfSwgY2xhc3NOYW1lKSxcbiAgICBpbnB1dFJlZjogaW5uZXJSZWYsXG4gICAgaW5wdXRTdHlsZTogaW5wdXRTdHlsZShpc0hpZGRlbiksXG4gICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgfSwgcHJvcHMpKSk7XG59O1xuXG52YXIgbXVsdGlWYWx1ZUNTUyA9IGZ1bmN0aW9uIG11bHRpVmFsdWVDU1MoX3JlZikge1xuICB2YXIgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX3JlZiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5uZXV0cmFsMTAsXG4gICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMgLyAyLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBtYXJnaW46IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIG1pbldpZHRoOiAwIC8vIHJlc29sdmVzIGZsZXgvdGV4dC1vdmVyZmxvdyBidWdcblxuICB9O1xufTtcbnZhciBtdWx0aVZhbHVlTGFiZWxDU1MgPSBmdW5jdGlvbiBtdWx0aVZhbHVlTGFiZWxDU1MoX3JlZjIpIHtcbiAgdmFyIF9yZWYyJHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMiR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmMiR0aGVtZS5jb2xvcnMsXG4gICAgICBjcm9wV2l0aEVsbGlwc2lzID0gX3JlZjIuY3JvcFdpdGhFbGxpcHNpcztcbiAgcmV0dXJuIHtcbiAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyAvIDIsXG4gICAgY29sb3I6IGNvbG9ycy5uZXV0cmFsODAsXG4gICAgZm9udFNpemU6ICc4NSUnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBwYWRkaW5nOiAzLFxuICAgIHBhZGRpbmdMZWZ0OiA2LFxuICAgIHRleHRPdmVyZmxvdzogY3JvcFdpdGhFbGxpcHNpcyA/ICdlbGxpcHNpcycgOiBudWxsLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gIH07XG59O1xudmFyIG11bHRpVmFsdWVSZW1vdmVDU1MgPSBmdW5jdGlvbiBtdWx0aVZhbHVlUmVtb3ZlQ1NTKF9yZWYzKSB7XG4gIHZhciBfcmVmMyR0aGVtZSA9IF9yZWYzLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYzJHRoZW1lLnNwYWNpbmcsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmMyR0aGVtZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcnMgPSBfcmVmMyR0aGVtZS5jb2xvcnMsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmMy5pc0ZvY3VzZWQ7XG4gIHJldHVybiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMgLyAyLFxuICAgIGJhY2tncm91bmRDb2xvcjogaXNGb2N1c2VkICYmIGNvbG9ycy5kYW5nZXJMaWdodCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcuYmFzZVVuaXQsXG4gICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLmJhc2VVbml0LFxuICAgICc6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5kYW5nZXJMaWdodCxcbiAgICAgIGNvbG9yOiBjb2xvcnMuZGFuZ2VyXG4gICAgfVxuICB9O1xufTtcbnZhciBNdWx0aVZhbHVlR2VuZXJpYyA9IGZ1bmN0aW9uIE11bHRpVmFsdWVHZW5lcmljKF9yZWY0KSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWY0LmNoaWxkcmVuLFxuICAgICAgaW5uZXJQcm9wcyA9IF9yZWY0LmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIGlubmVyUHJvcHMsIGNoaWxkcmVuKTtcbn07XG52YXIgTXVsdGlWYWx1ZUNvbnRhaW5lciA9IE11bHRpVmFsdWVHZW5lcmljO1xudmFyIE11bHRpVmFsdWVMYWJlbCA9IE11bHRpVmFsdWVHZW5lcmljO1xudmFyIE11bHRpVmFsdWVSZW1vdmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE11bHRpVmFsdWVSZW1vdmUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE11bHRpVmFsdWVSZW1vdmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpVmFsdWVSZW1vdmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNdWx0aVZhbHVlUmVtb3ZlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNdWx0aVZhbHVlUmVtb3ZlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGlubmVyUHJvcHMgPSBfdGhpcyRwcm9wcy5pbm5lclByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgaW5uZXJQcm9wcywgY2hpbGRyZW4gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChDcm9zc0ljb24sIHtcbiAgICAgICAgc2l6ZTogMTRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTXVsdGlWYWx1ZVJlbW92ZTtcbn0oQ29tcG9uZW50KTtcblxudmFyIE11bHRpVmFsdWUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gIF9pbmhlcml0cyhNdWx0aVZhbHVlLCBfQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gTXVsdGlWYWx1ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTXVsdGlWYWx1ZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE11bHRpVmFsdWUpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE11bHRpVmFsdWUsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbXBvbmVudHMgPSBfdGhpcyRwcm9wczIuY29tcG9uZW50cyxcbiAgICAgICAgICBjeCA9IF90aGlzJHByb3BzMi5jeCxcbiAgICAgICAgICBkYXRhID0gX3RoaXMkcHJvcHMyLmRhdGEsXG4gICAgICAgICAgZ2V0U3R5bGVzID0gX3RoaXMkcHJvcHMyLmdldFN0eWxlcyxcbiAgICAgICAgICBpbm5lclByb3BzID0gX3RoaXMkcHJvcHMyLmlubmVyUHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMi5pc0Rpc2FibGVkLFxuICAgICAgICAgIHJlbW92ZVByb3BzID0gX3RoaXMkcHJvcHMyLnJlbW92ZVByb3BzLFxuICAgICAgICAgIHNlbGVjdFByb3BzID0gX3RoaXMkcHJvcHMyLnNlbGVjdFByb3BzO1xuICAgICAgdmFyIENvbnRhaW5lciA9IGNvbXBvbmVudHMuQ29udGFpbmVyLFxuICAgICAgICAgIExhYmVsID0gY29tcG9uZW50cy5MYWJlbCxcbiAgICAgICAgICBSZW1vdmUgPSBjb21wb25lbnRzLlJlbW92ZTtcblxuICAgICAgdmFyIGNvbnRhaW5lcklubmVyUHJvcHMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjeChcbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBjc3MoZ2V0U3R5bGVzKCdtdWx0aVZhbHVlJywgdGhpcy5wcm9wcykpLCB7XG4gICAgICAgICAgJ211bHRpLXZhbHVlJzogdHJ1ZSxcbiAgICAgICAgICAnbXVsdGktdmFsdWUtLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZFxuICAgICAgICB9LCBjbGFzc05hbWUpXG4gICAgICB9LCBpbm5lclByb3BzKTtcblxuICAgICAgdmFyIGxhYmVsSW5uZXJQcm9wcyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBjeChcbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBjc3MoZ2V0U3R5bGVzKCdtdWx0aVZhbHVlTGFiZWwnLCB0aGlzLnByb3BzKSksIHtcbiAgICAgICAgICAnbXVsdGktdmFsdWVfX2xhYmVsJzogdHJ1ZVxuICAgICAgICB9LCBjbGFzc05hbWUpXG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVtb3ZlSW5uZXJQcm9wcyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBjbGFzc05hbWU6IGN4KFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIGNzcyhnZXRTdHlsZXMoJ211bHRpVmFsdWVSZW1vdmUnLCB0aGlzLnByb3BzKSksIHtcbiAgICAgICAgICAnbXVsdGktdmFsdWVfX3JlbW92ZSc6IHRydWVcbiAgICAgICAgfSwgY2xhc3NOYW1lKVxuICAgICAgfSwgcmVtb3ZlUHJvcHMpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250YWluZXIsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgaW5uZXJQcm9wczogY29udGFpbmVySW5uZXJQcm9wcyxcbiAgICAgICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVsLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGlubmVyUHJvcHM6IGxhYmVsSW5uZXJQcm9wcyxcbiAgICAgICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzXG4gICAgICB9LCBjaGlsZHJlbiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVtb3ZlLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGlubmVyUHJvcHM6IHJlbW92ZUlubmVyUHJvcHMsXG4gICAgICAgIHNlbGVjdFByb3BzOiBzZWxlY3RQcm9wc1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNdWx0aVZhbHVlO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoTXVsdGlWYWx1ZSwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBjcm9wV2l0aEVsbGlwc2lzOiB0cnVlXG59KTtcblxudmFyIG9wdGlvbkNTUyA9IGZ1bmN0aW9uIG9wdGlvbkNTUyhfcmVmKSB7XG4gIHZhciBpc0Rpc2FibGVkID0gX3JlZi5pc0Rpc2FibGVkLFxuICAgICAgaXNGb2N1c2VkID0gX3JlZi5pc0ZvY3VzZWQsXG4gICAgICBpc1NlbGVjdGVkID0gX3JlZi5pc1NlbGVjdGVkLFxuICAgICAgX3JlZiR0aGVtZSA9IF9yZWYudGhlbWUsXG4gICAgICBzcGFjaW5nID0gX3JlZiR0aGVtZS5zcGFjaW5nLFxuICAgICAgY29sb3JzID0gX3JlZiR0aGVtZS5jb2xvcnM7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBpc1NlbGVjdGVkID8gY29sb3JzLnByaW1hcnkgOiBpc0ZvY3VzZWQgPyBjb2xvcnMucHJpbWFyeTI1IDogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsMjAgOiBpc1NlbGVjdGVkID8gY29sb3JzLm5ldXRyYWwwIDogJ2luaGVyaXQnLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0ICogMiwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuYmFzZVVuaXQgKiAzLCBcInB4XCIpLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLCAwLCAwLCAwKScsXG4gICAgLy8gcHJvdmlkZSBzb21lIGFmZm9yZGFuY2Ugb24gdG91Y2ggZGV2aWNlc1xuICAgICc6YWN0aXZlJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBpc1NlbGVjdGVkID8gY29sb3JzLnByaW1hcnkgOiBjb2xvcnMucHJpbWFyeTUwXG4gICAgfVxuICB9O1xufTtcblxudmFyIE9wdGlvbiA9IGZ1bmN0aW9uIE9wdGlvbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpc0Rpc2FibGVkID0gcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgIGlzRm9jdXNlZCA9IHByb3BzLmlzRm9jdXNlZCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBwcm9wcy5pc1NlbGVjdGVkLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdvcHRpb24nLCBwcm9wcykpLCB7XG4gICAgICAnb3B0aW9uJzogdHJ1ZSxcbiAgICAgICdvcHRpb24tLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZCxcbiAgICAgICdvcHRpb24tLWlzLWZvY3VzZWQnOiBpc0ZvY3VzZWQsXG4gICAgICAnb3B0aW9uLS1pcy1zZWxlY3RlZCc6IGlzU2VsZWN0ZWRcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG52YXIgcGxhY2Vob2xkZXJDU1MgPSBmdW5jdGlvbiBwbGFjZWhvbGRlckNTUyhfcmVmKSB7XG4gIHZhciBfcmVmJHRoZW1lID0gX3JlZi50aGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmJHRoZW1lLnNwYWNpbmcsXG4gICAgICBjb2xvcnMgPSBfcmVmJHRoZW1lLmNvbG9ycztcbiAgcmV0dXJuIHtcbiAgICBjb2xvcjogY29sb3JzLm5ldXRyYWw1MCxcbiAgICBtYXJnaW5MZWZ0OiBzcGFjaW5nLmJhc2VVbml0IC8gMixcbiAgICBtYXJnaW5SaWdodDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICB9O1xufTtcblxudmFyIFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gUGxhY2Vob2xkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjeCA9IHByb3BzLmN4LFxuICAgICAgZ2V0U3R5bGVzID0gcHJvcHMuZ2V0U3R5bGVzLFxuICAgICAgaW5uZXJQcm9wcyA9IHByb3BzLmlubmVyUHJvcHM7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGN4KFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBjc3MoZ2V0U3R5bGVzKCdwbGFjZWhvbGRlcicsIHByb3BzKSksIHtcbiAgICAgICdwbGFjZWhvbGRlcic6IHRydWVcbiAgICB9LCBjbGFzc05hbWUpXG4gIH0sIGlubmVyUHJvcHMpLCBjaGlsZHJlbik7XG59O1xuXG52YXIgY3NzJDIgPSBmdW5jdGlvbiBjc3MkJDEoX3JlZikge1xuICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCxcbiAgICAgIF9yZWYkdGhlbWUgPSBfcmVmLnRoZW1lLFxuICAgICAgc3BhY2luZyA9IF9yZWYkdGhlbWUuc3BhY2luZyxcbiAgICAgIGNvbG9ycyA9IF9yZWYkdGhlbWUuY29sb3JzO1xuICByZXR1cm4ge1xuICAgIGNvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWw0MCA6IGNvbG9ycy5uZXV0cmFsODAsXG4gICAgbWFyZ2luTGVmdDogc3BhY2luZy5iYXNlVW5pdCAvIDIsXG4gICAgbWFyZ2luUmlnaHQ6IHNwYWNpbmcuYmFzZVVuaXQgLyAyLFxuICAgIG1heFdpZHRoOiBcImNhbGMoMTAwJSAtIFwiLmNvbmNhdChzcGFjaW5nLmJhc2VVbml0ICogMiwgXCJweClcIiksXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gIH07XG59O1xuXG52YXIgU2luZ2xlVmFsdWUgPSBmdW5jdGlvbiBTaW5nbGVWYWx1ZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGN4ID0gcHJvcHMuY3gsXG4gICAgICBnZXRTdHlsZXMgPSBwcm9wcy5nZXRTdHlsZXMsXG4gICAgICBpc0Rpc2FibGVkID0gcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgIGlubmVyUHJvcHMgPSBwcm9wcy5pbm5lclByb3BzO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjeChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgY3NzKGdldFN0eWxlcygnc2luZ2xlVmFsdWUnLCBwcm9wcykpLCB7XG4gICAgICAnc2luZ2xlLXZhbHVlJzogdHJ1ZSxcbiAgICAgICdzaW5nbGUtdmFsdWUtLWlzLWRpc2FibGVkJzogaXNEaXNhYmxlZFxuICAgIH0sIGNsYXNzTmFtZSlcbiAgfSwgaW5uZXJQcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbnZhciBjb21wb25lbnRzID0ge1xuICBDbGVhckluZGljYXRvcjogQ2xlYXJJbmRpY2F0b3IsXG4gIENvbnRyb2w6IENvbnRyb2wsXG4gIERyb3Bkb3duSW5kaWNhdG9yOiBEcm9wZG93bkluZGljYXRvcixcbiAgRG93bkNoZXZyb246IERvd25DaGV2cm9uLFxuICBDcm9zc0ljb246IENyb3NzSWNvbixcbiAgR3JvdXA6IEdyb3VwLFxuICBHcm91cEhlYWRpbmc6IEdyb3VwSGVhZGluZyxcbiAgSW5kaWNhdG9yc0NvbnRhaW5lcjogSW5kaWNhdG9yc0NvbnRhaW5lcixcbiAgSW5kaWNhdG9yU2VwYXJhdG9yOiBJbmRpY2F0b3JTZXBhcmF0b3IsXG4gIElucHV0OiBJbnB1dCxcbiAgTG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgTWVudTogTWVudSxcbiAgTWVudUxpc3Q6IE1lbnVMaXN0LFxuICBNZW51UG9ydGFsOiBNZW51UG9ydGFsLFxuICBMb2FkaW5nTWVzc2FnZTogTG9hZGluZ01lc3NhZ2UsXG4gIE5vT3B0aW9uc01lc3NhZ2U6IE5vT3B0aW9uc01lc3NhZ2UsXG4gIE11bHRpVmFsdWU6IE11bHRpVmFsdWUsXG4gIE11bHRpVmFsdWVDb250YWluZXI6IE11bHRpVmFsdWVDb250YWluZXIsXG4gIE11bHRpVmFsdWVMYWJlbDogTXVsdGlWYWx1ZUxhYmVsLFxuICBNdWx0aVZhbHVlUmVtb3ZlOiBNdWx0aVZhbHVlUmVtb3ZlLFxuICBPcHRpb246IE9wdGlvbixcbiAgUGxhY2Vob2xkZXI6IFBsYWNlaG9sZGVyLFxuICBTZWxlY3RDb250YWluZXI6IFNlbGVjdENvbnRhaW5lcixcbiAgU2luZ2xlVmFsdWU6IFNpbmdsZVZhbHVlLFxuICBWYWx1ZUNvbnRhaW5lcjogVmFsdWVDb250YWluZXJcbn07XG52YXIgZGVmYXVsdENvbXBvbmVudHMgPSBmdW5jdGlvbiBkZWZhdWx0Q29tcG9uZW50cyhwcm9wcykge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgY29tcG9uZW50cywgcHJvcHMuY29tcG9uZW50cyk7XG59O1xuXG52YXIgZGVmYXVsdFN0eWxlcyA9IHtcbiAgY2xlYXJJbmRpY2F0b3I6IGNsZWFySW5kaWNhdG9yQ1NTLFxuICBjb250YWluZXI6IGNvbnRhaW5lckNTUyxcbiAgY29udHJvbDogY3NzJDEsXG4gIGRyb3Bkb3duSW5kaWNhdG9yOiBkcm9wZG93bkluZGljYXRvckNTUyxcbiAgZ3JvdXA6IGdyb3VwQ1NTLFxuICBncm91cEhlYWRpbmc6IGdyb3VwSGVhZGluZ0NTUyxcbiAgaW5kaWNhdG9yc0NvbnRhaW5lcjogaW5kaWNhdG9yc0NvbnRhaW5lckNTUyxcbiAgaW5kaWNhdG9yU2VwYXJhdG9yOiBpbmRpY2F0b3JTZXBhcmF0b3JDU1MsXG4gIGlucHV0OiBpbnB1dENTUyxcbiAgbG9hZGluZ0luZGljYXRvcjogbG9hZGluZ0luZGljYXRvckNTUyxcbiAgbG9hZGluZ01lc3NhZ2U6IGxvYWRpbmdNZXNzYWdlQ1NTLFxuICBtZW51OiBtZW51Q1NTLFxuICBtZW51TGlzdDogbWVudUxpc3RDU1MsXG4gIG1lbnVQb3J0YWw6IG1lbnVQb3J0YWxDU1MsXG4gIG11bHRpVmFsdWU6IG11bHRpVmFsdWVDU1MsXG4gIG11bHRpVmFsdWVMYWJlbDogbXVsdGlWYWx1ZUxhYmVsQ1NTLFxuICBtdWx0aVZhbHVlUmVtb3ZlOiBtdWx0aVZhbHVlUmVtb3ZlQ1NTLFxuICBub09wdGlvbnNNZXNzYWdlOiBub09wdGlvbnNNZXNzYWdlQ1NTLFxuICBvcHRpb246IG9wdGlvbkNTUyxcbiAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyQ1NTLFxuICBzaW5nbGVWYWx1ZTogY3NzJDIsXG4gIHZhbHVlQ29udGFpbmVyOiB2YWx1ZUNvbnRhaW5lckNTU1xufTsgLy8gTWVyZ2UgVXRpbGl0eVxuLy8gQWxsb3dzIGNvbnN1bWVycyB0byBleHRlbmQgYSBiYXNlIFNlbGVjdCB3aXRoIGFkZGl0aW9uYWwgc3R5bGVzXG5cbmZ1bmN0aW9uIG1lcmdlU3R5bGVzKHNvdXJjZSkge1xuICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAvLyBpbml0aWFsaXplIHdpdGggc291cmNlIHN0eWxlc1xuICB2YXIgc3R5bGVzID0gX29iamVjdFNwcmVhZCh7fSwgc291cmNlKTsgLy8gbWFzc2FnZSBpbiB0YXJnZXQgc3R5bGVzXG5cblxuICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChzb3VyY2Vba2V5XSkge1xuICAgICAgc3R5bGVzW2tleV0gPSBmdW5jdGlvbiAocnNDc3MsIHByb3BzKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XShzb3VyY2Vba2V5XShyc0NzcywgcHJvcHMpLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBjb2xvcnMgPSB7XG4gIHByaW1hcnk6ICcjMjY4NEZGJyxcbiAgcHJpbWFyeTc1OiAnIzRDOUFGRicsXG4gIHByaW1hcnk1MDogJyNCMkQ0RkYnLFxuICBwcmltYXJ5MjU6ICcjREVFQkZGJyxcbiAgZGFuZ2VyOiAnI0RFMzUwQicsXG4gIGRhbmdlckxpZ2h0OiAnI0ZGQkRBRCcsXG4gIG5ldXRyYWwwOiAnaHNsKDAsIDAlLCAxMDAlKScsXG4gIG5ldXRyYWw1OiAnaHNsKDAsIDAlLCA5NSUpJyxcbiAgbmV1dHJhbDEwOiAnaHNsKDAsIDAlLCA5MCUpJyxcbiAgbmV1dHJhbDIwOiAnaHNsKDAsIDAlLCA4MCUpJyxcbiAgbmV1dHJhbDMwOiAnaHNsKDAsIDAlLCA3MCUpJyxcbiAgbmV1dHJhbDQwOiAnaHNsKDAsIDAlLCA2MCUpJyxcbiAgbmV1dHJhbDUwOiAnaHNsKDAsIDAlLCA1MCUpJyxcbiAgbmV1dHJhbDYwOiAnaHNsKDAsIDAlLCA0MCUpJyxcbiAgbmV1dHJhbDcwOiAnaHNsKDAsIDAlLCAzMCUpJyxcbiAgbmV1dHJhbDgwOiAnaHNsKDAsIDAlLCAyMCUpJyxcbiAgbmV1dHJhbDkwOiAnaHNsKDAsIDAlLCAxMCUpJ1xufTtcbnZhciBib3JkZXJSYWRpdXMgPSA0O1xudmFyIGJhc2VVbml0ID0gNDtcbi8qIFVzZWQgdG8gY2FsY3VsYXRlIGNvbnNpc3RlbnQgbWFyZ2luL3BhZGRpbmcgb24gZWxlbWVudHMgKi9cblxudmFyIGNvbnRyb2xIZWlnaHQgPSAzODtcbi8qIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgY29udHJvbCAqL1xuXG52YXIgbWVudUd1dHRlciA9IGJhc2VVbml0ICogMjtcbi8qIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgY29udHJvbCBhbmQgbWVudSAqL1xuXG52YXIgc3BhY2luZyA9IHtcbiAgYmFzZVVuaXQ6IGJhc2VVbml0LFxuICBjb250cm9sSGVpZ2h0OiBjb250cm9sSGVpZ2h0LFxuICBtZW51R3V0dGVyOiBtZW51R3V0dGVyXG59O1xudmFyIGRlZmF1bHRUaGVtZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gIGNvbG9yczogY29sb3JzLFxuICBzcGFjaW5nOiBzcGFjaW5nXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBiYWNrc3BhY2VSZW1vdmVzVmFsdWU6IHRydWUsXG4gIGJsdXJJbnB1dE9uU2VsZWN0OiBpc1RvdWNoQ2FwYWJsZSgpLFxuICBjYXB0dXJlTWVudVNjcm9sbDogIWlzVG91Y2hDYXBhYmxlKCksXG4gIGNsb3NlTWVudU9uU2VsZWN0OiB0cnVlLFxuICBjbG9zZU1lbnVPblNjcm9sbDogZmFsc2UsXG4gIGNvbXBvbmVudHM6IHt9LFxuICBjb250cm9sU2hvdWxkUmVuZGVyVmFsdWU6IHRydWUsXG4gIGVzY2FwZUNsZWFyc1ZhbHVlOiBmYWxzZSxcbiAgZmlsdGVyT3B0aW9uOiBjcmVhdGVGaWx0ZXIoKSxcbiAgZm9ybWF0R3JvdXBMYWJlbDogZm9ybWF0R3JvdXBMYWJlbCxcbiAgZ2V0T3B0aW9uTGFiZWw6IGdldE9wdGlvbkxhYmVsLFxuICBnZXRPcHRpb25WYWx1ZTogZ2V0T3B0aW9uVmFsdWUsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBpc011bHRpOiBmYWxzZSxcbiAgaXNSdGw6IGZhbHNlLFxuICBpc1NlYXJjaGFibGU6IHRydWUsXG4gIGlzT3B0aW9uRGlzYWJsZWQ6IGlzT3B0aW9uRGlzYWJsZWQsXG4gIGxvYWRpbmdNZXNzYWdlOiBmdW5jdGlvbiBsb2FkaW5nTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gJ0xvYWRpbmcuLi4nO1xuICB9LFxuICBtYXhNZW51SGVpZ2h0OiAzMDAsXG4gIG1pbk1lbnVIZWlnaHQ6IDE0MCxcbiAgbWVudUlzT3BlbjogZmFsc2UsXG4gIG1lbnVQbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtZW51UG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIG1lbnVTaG91bGRCbG9ja1Njcm9sbDogZmFsc2UsXG4gIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldzogIWlzTW9iaWxlRGV2aWNlKCksXG4gIG5vT3B0aW9uc01lc3NhZ2U6IGZ1bmN0aW9uIG5vT3B0aW9uc01lc3NhZ2UoKSB7XG4gICAgcmV0dXJuICdObyBvcHRpb25zJztcbiAgfSxcbiAgb3Blbk1lbnVPbkZvY3VzOiBmYWxzZSxcbiAgb3Blbk1lbnVPbkNsaWNrOiB0cnVlLFxuICBvcHRpb25zOiBbXSxcbiAgcGFnZVNpemU6IDUsXG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0Li4uJyxcbiAgc2NyZWVuUmVhZGVyU3RhdHVzOiBmdW5jdGlvbiBzY3JlZW5SZWFkZXJTdGF0dXMoX3JlZikge1xuICAgIHZhciBjb3VudCA9IF9yZWYuY291bnQ7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGNvdW50LCBcIiByZXN1bHRcIikuY29uY2F0KGNvdW50ICE9PSAxID8gJ3MnIDogJycsIFwiIGF2YWlsYWJsZVwiKTtcbiAgfSxcbiAgc3R5bGVzOiB7fSxcbiAgdGFiSW5kZXg6ICcwJyxcbiAgdGFiU2VsZWN0c1ZhbHVlOiB0cnVlXG59O1xudmFyIGluc3RhbmNlSWQgPSAxO1xuXG52YXIgU2VsZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTZWxlY3QsIF9Db21wb25lbnQpO1xuXG4gIC8vIE1pc2MuIEluc3RhbmNlIFByb3BlcnRpZXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFRPRE9cbiAgLy8gUmVmc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBmdW5jdGlvbiBTZWxlY3QoX3Byb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTZWxlY3QpLmNhbGwodGhpcywgX3Byb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgYXJpYUxpdmVTZWxlY3Rpb246ICcnLFxuICAgICAgYXJpYUxpdmVDb250ZXh0OiAnJyxcbiAgICAgIGZvY3VzZWRPcHRpb246IG51bGwsXG4gICAgICBmb2N1c2VkVmFsdWU6IG51bGwsXG4gICAgICBpbnB1dElzSGlkZGVuOiBmYWxzZSxcbiAgICAgIGlzRm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0NvbXBvc2luZzogZmFsc2UsXG4gICAgICBtZW51T3B0aW9uczoge1xuICAgICAgICByZW5kZXI6IFtdLFxuICAgICAgICBmb2N1c2FibGU6IFtdXG4gICAgICB9LFxuICAgICAgc2VsZWN0VmFsdWU6IFtdXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiYmxvY2tPcHRpb25Ib3ZlclwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGVcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImNvbW1vblByb3BzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY29tcG9uZW50c1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhc0dyb3Vwc1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5pdGlhbFRvdWNoWFwiLCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJpbml0aWFsVG91Y2hZXCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImluc3RhbmNlUHJlZml4XCIsICcnKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvcGVuQWZ0ZXJGb2N1c1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGVcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInVzZXJJc0RyYWdnaW5nXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY29udHJvbFJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRDb250cm9sUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmNvbnRyb2xSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZm9jdXNlZE9wdGlvblJlZlwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRGb2N1c2VkT3B0aW9uUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmZvY3VzZWRPcHRpb25SZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwibWVudUxpc3RSZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0TWVudUxpc3RSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubWVudUxpc3RSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaW5wdXRSZWZcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0SW5wdXRSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuaW5wdXRSZWYgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiY2FjaGVDb21wb25lbnRzXCIsIGZ1bmN0aW9uIChjb21wb25lbnRzJCQxKSB7XG4gICAgICBfdGhpcy5jb21wb25lbnRzID0gZGVmYXVsdENvbXBvbmVudHMoe1xuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzJCQxXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJmb2N1c1wiLCBfdGhpcy5mb2N1c0lucHV0KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJibHVyXCIsIF90aGlzLmJsdXJJbnB1dCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lO1xuICAgICAgb25DaGFuZ2UobmV3VmFsdWUsIF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbk1ldGEsIHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNldFZhbHVlXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3NldC12YWx1ZSc7XG4gICAgICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xvc2VNZW51T25TZWxlY3QgPSBfdGhpcyRwcm9wczIuY2xvc2VNZW51T25TZWxlY3QsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMi5pc011bHRpO1xuXG4gICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgIGFjdGlvbjogJ3NldC12YWx1ZSdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY2xvc2VNZW51T25TZWxlY3QpIHtcbiAgICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gIWlzTXVsdGk7XG5cbiAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgIH0gLy8gd2hlbiB0aGUgc2VsZWN0IHZhbHVlIHNob3VsZCBjaGFuZ2UsIHdlIHNob3VsZCByZXNldCBmb2N1c2VkVmFsdWVcblxuXG4gICAgICBfdGhpcy5jbGVhckZvY3VzVmFsdWVPblVwZGF0ZSA9IHRydWU7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKG5ld1ZhbHVlLCB7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBvcHRpb246IG9wdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2VsZWN0T3B0aW9uXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJsdXJJbnB1dE9uU2VsZWN0ID0gX3RoaXMkcHJvcHMzLmJsdXJJbnB1dE9uU2VsZWN0LFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczMuaXNNdWx0aTtcblxuICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gX3RoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG5cbiAgICAgICAgaWYgKF90aGlzLmlzT3B0aW9uU2VsZWN0ZWQobmV3VmFsdWUsIHNlbGVjdFZhbHVlKSkge1xuICAgICAgICAgIHZhciBjYW5kaWRhdGUgPSBfdGhpcy5nZXRPcHRpb25WYWx1ZShuZXdWYWx1ZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXRWYWx1ZShzZWxlY3RWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRPcHRpb25WYWx1ZShpKSAhPT0gY2FuZGlkYXRlO1xuICAgICAgICAgIH0pLCAnZGVzZWxlY3Qtb3B0aW9uJywgbmV3VmFsdWUpO1xuXG4gICAgICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgICAgICBldmVudDogJ2Rlc2VsZWN0LW9wdGlvbicsXG4gICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5nZXRPcHRpb25MYWJlbChuZXdWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zZXRWYWx1ZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNlbGVjdFZhbHVlKSwgW25ld1ZhbHVlXSksICdzZWxlY3Qtb3B0aW9uJywgbmV3VmFsdWUpO1xuXG4gICAgICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgICAgICBldmVudDogJ3NlbGVjdC1vcHRpb24nLFxuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFZhbHVlKG5ld1ZhbHVlLCAnc2VsZWN0LW9wdGlvbicpO1xuXG4gICAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICAgIGV2ZW50OiAnc2VsZWN0LW9wdGlvbicsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdldE9wdGlvbkxhYmVsKG5ld1ZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChibHVySW5wdXRPblNlbGVjdCkge1xuICAgICAgICBfdGhpcy5ibHVySW5wdXQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJyZW1vdmVWYWx1ZVwiLCBmdW5jdGlvbiAocmVtb3ZlZFZhbHVlKSB7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSBfdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcblxuICAgICAgdmFyIGNhbmRpZGF0ZSA9IF90aGlzLmdldE9wdGlvblZhbHVlKHJlbW92ZWRWYWx1ZSk7XG5cbiAgICAgIF90aGlzLm9uQ2hhbmdlKHNlbGVjdFZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T3B0aW9uVmFsdWUoaSkgIT09IGNhbmRpZGF0ZTtcbiAgICAgIH0pLCB7XG4gICAgICAgIGFjdGlvbjogJ3JlbW92ZS12YWx1ZScsXG4gICAgICAgIHJlbW92ZWRWYWx1ZTogcmVtb3ZlZFZhbHVlXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuYW5ub3VuY2VBcmlhTGl2ZVNlbGVjdGlvbih7XG4gICAgICAgIGV2ZW50OiAncmVtb3ZlLXZhbHVlJyxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIHZhbHVlOiByZW1vdmVkVmFsdWUgPyBfdGhpcy5nZXRPcHRpb25MYWJlbChyZW1vdmVkVmFsdWUpIDogJydcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJjbGVhclZhbHVlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc011bHRpID0gX3RoaXMucHJvcHMuaXNNdWx0aTtcblxuICAgICAgX3RoaXMub25DaGFuZ2UoaXNNdWx0aSA/IFtdIDogbnVsbCwge1xuICAgICAgICBhY3Rpb246ICdjbGVhcidcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInBvcFZhbHVlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IF90aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGxhc3RTZWxlY3RlZFZhbHVlID0gc2VsZWN0VmFsdWVbc2VsZWN0VmFsdWUubGVuZ3RoIC0gMV07XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb24oe1xuICAgICAgICBldmVudDogJ3BvcC12YWx1ZScsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICB2YWx1ZTogbGFzdFNlbGVjdGVkVmFsdWUgPyBfdGhpcy5nZXRPcHRpb25MYWJlbChsYXN0U2VsZWN0ZWRWYWx1ZSkgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMub25DaGFuZ2Uoc2VsZWN0VmFsdWUuc2xpY2UoMCwgc2VsZWN0VmFsdWUubGVuZ3RoIC0gMSksIHtcbiAgICAgICAgYWN0aW9uOiAncG9wLXZhbHVlJyxcbiAgICAgICAgcmVtb3ZlZFZhbHVlOiBsYXN0U2VsZWN0ZWRWYWx1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0T3B0aW9uTGFiZWxcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5nZXRPcHRpb25MYWJlbChkYXRhKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRPcHRpb25WYWx1ZVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmdldE9wdGlvblZhbHVlKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldFN0eWxlc1wiLCBmdW5jdGlvbiAoa2V5LCBwcm9wcykge1xuICAgICAgdmFyIGJhc2UgPSBkZWZhdWx0U3R5bGVzW2tleV0ocHJvcHMpO1xuICAgICAgYmFzZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gICAgICB2YXIgY3VzdG9tID0gX3RoaXMucHJvcHMuc3R5bGVzW2tleV07XG4gICAgICByZXR1cm4gY3VzdG9tID8gY3VzdG9tKGJhc2UsIHByb3BzKSA6IGJhc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0RWxlbWVudElkXCIsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoX3RoaXMuaW5zdGFuY2VQcmVmaXgsIFwiLVwiKS5jb25jYXQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0QWN0aXZlRGVzY2VuZGVudElkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZW51SXNPcGVuID0gX3RoaXMucHJvcHMubWVudUlzT3BlbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIG1lbnVPcHRpb25zID0gX3RoaXMkc3RhdGUubWVudU9wdGlvbnMsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlLmZvY3VzZWRPcHRpb247XG4gICAgICBpZiAoIWZvY3VzZWRPcHRpb24gfHwgIW1lbnVJc09wZW4pIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgaW5kZXggPSBtZW51T3B0aW9ucy5mb2N1c2FibGUuaW5kZXhPZihmb2N1c2VkT3B0aW9uKTtcbiAgICAgIHZhciBvcHRpb24gPSBtZW51T3B0aW9ucy5yZW5kZXJbaW5kZXhdO1xuICAgICAgcmV0dXJuIG9wdGlvbiAmJiBvcHRpb24ua2V5O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImFubm91bmNlQXJpYUxpdmVTZWxlY3Rpb25cIiwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMi5ldmVudCxcbiAgICAgICAgICBjb250ZXh0ID0gX3JlZjIuY29udGV4dDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhTGl2ZVNlbGVjdGlvbjogdmFsdWVFdmVudEFyaWFNZXNzYWdlKGV2ZW50LCBjb250ZXh0KVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiYW5ub3VuY2VBcmlhTGl2ZUNvbnRleHRcIiwgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMy5ldmVudCxcbiAgICAgICAgICBjb250ZXh0ID0gX3JlZjMuY29udGV4dDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhTGl2ZUNvbnRleHQ6IGluc3RydWN0aW9uc0FyaWFNZXNzYWdlKGV2ZW50LCBfb2JqZWN0U3ByZWFkKHt9LCBjb250ZXh0LCB7XG4gICAgICAgICAgbGFiZWw6IF90aGlzLnByb3BzWydhcmlhLWxhYmVsJ11cbiAgICAgICAgfSkpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk1lbnVNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51TW91c2VNb3ZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ29udHJvbE1vdXNlRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvcGVuTWVudU9uQ2xpY2sgPSBfdGhpcy5wcm9wcy5vcGVuTWVudU9uQ2xpY2s7XG5cbiAgICAgIGlmICghX3RoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG4gICAgICAgIGlmIChvcGVuTWVudU9uQ2xpY2spIHtcbiAgICAgICAgICBfdGhpcy5vcGVuQWZ0ZXJGb2N1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5wcm9wcy5tZW51SXNPcGVuKSB7XG4gICAgICAgIGlmIChvcGVuTWVudU9uQ2xpY2spIHtcbiAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uRHJvcGRvd25JbmRpY2F0b3JNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBpZ25vcmUgbW91c2UgZXZlbnRzIHRoYXQgd2VyZW4ndCB0cmlnZ2VyZWQgYnkgdGhlIHByaW1hcnkgYnV0dG9uXG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLmlzRGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHM0LmlzTXVsdGksXG4gICAgICAgICAgbWVudUlzT3BlbiA9IF90aGlzJHByb3BzNC5tZW51SXNPcGVuO1xuXG4gICAgICBfdGhpcy5mb2N1c0lucHV0KCk7XG5cbiAgICAgIGlmIChtZW51SXNPcGVuKSB7XG4gICAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9ICFpc011bHRpO1xuXG4gICAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5vcGVuTWVudSgnZmlyc3QnKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ2xlYXJJbmRpY2F0b3JNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBpZ25vcmUgbW91c2UgZXZlbnRzIHRoYXQgd2VyZW4ndCB0cmlnZ2VyZWQgYnkgdGhlIHByaW1hcnkgYnV0dG9uXG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJWYWx1ZSgpO1xuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIF90aGlzLm9wZW5BZnRlckZvY3VzID0gZmFsc2U7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZvY3VzSW5wdXQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uU2Nyb2xsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5jbG9zZU1lbnVPblNjcm9sbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBpc0RvY3VtZW50RWxlbWVudChldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuY2xvc2VNZW51T25TY3JvbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlTWVudU9uU2Nyb2xsKGV2ZW50KSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uTWVudUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0NvbXBvc2luZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Db21wb3NpdGlvbkVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzQ29tcG9zaW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaFN0YXJ0XCIsIGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIHRvdWNoZXMgPSBfcmVmNC50b3VjaGVzO1xuICAgICAgdmFyIHRvdWNoID0gdG91Y2hlcy5pdGVtKDApO1xuXG4gICAgICBpZiAoIXRvdWNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWCA9IHRvdWNoLmNsaWVudFg7XG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hZID0gdG91Y2guY2xpZW50WTtcbiAgICAgIF90aGlzLnVzZXJJc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25Ub3VjaE1vdmVcIiwgZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgdG91Y2hlcyA9IF9yZWY1LnRvdWNoZXM7XG4gICAgICB2YXIgdG91Y2ggPSB0b3VjaGVzLml0ZW0oMCk7XG5cbiAgICAgIGlmICghdG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGFYID0gTWF0aC5hYnModG91Y2guY2xpZW50WCAtIF90aGlzLmluaXRpYWxUb3VjaFgpO1xuICAgICAgdmFyIGRlbHRhWSA9IE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSBfdGhpcy5pbml0aWFsVG91Y2hZKTtcbiAgICAgIHZhciBtb3ZlVGhyZXNob2xkID0gNTtcbiAgICAgIF90aGlzLnVzZXJJc0RyYWdnaW5nID0gZGVsdGFYID4gbW92ZVRocmVzaG9sZCB8fCBkZWx0YVkgPiBtb3ZlVGhyZXNob2xkO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjsgLy8gY2xvc2UgdGhlIG1lbnUgaWYgdGhlIHVzZXIgdGFwcyBvdXRzaWRlXG5cbiAgICAgIGlmIChfdGhpcy5jb250cm9sUmVmICYmICFfdGhpcy5jb250cm9sUmVmLmNvbnRhaW5zKGV2ZW50LmN1cnJlbnRUYXJnZXQpICYmIF90aGlzLm1lbnVMaXN0UmVmICYmICFfdGhpcy5tZW51TGlzdFJlZi5jb250YWlucyhldmVudC5jdXJyZW50VGFyZ2V0KSkge1xuICAgICAgICBfdGhpcy5ibHVySW5wdXQoKTtcbiAgICAgIH0gLy8gcmVzZXQgbW92ZSB2YXJzXG5cblxuICAgICAgX3RoaXMuaW5pdGlhbFRvdWNoWCA9IDA7XG4gICAgICBfdGhpcy5pbml0aWFsVG91Y2hZID0gMDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkNvbnRyb2xUb3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vbkNvbnRyb2xNb3VzZURvd24oZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ2xlYXJJbmRpY2F0b3JUb3VjaEVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy51c2VySXNEcmFnZ2luZykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vbkNsZWFySW5kaWNhdG9yTW91c2VEb3duKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbkRyb3Bkb3duSW5kaWNhdG9yVG91Y2hFbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMudXNlcklzRHJhZ2dpbmcpIHJldHVybjtcblxuICAgICAgX3RoaXMub25Ecm9wZG93bkluZGljYXRvck1vdXNlRG93bihldmVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlSW5wdXRDaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaW5wdXRWYWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgICBfdGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgX3RoaXMub25JbnB1dENoYW5nZShpbnB1dFZhbHVlLCB7XG4gICAgICAgIGFjdGlvbjogJ2lucHV0LWNoYW5nZSdcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vbk1lbnVPcGVuKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25JbnB1dEZvY3VzXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzNS5pc1NlYXJjaGFibGUsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNS5pc011bHRpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBpc1NlYXJjaGFibGU6IGlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzRm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5vcGVuQWZ0ZXJGb2N1cyB8fCBfdGhpcy5wcm9wcy5vcGVuTWVudU9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm9wZW5BZnRlckZvY3VzID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25JbnB1dEJsdXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMubWVudUxpc3RSZWYgJiYgX3RoaXMubWVudUxpc3RSZWYuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgX3RoaXMuaW5wdXRSZWYuZm9jdXMoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMub25JbnB1dENoYW5nZSgnJywge1xuICAgICAgICBhY3Rpb246ICdpbnB1dC1ibHVyJ1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uTWVudUNsb3NlKCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBudWxsLFxuICAgICAgICBpc0ZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbk9wdGlvbkhvdmVyXCIsIGZ1bmN0aW9uIChmb2N1c2VkT3B0aW9uKSB7XG4gICAgICBpZiAoX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciB8fCBfdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uID09PSBmb2N1c2VkT3B0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzaG91bGRIaWRlU2VsZWN0ZWRPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBoaWRlU2VsZWN0ZWRPcHRpb25zID0gX3RoaXMkcHJvcHM2LmhpZGVTZWxlY3RlZE9wdGlvbnMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNi5pc011bHRpO1xuICAgICAgaWYgKGhpZGVTZWxlY3RlZE9wdGlvbnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlzTXVsdGk7XG4gICAgICByZXR1cm4gaGlkZVNlbGVjdGVkT3B0aW9ucztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbktleURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzNy5pc011bHRpLFxuICAgICAgICAgIGJhY2tzcGFjZVJlbW92ZXNWYWx1ZSA9IF90aGlzJHByb3BzNy5iYWNrc3BhY2VSZW1vdmVzVmFsdWUsXG4gICAgICAgICAgZXNjYXBlQ2xlYXJzVmFsdWUgPSBfdGhpcyRwcm9wczcuZXNjYXBlQ2xlYXJzVmFsdWUsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzNy5pbnB1dFZhbHVlLFxuICAgICAgICAgIGlzQ2xlYXJhYmxlID0gX3RoaXMkcHJvcHM3LmlzQ2xlYXJhYmxlLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczcuaXNEaXNhYmxlZCxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHM3Lm1lbnVJc09wZW4sXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHM3Lm9uS2V5RG93bixcbiAgICAgICAgICB0YWJTZWxlY3RzVmFsdWUgPSBfdGhpcyRwcm9wczcudGFiU2VsZWN0c1ZhbHVlLFxuICAgICAgICAgIG9wZW5NZW51T25Gb2N1cyA9IF90aGlzJHByb3BzNy5vcGVuTWVudU9uRm9jdXM7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgaXNDb21wb3NpbmcgPSBfdGhpcyRzdGF0ZTIuaXNDb21wb3NpbmcsXG4gICAgICAgICAgZm9jdXNlZE9wdGlvbiA9IF90aGlzJHN0YXRlMi5mb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlMi5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTIuc2VsZWN0VmFsdWU7XG4gICAgICBpZiAoaXNEaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIG9uS2V5RG93biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIEJsb2NrIG9wdGlvbiBob3ZlciBldmVudHMgd2hlbiB0aGUgdXNlciBoYXMganVzdCBwcmVzc2VkIGEga2V5XG5cblxuICAgICAgX3RoaXMuYmxvY2tPcHRpb25Ib3ZlciA9IHRydWU7XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgaWYgKCFpc011bHRpIHx8IGlucHV0VmFsdWUpIHJldHVybjtcblxuICAgICAgICAgIF90aGlzLmZvY3VzVmFsdWUoJ3ByZXZpb3VzJyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICBpZiAoIWlzTXVsdGkgfHwgaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNWYWx1ZSgnbmV4dCcpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgICAgY2FzZSAnQmFja3NwYWNlJzpcbiAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGZvY3VzZWRWYWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlVmFsdWUoZm9jdXNlZFZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFiYWNrc3BhY2VSZW1vdmVzVmFsdWUpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgICAgX3RoaXMucG9wVmFsdWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDbGVhcmFibGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2xlYXJWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgaWYgKGlzQ29tcG9zaW5nKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIW1lbnVJc09wZW4gfHwgIXRhYlNlbGVjdHNWYWx1ZSB8fCAhZm9jdXNlZE9wdGlvbiB8fCAvLyBkb24ndCBjYXB0dXJlIHRoZSBldmVudCBpZiB0aGUgbWVudSBvcGVucyBvbiBmb2N1cyBhbmQgdGhlIGZvY3VzZWRcbiAgICAgICAgICAvLyBvcHRpb24gaXMgYWxyZWFkeSBzZWxlY3RlZDsgaXQgYnJlYWtzIHRoZSBmbG93IG9mIG5hdmlnYXRpb25cbiAgICAgICAgICBvcGVuTWVudU9uRm9jdXMgJiYgX3RoaXMuaXNPcHRpb25TZWxlY3RlZChmb2N1c2VkT3B0aW9uLCBzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5zZWxlY3RPcHRpb24oZm9jdXNlZE9wdGlvbik7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIGlmICghZm9jdXNlZE9wdGlvbikgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGlzQ29tcG9zaW5nKSByZXR1cm47XG5cbiAgICAgICAgICAgIF90aGlzLnNlbGVjdE9wdGlvbihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBfdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgICAgICAgIGFjdGlvbjogJ21lbnUtY2xvc2UnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMub25NZW51Q2xvc2UoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2xlYXJhYmxlICYmIGVzY2FwZUNsZWFyc1ZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5jbGVhclZhbHVlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgLy8gc3BhY2VcbiAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghbWVudUlzT3Blbikge1xuICAgICAgICAgICAgX3RoaXMub3Blbk1lbnUoJ2ZpcnN0Jyk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZm9jdXNlZE9wdGlvbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuc2VsZWN0T3B0aW9uKGZvY3VzZWRPcHRpb24pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCd1cCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuTWVudSgnbGFzdCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgaWYgKG1lbnVJc09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmZvY3VzT3B0aW9uKCdkb3duJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm9wZW5NZW51KCdmaXJzdCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbigncGFnZXVwJyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICAgICAgaWYgKCFtZW51SXNPcGVuKSByZXR1cm47XG5cbiAgICAgICAgICBfdGhpcy5mb2N1c09wdGlvbigncGFnZWRvd24nKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ2ZpcnN0Jyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAgICAgX3RoaXMuZm9jdXNPcHRpb24oJ2xhc3QnKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgdmFyIHZhbHVlID0gX3Byb3BzLnZhbHVlO1xuICAgIF90aGlzLmNhY2hlQ29tcG9uZW50cyA9IG1lbW9pemVPbmUoX3RoaXMuY2FjaGVDb21wb25lbnRzLCBleHBvcnRlZEVxdWFsKS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcblxuICAgIF90aGlzLmNhY2hlQ29tcG9uZW50cyhfcHJvcHMuY29tcG9uZW50cyk7XG5cbiAgICBfdGhpcy5pbnN0YW5jZVByZWZpeCA9ICdyZWFjdC1zZWxlY3QtJyArIChfdGhpcy5wcm9wcy5pbnN0YW5jZUlkIHx8ICsraW5zdGFuY2VJZCk7XG5cbiAgICB2YXIgX3NlbGVjdFZhbHVlID0gY2xlYW5WYWx1ZSh2YWx1ZSk7XG5cbiAgICB2YXIgX21lbnVPcHRpb25zID0gX3RoaXMuYnVpbGRNZW51T3B0aW9ucyhfcHJvcHMsIF9zZWxlY3RWYWx1ZSk7XG5cbiAgICBfdGhpcy5zdGF0ZS5tZW51T3B0aW9ucyA9IF9tZW51T3B0aW9ucztcbiAgICBfdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZSA9IF9zZWxlY3RWYWx1ZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VsZWN0LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3RhcnRMaXN0ZW5pbmdDb21wb3NpdGlvbigpO1xuICAgICAgdGhpcy5zdGFydExpc3RlbmluZ1RvVG91Y2goKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VNZW51T25TY3JvbGwgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAvLyBMaXN0ZW4gdG8gYWxsIHNjcm9sbCBldmVudHMsIGFuZCBmaWx0ZXIgdGhlbSBvdXQgaW5zaWRlIG9mICdvblNjcm9sbCdcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICB0aGlzLmZvY3VzSW5wdXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3B0aW9ucyA9IF90aGlzJHByb3BzOC5vcHRpb25zLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHM4LnZhbHVlLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRwcm9wczguaW5wdXRWYWx1ZTsgLy8gcmUtY2FjaGUgY3VzdG9tIGNvbXBvbmVudHNcblxuICAgICAgdGhpcy5jYWNoZUNvbXBvbmVudHMobmV4dFByb3BzLmNvbXBvbmVudHMpOyAvLyByZWJ1aWxkIHRoZSBtZW51IG9wdGlvbnNcblxuICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gdmFsdWUgfHwgbmV4dFByb3BzLm9wdGlvbnMgIT09IG9wdGlvbnMgfHwgbmV4dFByb3BzLmlucHV0VmFsdWUgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gY2xlYW5WYWx1ZShuZXh0UHJvcHMudmFsdWUpO1xuICAgICAgICB2YXIgbWVudU9wdGlvbnMgPSB0aGlzLmJ1aWxkTWVudU9wdGlvbnMobmV4dFByb3BzLCBzZWxlY3RWYWx1ZSk7XG4gICAgICAgIHZhciBmb2N1c2VkVmFsdWUgPSB0aGlzLmdldE5leHRGb2N1c2VkVmFsdWUoc2VsZWN0VmFsdWUpO1xuICAgICAgICB2YXIgZm9jdXNlZE9wdGlvbiA9IHRoaXMuZ2V0TmV4dEZvY3VzZWRPcHRpb24obWVudU9wdGlvbnMuZm9jdXNhYmxlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudU9wdGlvbnM6IG1lbnVPcHRpb25zLFxuICAgICAgICAgIHNlbGVjdFZhbHVlOiBzZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uOiBmb2N1c2VkT3B0aW9uLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZTogZm9jdXNlZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBzb21lIHVwZGF0ZXMgc2hvdWxkIHRvZ2dsZSB0aGUgc3RhdGUgb2YgdGhlIGlucHV0IHZpc2liaWxpdHlcblxuXG4gICAgICBpZiAodGhpcy5pbnB1dElzSGlkZGVuQWZ0ZXJVcGRhdGUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbnB1dElzSGlkZGVuOiB0aGlzLmlucHV0SXNIaWRkZW5BZnRlclVwZGF0ZVxuICAgICAgICB9KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzOS5pc0Rpc2FibGVkLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczkubWVudUlzT3BlbjtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcblxuICAgICAgaWYgKCAvLyBlbnN1cmUgZm9jdXMgaXMgcmVzdG9yZWQgY29ycmVjdGx5IHdoZW4gdGhlIGNvbnRyb2wgYmVjb21lcyBlbmFibGVkXG4gICAgICBpc0ZvY3VzZWQgJiYgIWlzRGlzYWJsZWQgJiYgcHJldlByb3BzLmlzRGlzYWJsZWQgfHwgLy8gZW5zdXJlIGZvY3VzIGlzIG9uIHRoZSBJbnB1dCB3aGVuIHRoZSBtZW51IG9wZW5zXG4gICAgICBpc0ZvY3VzZWQgJiYgbWVudUlzT3BlbiAmJiAhcHJldlByb3BzLm1lbnVJc09wZW4pIHtcbiAgICAgICAgdGhpcy5mb2N1c0lucHV0KCk7XG4gICAgICB9IC8vIHNjcm9sbCB0aGUgZm9jdXNlZCBvcHRpb24gaW50byB2aWV3IGlmIG5lY2Vzc2FyeVxuXG5cbiAgICAgIGlmICh0aGlzLm1lbnVMaXN0UmVmICYmIHRoaXMuZm9jdXNlZE9wdGlvblJlZiAmJiB0aGlzLnNjcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KHRoaXMubWVudUxpc3RSZWYsIHRoaXMuZm9jdXNlZE9wdGlvblJlZik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvbigpO1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nVG9Ub3VjaCgpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVudU9wZW5cIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBDb25zdW1lciBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lbnVPcGVuKCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1lbnVPcGVuKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVudUNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVudUNsb3NlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzMTAuaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczEwLmlzTXVsdGk7XG4gICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBpc1NlYXJjaGFibGU6IGlzU2VhcmNoYWJsZSxcbiAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbklucHV0Q2hhbmdlKCcnLCB7XG4gICAgICAgIGFjdGlvbjogJ21lbnUtY2xvc2UnXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMub25NZW51Q2xvc2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25JbnB1dENoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbklucHV0Q2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UobmV3VmFsdWUsIGFjdGlvbk1ldGEpO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTWV0aG9kc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1c0lucHV0KCkge1xuICAgICAgaWYgKCF0aGlzLmlucHV0UmVmKSByZXR1cm47XG4gICAgICB0aGlzLmlucHV0UmVmLmZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVySW5wdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuaW5wdXRSZWYpIHJldHVybjtcbiAgICAgIHRoaXMuaW5wdXRSZWYuYmx1cigpO1xuICAgIH0gLy8gYWxpYXNlZCBmb3IgY29uc3VtZXJzXG5cbiAgfSwge1xuICAgIGtleTogXCJvcGVuTWVudVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuTWVudShmb2N1c09wdGlvbikge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgbWVudU9wdGlvbnMgPSBfdGhpcyRzdGF0ZTMubWVudU9wdGlvbnMsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTMuc2VsZWN0VmFsdWUsXG4gICAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkc3RhdGUzLmlzRm9jdXNlZDtcbiAgICAgIHZhciBpc011bHRpID0gdGhpcy5wcm9wcy5pc011bHRpO1xuICAgICAgdmFyIG9wZW5BdEluZGV4ID0gZm9jdXNPcHRpb24gPT09ICdmaXJzdCcgPyAwIDogbWVudU9wdGlvbnMuZm9jdXNhYmxlLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmICghaXNNdWx0aSkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IG1lbnVPcHRpb25zLmZvY3VzYWJsZS5pbmRleE9mKHNlbGVjdFZhbHVlWzBdKTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgb3BlbkF0SW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgICB9IC8vIG9ubHkgc2Nyb2xsIGlmIHRoZSBtZW51IGlzbid0IGFscmVhZHkgb3BlblxuXG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSAhKGlzRm9jdXNlZCAmJiB0aGlzLm1lbnVMaXN0UmVmKTtcbiAgICAgIHRoaXMuaW5wdXRJc0hpZGRlbkFmdGVyVXBkYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLm9uTWVudU9wZW4oKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkVmFsdWU6IG51bGwsXG4gICAgICAgIGZvY3VzZWRPcHRpb246IG1lbnVPcHRpb25zLmZvY3VzYWJsZVtvcGVuQXRJbmRleF1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgIGV2ZW50OiAnbWVudSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb2N1c1ZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzVmFsdWUoZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNNdWx0aSA9IF90aGlzJHByb3BzMTEuaXNNdWx0aSxcbiAgICAgICAgICBpc1NlYXJjaGFibGUgPSBfdGhpcyRwcm9wczExLmlzU2VhcmNoYWJsZTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTQgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU0LnNlbGVjdFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlNC5mb2N1c2VkVmFsdWU7IC8vIE9ubHkgbXVsdGlzZWxlY3RzIHN1cHBvcnQgdmFsdWUgZm9jdXNpbmdcblxuICAgICAgaWYgKCFpc011bHRpKSByZXR1cm47XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogbnVsbFxuICAgICAgfSk7XG4gICAgICB2YXIgZm9jdXNlZEluZGV4ID0gc2VsZWN0VmFsdWUuaW5kZXhPZihmb2N1c2VkVmFsdWUpO1xuXG4gICAgICBpZiAoIWZvY3VzZWRWYWx1ZSkge1xuICAgICAgICBmb2N1c2VkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgICAgZXZlbnQ6ICd2YWx1ZSdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0SW5kZXggPSBzZWxlY3RWYWx1ZS5sZW5ndGggLSAxO1xuICAgICAgdmFyIG5leHRGb2N1cyA9IC0xO1xuICAgICAgaWYgKCFzZWxlY3RWYWx1ZS5sZW5ndGgpIHJldHVybjtcblxuICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgIGlmIChmb2N1c2VkSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIC8vIGRvbid0IGN5Y2xlIGZyb20gdGhlIHN0YXJ0IHRvIHRoZSBlbmRcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb2N1c2VkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBpZiBub3RoaW5nIGlzIGZvY3VzZWQsIGZvY3VzIHRoZSBsYXN0IHZhbHVlIGZpcnN0XG4gICAgICAgICAgICBuZXh0Rm9jdXMgPSBsYXN0SW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCAtIDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgaWYgKGZvY3VzZWRJbmRleCA+IC0xICYmIGZvY3VzZWRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgbmV4dEZvY3VzID0gZm9jdXNlZEluZGV4ICsgMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRGb2N1cyA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5hbm5vdW5jZUFyaWFMaXZlQ29udGV4dCh7XG4gICAgICAgICAgZXZlbnQ6ICdpbnB1dCcsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgaXNTZWFyY2hhYmxlOiBpc1NlYXJjaGFibGUsXG4gICAgICAgICAgICBpc011bHRpOiBpc011bHRpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0SXNIaWRkZW46IG5leHRGb2N1cyA9PT0gLTEgPyBmYWxzZSA6IHRydWUsXG4gICAgICAgIGZvY3VzZWRWYWx1ZTogc2VsZWN0VmFsdWVbbmV4dEZvY3VzXVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzT3B0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzT3B0aW9uKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2ZpcnN0JztcbiAgICAgIHZhciBwYWdlU2l6ZSA9IHRoaXMucHJvcHMucGFnZVNpemU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBmb2N1c2VkT3B0aW9uID0gX3RoaXMkc3RhdGU1LmZvY3VzZWRPcHRpb24sXG4gICAgICAgICAgbWVudU9wdGlvbnMgPSBfdGhpcyRzdGF0ZTUubWVudU9wdGlvbnM7XG4gICAgICB2YXIgb3B0aW9ucyA9IG1lbnVPcHRpb25zLmZvY3VzYWJsZTtcbiAgICAgIGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcbiAgICAgIHZhciBuZXh0Rm9jdXMgPSAwOyAvLyBoYW5kbGVzICdmaXJzdCdcblxuICAgICAgdmFyIGZvY3VzZWRJbmRleCA9IG9wdGlvbnMuaW5kZXhPZihmb2N1c2VkT3B0aW9uKTtcblxuICAgICAgaWYgKCFmb2N1c2VkT3B0aW9uKSB7XG4gICAgICAgIGZvY3VzZWRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmFubm91bmNlQXJpYUxpdmVDb250ZXh0KHtcbiAgICAgICAgICBldmVudDogJ21lbnUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgIG5leHRGb2N1cyA9IGZvY3VzZWRJbmRleCA+IDAgPyBmb2N1c2VkSW5kZXggLSAxIDogb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSAoZm9jdXNlZEluZGV4ICsgMSkgJSBvcHRpb25zLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncGFnZXVwJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggLSBwYWdlU2l6ZTtcbiAgICAgICAgaWYgKG5leHRGb2N1cyA8IDApIG5leHRGb2N1cyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBmb2N1c2VkSW5kZXggKyBwYWdlU2l6ZTtcbiAgICAgICAgaWYgKG5leHRGb2N1cyA+IG9wdGlvbnMubGVuZ3RoIC0gMSkgbmV4dEZvY3VzID0gb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsYXN0Jykge1xuICAgICAgICBuZXh0Rm9jdXMgPSBvcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRPcHRpb246IG9wdGlvbnNbbmV4dEZvY3VzXSxcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VGhlbWVcIixcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBHZXR0ZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgICAgLy8gVXNlIHRoZSBkZWZhdWx0IHRoZW1lIGlmIHRoZXJlIGFyZSBubyBjdXN0b21pemF0aW9ucy5cbiAgICAgIGlmICghdGhpcy5wcm9wcy50aGVtZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRoZW1lO1xuICAgICAgfSAvLyBJZiB0aGUgdGhlbWUgcHJvcCBpcyBhIGZ1bmN0aW9uLCBhc3N1bWUgdGhlIGZ1bmN0aW9uXG4gICAgICAvLyBrbm93cyBob3cgdG8gbWVyZ2UgdGhlIHBhc3NlZC1pbiBkZWZhdWx0IHRoZW1lIHdpdGhcbiAgICAgIC8vIGl0cyBvd24gbW9kaWZpY2F0aW9ucy5cblxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMudGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiBhIHBsYWluIHRoZW1lIG9iamVjdCB3YXMgcGFzc2VkIGluLFxuICAgICAgLy8gb3ZlcmxheSBpdCB3aXRoIHRoZSBkZWZhdWx0IHRoZW1lLlxuXG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0VGhlbWUsIHRoaXMucHJvcHMudGhlbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb21tb25Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb21tb25Qcm9wcygpIHtcbiAgICAgIHZhciBjbGVhclZhbHVlID0gdGhpcy5jbGVhclZhbHVlLFxuICAgICAgICAgIGdldFN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzLFxuICAgICAgICAgIHNldFZhbHVlID0gdGhpcy5zZXRWYWx1ZSxcbiAgICAgICAgICBzZWxlY3RPcHRpb24gPSB0aGlzLnNlbGVjdE9wdGlvbixcbiAgICAgICAgICBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gcHJvcHMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgICAgIGlzTXVsdGkgPSBwcm9wcy5pc011bHRpLFxuICAgICAgICAgIGlzUnRsID0gcHJvcHMuaXNSdGwsXG4gICAgICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnM7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSB0aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGhhc1ZhbHVlID0gdGhpcy5oYXNWYWx1ZSgpO1xuXG4gICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIGN4ID0gY2xhc3NOYW1lcy5iaW5kKG51bGwsIGNsYXNzTmFtZVByZWZpeCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjeDogY3gsXG4gICAgICAgIGNsZWFyVmFsdWU6IGNsZWFyVmFsdWUsXG4gICAgICAgIGdldFN0eWxlczogZ2V0U3R5bGVzLFxuICAgICAgICBnZXRWYWx1ZTogZ2V0VmFsdWUsXG4gICAgICAgIGhhc1ZhbHVlOiBoYXNWYWx1ZSxcbiAgICAgICAgaXNNdWx0aTogaXNNdWx0aSxcbiAgICAgICAgaXNSdGw6IGlzUnRsLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBzZWxlY3RPcHRpb246IHNlbGVjdE9wdGlvbixcbiAgICAgICAgc2V0VmFsdWU6IHNldFZhbHVlLFxuICAgICAgICBzZWxlY3RQcm9wczogcHJvcHMsXG4gICAgICAgIHRoZW1lOiB0aGlzLmdldFRoZW1lKClcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE5leHRGb2N1c2VkVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmV4dEZvY3VzZWRWYWx1ZShuZXh0U2VsZWN0VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmNsZWFyRm9jdXNWYWx1ZU9uVXBkYXRlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJGb2N1c1ZhbHVlT25VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRzdGF0ZTYgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWRWYWx1ZSA9IF90aGlzJHN0YXRlNi5mb2N1c2VkVmFsdWUsXG4gICAgICAgICAgbGFzdFNlbGVjdFZhbHVlID0gX3RoaXMkc3RhdGU2LnNlbGVjdFZhbHVlO1xuICAgICAgdmFyIGxhc3RGb2N1c2VkSW5kZXggPSBsYXN0U2VsZWN0VmFsdWUuaW5kZXhPZihmb2N1c2VkVmFsdWUpO1xuXG4gICAgICBpZiAobGFzdEZvY3VzZWRJbmRleCA+IC0xKSB7XG4gICAgICAgIHZhciBuZXh0Rm9jdXNlZEluZGV4ID0gbmV4dFNlbGVjdFZhbHVlLmluZGV4T2YoZm9jdXNlZFZhbHVlKTtcblxuICAgICAgICBpZiAobmV4dEZvY3VzZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgLy8gdGhlIGZvY3VzZWQgdmFsdWUgaXMgc3RpbGwgaW4gdGhlIHNlbGVjdFZhbHVlLCByZXR1cm4gaXRcbiAgICAgICAgICByZXR1cm4gZm9jdXNlZFZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RGb2N1c2VkSW5kZXggPCBuZXh0U2VsZWN0VmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdGhlIGZvY3VzZWRWYWx1ZSBpcyBub3QgcHJlc2VudCBpbiB0aGUgbmV4dCBzZWxlY3RWYWx1ZSBhcnJheSBieVxuICAgICAgICAgIC8vIHJlZmVyZW5jZSwgc28gcmV0dXJuIHRoZSBuZXcgdmFsdWUgYXQgdGhlIHNhbWUgaW5kZXhcbiAgICAgICAgICByZXR1cm4gbmV4dFNlbGVjdFZhbHVlW2xhc3RGb2N1c2VkSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXROZXh0Rm9jdXNlZE9wdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROZXh0Rm9jdXNlZE9wdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEZvY3VzZWRPcHRpb24gPSB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb247XG4gICAgICByZXR1cm4gbGFzdEZvY3VzZWRPcHRpb24gJiYgb3B0aW9ucy5pbmRleE9mKGxhc3RGb2N1c2VkT3B0aW9uKSA+IC0xID8gbGFzdEZvY3VzZWRPcHRpb24gOiBvcHRpb25zWzBdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNWYWx1ZSgpIHtcbiAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0VmFsdWU7XG4gICAgICByZXR1cm4gc2VsZWN0VmFsdWUubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzT3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNPcHRpb25zKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5zdGF0ZS5tZW51T3B0aW9ucy5yZW5kZXIubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb3VudE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY291bnRPcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubWVudU9wdGlvbnMuZm9jdXNhYmxlLmxlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNDbGVhcmFibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNDbGVhcmFibGUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNDbGVhcmFibGUgPSBfdGhpcyRwcm9wczEyLmlzQ2xlYXJhYmxlLFxuICAgICAgICAgIGlzTXVsdGkgPSBfdGhpcyRwcm9wczEyLmlzTXVsdGk7IC8vIHNpbmdsZSBzZWxlY3QsIGJ5IGRlZmF1bHQsIElTIE5PVCBjbGVhcmFibGVcbiAgICAgIC8vIG11bHRpIHNlbGVjdCwgYnkgZGVmYXVsdCwgSVMgY2xlYXJhYmxlXG5cbiAgICAgIGlmIChpc0NsZWFyYWJsZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaXNNdWx0aTtcbiAgICAgIHJldHVybiBpc0NsZWFyYWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNPcHRpb25EaXNhYmxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09wdGlvbkRpc2FibGVkJCQxKG9wdGlvbiwgc2VsZWN0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5wcm9wcy5pc09wdGlvbkRpc2FibGVkID09PSAnZnVuY3Rpb24nID8gdGhpcy5wcm9wcy5pc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpIDogZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzT3B0aW9uU2VsZWN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcHRpb25TZWxlY3RlZChvcHRpb24sIHNlbGVjdFZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHNlbGVjdFZhbHVlLmluZGV4T2Yob3B0aW9uKSA+IC0xKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmlzT3B0aW9uU2VsZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXNPcHRpb25TZWxlY3RlZChvcHRpb24sIHNlbGVjdFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbmRpZGF0ZSA9IHRoaXMuZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcbiAgICAgIHJldHVybiBzZWxlY3RWYWx1ZS5zb21lKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZ2V0T3B0aW9uVmFsdWUoaSkgPT09IGNhbmRpZGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaWx0ZXJPcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyT3B0aW9uKG9wdGlvbiwgaW5wdXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9uID8gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb24ob3B0aW9uLCBpbnB1dFZhbHVlKSA6IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdE9wdGlvbkxhYmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdE9wdGlvbkxhYmVsKGRhdGEsIGNvbnRleHQpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5mb3JtYXRPcHRpb25MYWJlbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHRoaXMucHJvcHMuaW5wdXRWYWx1ZTtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZm9ybWF0T3B0aW9uTGFiZWwoZGF0YSwge1xuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzZWxlY3RWYWx1ZTogc2VsZWN0VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25MYWJlbChkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0R3JvdXBMYWJlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRHcm91cExhYmVsJCQxKGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmZvcm1hdEdyb3VwTGFiZWwoZGF0YSk7XG4gICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBNb3VzZSBIYW5kbGVyc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdDb21wb3NpdGlvblwiLFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIENvbXBvc2l0aW9uIEhhbmRsZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nQ29tcG9zaXRpb24oKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5vbkNvbXBvc2l0aW9uU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCB0aGlzLm9uQ29tcG9zaXRpb25FbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ0NvbXBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdDb21wb3NpdGlvbigpIHtcbiAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCB0aGlzLm9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5vbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdUb1RvdWNoXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gVG91Y2ggSGFuZGxlcnNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmdUb1RvdWNoKCkge1xuICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1RvVG91Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ1RvVG91Y2goKSB7XG4gICAgICBpZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJidWlsZE1lbnVPcHRpb25zXCIsXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTWVudSBPcHRpb25zXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkTWVudU9wdGlvbnMocHJvcHMsIHNlbGVjdFZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyRpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3Byb3BzJGlucHV0VmFsdWUgPT09IHZvaWQgMCA/ICcnIDogX3Byb3BzJGlucHV0VmFsdWUsXG4gICAgICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnM7XG5cbiAgICAgIHZhciB0b09wdGlvbiA9IGZ1bmN0aW9uIHRvT3B0aW9uKG9wdGlvbiwgaWQpIHtcbiAgICAgICAgdmFyIGlzRGlzYWJsZWQgPSBfdGhpczMuaXNPcHRpb25EaXNhYmxlZChvcHRpb24sIHNlbGVjdFZhbHVlKTtcblxuICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IF90aGlzMy5pc09wdGlvblNlbGVjdGVkKG9wdGlvbiwgc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgIHZhciBsYWJlbCA9IF90aGlzMy5nZXRPcHRpb25MYWJlbChvcHRpb24pO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzMy5nZXRPcHRpb25WYWx1ZShvcHRpb24pO1xuXG4gICAgICAgIGlmIChfdGhpczMuc2hvdWxkSGlkZVNlbGVjdGVkT3B0aW9ucygpICYmIGlzU2VsZWN0ZWQgfHwgIV90aGlzMy5maWx0ZXJPcHRpb24oe1xuICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgZGF0YTogb3B0aW9uXG4gICAgICAgIH0sIGlucHV0VmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9uSG92ZXIgPSBpc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMub25PcHRpb25Ib3ZlcihvcHRpb24pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25TZWxlY3QgPSBpc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2VsZWN0T3B0aW9uKG9wdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcHRpb25JZCA9IFwiXCIuY29uY2F0KF90aGlzMy5nZXRFbGVtZW50SWQoJ29wdGlvbicpLCBcIi1cIikuY29uY2F0KGlkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgICBpZDogb3B0aW9uSWQsXG4gICAgICAgICAgICBvbkNsaWNrOiBvblNlbGVjdCxcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBvbkhvdmVyLFxuICAgICAgICAgICAgb25Nb3VzZU92ZXI6IG9uSG92ZXIsXG4gICAgICAgICAgICB0YWJJbmRleDogLTFcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IG9wdGlvbixcbiAgICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAga2V5OiBvcHRpb25JZCxcbiAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgdHlwZTogJ29wdGlvbicsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSwgaXRlbUluZGV4KSB7XG4gICAgICAgIGlmIChpdGVtLm9wdGlvbnMpIHtcbiAgICAgICAgICAvLyBUT0RPIG5lZWRzIGEgdGlkaWVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgaWYgKCFfdGhpczMuaGFzR3JvdXBzKSBfdGhpczMuaGFzR3JvdXBzID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgaXRlbXMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gaXRlbXMubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRvT3B0aW9uKGNoaWxkLCBcIlwiLmNvbmNhdChpdGVtSW5kZXgsIFwiLVwiKS5jb25jYXQoaSkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmlzRGlzYWJsZWQpIGFjYy5mb2N1c2FibGUucHVzaChjaGlsZCk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBncm91cElkID0gXCJcIi5jb25jYXQoX3RoaXMzLmdldEVsZW1lbnRJZCgnZ3JvdXAnKSwgXCItXCIpLmNvbmNhdChpdGVtSW5kZXgpO1xuICAgICAgICAgICAgYWNjLnJlbmRlci5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcbiAgICAgICAgICAgICAga2V5OiBncm91cElkLFxuICAgICAgICAgICAgICBkYXRhOiBpdGVtLFxuICAgICAgICAgICAgICBvcHRpb25zOiBjaGlsZHJlblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvcHRpb24gPSB0b09wdGlvbihpdGVtLCBcIlwiLmNvbmNhdChpdGVtSW5kZXgpKTtcblxuICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIGFjYy5yZW5kZXIucHVzaChvcHRpb24pO1xuICAgICAgICAgICAgaWYgKCFvcHRpb24uaXNEaXNhYmxlZCkgYWNjLmZvY3VzYWJsZS5wdXNoKGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7XG4gICAgICAgIHJlbmRlcjogW10sXG4gICAgICAgIGZvY3VzYWJsZTogW11cbiAgICAgIH0pO1xuICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gUmVuZGVyZXJzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgfSwge1xuICAgIGtleTogXCJjb25zdHJ1Y3RBcmlhTGl2ZU1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3RydWN0QXJpYUxpdmVNZXNzYWdlKCkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlNyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgYXJpYUxpdmVDb250ZXh0ID0gX3RoaXMkc3RhdGU3LmFyaWFMaXZlQ29udGV4dCxcbiAgICAgICAgICBzZWxlY3RWYWx1ZSA9IF90aGlzJHN0YXRlNy5zZWxlY3RWYWx1ZSxcbiAgICAgICAgICBmb2N1c2VkVmFsdWUgPSBfdGhpcyRzdGF0ZTcuZm9jdXNlZFZhbHVlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZTcuZm9jdXNlZE9wdGlvbjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcHRpb25zID0gX3RoaXMkcHJvcHMxMy5vcHRpb25zLFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczEzLm1lbnVJc09wZW4sXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzY3JlZW5SZWFkZXJTdGF0dXMgPSBfdGhpcyRwcm9wczEzLnNjcmVlblJlYWRlclN0YXR1czsgLy8gQW4gYXJpYSBsaXZlIG1lc3NhZ2UgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB2YWx1ZSBpbiB0aGUgc2VsZWN0LlxuXG4gICAgICB2YXIgZm9jdXNlZFZhbHVlTXNnID0gZm9jdXNlZFZhbHVlID8gdmFsdWVGb2N1c0FyaWFNZXNzYWdlKHtcbiAgICAgICAgZm9jdXNlZFZhbHVlOiBmb2N1c2VkVmFsdWUsXG4gICAgICAgIGdldE9wdGlvbkxhYmVsOiB0aGlzLmdldE9wdGlvbkxhYmVsLFxuICAgICAgICBzZWxlY3RWYWx1ZTogc2VsZWN0VmFsdWVcbiAgICAgIH0pIDogJyc7IC8vIEFuIGFyaWEgbGl2ZSBtZXNzYWdlIHJlcHJlc2VudGluZyB0aGUgY3VycmVudGx5IGZvY3VzZWQgb3B0aW9uIGluIHRoZSBzZWxlY3QuXG5cbiAgICAgIHZhciBmb2N1c2VkT3B0aW9uTXNnID0gZm9jdXNlZE9wdGlvbiAmJiBtZW51SXNPcGVuID8gb3B0aW9uRm9jdXNBcmlhTWVzc2FnZSh7XG4gICAgICAgIGZvY3VzZWRPcHRpb246IGZvY3VzZWRPcHRpb24sXG4gICAgICAgIGdldE9wdGlvbkxhYmVsOiB0aGlzLmdldE9wdGlvbkxhYmVsLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICB9KSA6ICcnOyAvLyBBbiBhcmlhIGxpdmUgbWVzc2FnZSByZXByZXNlbnRpbmcgdGhlIHNldCBvZiBmb2N1c2FibGUgcmVzdWx0cyBhbmQgY3VycmVudCBzZWFyY2h0ZXJtL2lucHV0dmFsdWUuXG5cbiAgICAgIHZhciByZXN1bHRzTXNnID0gcmVzdWx0c0FyaWFNZXNzYWdlKHtcbiAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyU3RhdHVzKHtcbiAgICAgICAgICBjb3VudDogdGhpcy5jb3VudE9wdGlvbnMoKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9jdXNlZFZhbHVlTXNnLCBcIiBcIikuY29uY2F0KGZvY3VzZWRPcHRpb25Nc2csIFwiIFwiKS5jb25jYXQocmVzdWx0c01zZywgXCIgXCIpLmNvbmNhdChhcmlhTGl2ZUNvbnRleHQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJJbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJJbnB1dCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0Rpc2FibGVkID0gX3RoaXMkcHJvcHMxNC5pc0Rpc2FibGVkLFxuICAgICAgICAgIGlzU2VhcmNoYWJsZSA9IF90aGlzJHByb3BzMTQuaXNTZWFyY2hhYmxlLFxuICAgICAgICAgIGlucHV0SWQgPSBfdGhpcyRwcm9wczE0LmlucHV0SWQsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTQuaW5wdXRWYWx1ZSxcbiAgICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzMTQudGFiSW5kZXg7XG4gICAgICB2YXIgSW5wdXQgPSB0aGlzLmNvbXBvbmVudHMuSW5wdXQ7XG4gICAgICB2YXIgaW5wdXRJc0hpZGRlbiA9IHRoaXMuc3RhdGUuaW5wdXRJc0hpZGRlbjtcbiAgICAgIHZhciBpZCA9IGlucHV0SWQgfHwgdGhpcy5nZXRFbGVtZW50SWQoJ2lucHV0Jyk7XG5cbiAgICAgIGlmICghaXNTZWFyY2hhYmxlKSB7XG4gICAgICAgIC8vIHVzZSBhIGR1bW15IGlucHV0IHRvIG1haW50YWluIGZvY3VzL2JsdXIgZnVuY3Rpb25hbGl0eVxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEdW1teUlucHV0LCB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIGlubmVyUmVmOiB0aGlzLmdldElucHV0UmVmLFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5vbklucHV0Qmx1cixcbiAgICAgICAgICBvbkNoYW5nZTogbm9vcCxcbiAgICAgICAgICBvbkZvY3VzOiB0aGlzLm9uSW5wdXRGb2N1cyxcbiAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGFyaWEgYXR0cmlidXRlcyBtYWtlcyB0aGUgSlNYIFwibm9pc3lcIiwgc2VwYXJhdGVkIGZvciBjbGFyaXR5XG5cblxuICAgICAgdmFyIGFyaWFBdHRyaWJ1dGVzID0ge1xuICAgICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiAnbGlzdCcsXG4gICAgICAgICdhcmlhLWxhYmVsJzogdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy5wcm9wc1snYXJpYS1sYWJlbGxlZGJ5J11cbiAgICAgIH07XG4gICAgICB2YXIgX3RoaXMkY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzLFxuICAgICAgICAgIGN4ID0gX3RoaXMkY29tbW9uUHJvcHMuY3gsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRjb21tb25Qcm9wcy50aGVtZSxcbiAgICAgICAgICBzZWxlY3RQcm9wcyA9IF90aGlzJGNvbW1vblByb3BzLnNlbGVjdFByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgICAgYXV0b0NhcGl0YWxpemU6IFwibm9uZVwiLFxuICAgICAgICBhdXRvQ29tcGxldGU6IFwib2ZmXCIsXG4gICAgICAgIGF1dG9Db3JyZWN0OiBcIm9mZlwiLFxuICAgICAgICBjeDogY3gsXG4gICAgICAgIGdldFN0eWxlczogdGhpcy5nZXRTdHlsZXMsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuZ2V0SW5wdXRSZWYsXG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIGlzSGlkZGVuOiBpbnB1dElzSGlkZGVuLFxuICAgICAgICBvbkJsdXI6IHRoaXMub25JbnB1dEJsdXIsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLm9uSW5wdXRGb2N1cyxcbiAgICAgICAgc2VsZWN0UHJvcHM6IHNlbGVjdFByb3BzLFxuICAgICAgICBzcGVsbENoZWNrOiBcImZhbHNlXCIsXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgdmFsdWU6IGlucHV0VmFsdWVcbiAgICAgIH0sIGFyaWFBdHRyaWJ1dGVzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQbGFjZWhvbGRlck9yVmFsdWUoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgICAgTXVsdGlWYWx1ZSA9IF90aGlzJGNvbXBvbmVudHMuTXVsdGlWYWx1ZSxcbiAgICAgICAgICBNdWx0aVZhbHVlQ29udGFpbmVyID0gX3RoaXMkY29tcG9uZW50cy5NdWx0aVZhbHVlQ29udGFpbmVyLFxuICAgICAgICAgIE11bHRpVmFsdWVMYWJlbCA9IF90aGlzJGNvbXBvbmVudHMuTXVsdGlWYWx1ZUxhYmVsLFxuICAgICAgICAgIE11bHRpVmFsdWVSZW1vdmUgPSBfdGhpcyRjb21wb25lbnRzLk11bHRpVmFsdWVSZW1vdmUsXG4gICAgICAgICAgU2luZ2xlVmFsdWUgPSBfdGhpcyRjb21wb25lbnRzLlNpbmdsZVZhbHVlLFxuICAgICAgICAgIFBsYWNlaG9sZGVyID0gX3RoaXMkY29tcG9uZW50cy5QbGFjZWhvbGRlcjtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udHJvbFNob3VsZFJlbmRlclZhbHVlID0gX3RoaXMkcHJvcHMxNS5jb250cm9sU2hvdWxkUmVuZGVyVmFsdWUsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTUuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMxNS5pc011bHRpLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRwcm9wczE1LmlucHV0VmFsdWUsXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRwcm9wczE1LnBsYWNlaG9sZGVyO1xuICAgICAgdmFyIF90aGlzJHN0YXRlOCA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBfdGhpcyRzdGF0ZTguc2VsZWN0VmFsdWUsXG4gICAgICAgICAgZm9jdXNlZFZhbHVlID0gX3RoaXMkc3RhdGU4LmZvY3VzZWRWYWx1ZSxcbiAgICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRzdGF0ZTguaXNGb2N1c2VkO1xuXG4gICAgICBpZiAoIXRoaXMuaGFzVmFsdWUoKSB8fCAhY29udHJvbFNob3VsZFJlbmRlclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dFZhbHVlID8gbnVsbCA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGxhY2Vob2xkZXIsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICAgIGtleTogXCJwbGFjZWhvbGRlclwiLFxuICAgICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgICAgfSksIHBsYWNlaG9sZGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlcyA9IHNlbGVjdFZhbHVlLm1hcChmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgICAgdmFyIGlzRm9jdXNlZCA9IG9wdCA9PT0gZm9jdXNlZFZhbHVlO1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE11bHRpVmFsdWUsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgICBDb250YWluZXI6IE11bHRpVmFsdWVDb250YWluZXIsXG4gICAgICAgICAgICAgIExhYmVsOiBNdWx0aVZhbHVlTGFiZWwsXG4gICAgICAgICAgICAgIFJlbW92ZTogTXVsdGlWYWx1ZVJlbW92ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGtleTogX3RoaXM0LmdldE9wdGlvblZhbHVlKG9wdCksXG4gICAgICAgICAgICByZW1vdmVQcm9wczoge1xuICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQucmVtb3ZlVmFsdWUob3B0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LnJlbW92ZVZhbHVlKG9wdCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhOiBvcHRcbiAgICAgICAgICB9KSwgX3RoaXM0LmZvcm1hdE9wdGlvbkxhYmVsKG9wdCwgJ3ZhbHVlJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlcztcbiAgICAgIH1cblxuICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaW5nbGVWYWx1ZSA9IHNlbGVjdFZhbHVlWzBdO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2luZ2xlVmFsdWUsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBkYXRhOiBzaW5nbGVWYWx1ZSxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZFxuICAgICAgfSksIHRoaXMuZm9ybWF0T3B0aW9uTGFiZWwoc2luZ2xlVmFsdWUsICd2YWx1ZScpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyQ2xlYXJJbmRpY2F0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2xlYXJJbmRpY2F0b3IoKSB7XG4gICAgICB2YXIgQ2xlYXJJbmRpY2F0b3IgPSB0aGlzLmNvbXBvbmVudHMuQ2xlYXJJbmRpY2F0b3I7XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIF90aGlzJHByb3BzMTYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzRGlzYWJsZWQgPSBfdGhpcyRwcm9wczE2LmlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNMb2FkaW5nID0gX3RoaXMkcHJvcHMxNi5pc0xvYWRpbmc7XG4gICAgICB2YXIgaXNGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQ7XG5cbiAgICAgIGlmICghdGhpcy5pc0NsZWFyYWJsZSgpIHx8ICFDbGVhckluZGljYXRvciB8fCBpc0Rpc2FibGVkIHx8ICF0aGlzLmhhc1ZhbHVlKCkgfHwgaXNMb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5uZXJQcm9wcyA9IHtcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMub25DbGVhckluZGljYXRvck1vdXNlRG93bixcbiAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5vbkNsZWFySW5kaWNhdG9yVG91Y2hFbmQsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENsZWFySW5kaWNhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaW5uZXJQcm9wczogaW5uZXJQcm9wcyxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTG9hZGluZ0luZGljYXRvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJMb2FkaW5nSW5kaWNhdG9yKCkge1xuICAgICAgdmFyIExvYWRpbmdJbmRpY2F0b3IgPSB0aGlzLmNvbXBvbmVudHMuTG9hZGluZ0luZGljYXRvcjtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTcuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRwcm9wczE3LmlzTG9hZGluZztcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcbiAgICAgIGlmICghTG9hZGluZ0luZGljYXRvciB8fCAhaXNMb2FkaW5nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBpbm5lclByb3BzID0ge1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nSW5kaWNhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaW5uZXJQcm9wczogaW5uZXJQcm9wcyxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVySW5kaWNhdG9yU2VwYXJhdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckluZGljYXRvclNlcGFyYXRvcigpIHtcbiAgICAgIHZhciBfdGhpcyRjb21wb25lbnRzMiA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBEcm9wZG93bkluZGljYXRvciA9IF90aGlzJGNvbXBvbmVudHMyLkRyb3Bkb3duSW5kaWNhdG9yLFxuICAgICAgICAgIEluZGljYXRvclNlcGFyYXRvciA9IF90aGlzJGNvbXBvbmVudHMyLkluZGljYXRvclNlcGFyYXRvcjsgLy8gc2VwYXJhdG9yIGRvZXNuJ3QgbWFrZSBzZW5zZSB3aXRob3V0IHRoZSBkcm9wZG93biBpbmRpY2F0b3JcblxuICAgICAgaWYgKCFEcm9wZG93bkluZGljYXRvciB8fCAhSW5kaWNhdG9yU2VwYXJhdG9yKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBjb21tb25Qcm9wcyA9IHRoaXMuY29tbW9uUHJvcHM7XG4gICAgICB2YXIgaXNEaXNhYmxlZCA9IHRoaXMucHJvcHMuaXNEaXNhYmxlZDtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRm9jdXNlZDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEluZGljYXRvclNlcGFyYXRvciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckRyb3Bkb3duSW5kaWNhdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRyb3Bkb3duSW5kaWNhdG9yKCkge1xuICAgICAgdmFyIERyb3Bkb3duSW5kaWNhdG9yID0gdGhpcy5jb21wb25lbnRzLkRyb3Bkb3duSW5kaWNhdG9yO1xuICAgICAgaWYgKCFEcm9wZG93bkluZGljYXRvcikgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgY29tbW9uUHJvcHMgPSB0aGlzLmNvbW1vblByb3BzO1xuICAgICAgdmFyIGlzRGlzYWJsZWQgPSB0aGlzLnByb3BzLmlzRGlzYWJsZWQ7XG4gICAgICB2YXIgaXNGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0ZvY3VzZWQ7XG4gICAgICB2YXIgaW5uZXJQcm9wcyA9IHtcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMub25Ecm9wZG93bkluZGljYXRvck1vdXNlRG93bixcbiAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5vbkRyb3Bkb3duSW5kaWNhdG9yVG91Y2hFbmQsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duSW5kaWNhdG9yLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaW5uZXJQcm9wczogaW5uZXJQcm9wcyxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTWVudVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNZW51KCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRjb21wb25lbnRzMyA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBHcm91cCA9IF90aGlzJGNvbXBvbmVudHMzLkdyb3VwLFxuICAgICAgICAgIEdyb3VwSGVhZGluZyA9IF90aGlzJGNvbXBvbmVudHMzLkdyb3VwSGVhZGluZyxcbiAgICAgICAgICBNZW51JCQxID0gX3RoaXMkY29tcG9uZW50czMuTWVudSxcbiAgICAgICAgICBNZW51TGlzdCQkMSA9IF90aGlzJGNvbXBvbmVudHMzLk1lbnVMaXN0LFxuICAgICAgICAgIE1lbnVQb3J0YWwkJDEgPSBfdGhpcyRjb21wb25lbnRzMy5NZW51UG9ydGFsLFxuICAgICAgICAgIExvYWRpbmdNZXNzYWdlJCQxID0gX3RoaXMkY29tcG9uZW50czMuTG9hZGluZ01lc3NhZ2UsXG4gICAgICAgICAgTm9PcHRpb25zTWVzc2FnZSQkMSA9IF90aGlzJGNvbXBvbmVudHMzLk5vT3B0aW9uc01lc3NhZ2UsXG4gICAgICAgICAgT3B0aW9uID0gX3RoaXMkY29tcG9uZW50czMuT3B0aW9uO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcztcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTkgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWRPcHRpb24gPSBfdGhpcyRzdGF0ZTkuZm9jdXNlZE9wdGlvbixcbiAgICAgICAgICBtZW51T3B0aW9ucyA9IF90aGlzJHN0YXRlOS5tZW51T3B0aW9ucztcbiAgICAgIHZhciBfdGhpcyRwcm9wczE4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYXB0dXJlTWVudVNjcm9sbCA9IF90aGlzJHByb3BzMTguY2FwdHVyZU1lbnVTY3JvbGwsXG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMTguaW5wdXRWYWx1ZSxcbiAgICAgICAgICBpc0xvYWRpbmcgPSBfdGhpcyRwcm9wczE4LmlzTG9hZGluZyxcbiAgICAgICAgICBsb2FkaW5nTWVzc2FnZSA9IF90aGlzJHByb3BzMTgubG9hZGluZ01lc3NhZ2UsXG4gICAgICAgICAgbWluTWVudUhlaWdodCA9IF90aGlzJHByb3BzMTgubWluTWVudUhlaWdodCxcbiAgICAgICAgICBtYXhNZW51SGVpZ2h0ID0gX3RoaXMkcHJvcHMxOC5tYXhNZW51SGVpZ2h0LFxuICAgICAgICAgIG1lbnVJc09wZW4gPSBfdGhpcyRwcm9wczE4Lm1lbnVJc09wZW4sXG4gICAgICAgICAgbWVudVBsYWNlbWVudCA9IF90aGlzJHByb3BzMTgubWVudVBsYWNlbWVudCxcbiAgICAgICAgICBtZW51UG9zaXRpb24gPSBfdGhpcyRwcm9wczE4Lm1lbnVQb3NpdGlvbixcbiAgICAgICAgICBtZW51UG9ydGFsVGFyZ2V0ID0gX3RoaXMkcHJvcHMxOC5tZW51UG9ydGFsVGFyZ2V0LFxuICAgICAgICAgIG1lbnVTaG91bGRCbG9ja1Njcm9sbCA9IF90aGlzJHByb3BzMTgubWVudVNob3VsZEJsb2NrU2Nyb2xsLFxuICAgICAgICAgIG1lbnVTaG91bGRTY3JvbGxJbnRvVmlldyA9IF90aGlzJHByb3BzMTgubWVudVNob3VsZFNjcm9sbEludG9WaWV3LFxuICAgICAgICAgIG5vT3B0aW9uc01lc3NhZ2UgPSBfdGhpcyRwcm9wczE4Lm5vT3B0aW9uc01lc3NhZ2UsXG4gICAgICAgICAgb25NZW51U2Nyb2xsVG9Ub3AgPSBfdGhpcyRwcm9wczE4Lm9uTWVudVNjcm9sbFRvVG9wLFxuICAgICAgICAgIG9uTWVudVNjcm9sbFRvQm90dG9tID0gX3RoaXMkcHJvcHMxOC5vbk1lbnVTY3JvbGxUb0JvdHRvbTtcbiAgICAgIGlmICghbWVudUlzT3BlbikgcmV0dXJuIG51bGw7IC8vIFRPRE86IEludGVybmFsIE9wdGlvbiBUeXBlIGhlcmVcblxuICAgICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcykge1xuICAgICAgICAvLyBmb3IgcGVyZm9ybWFuY2UsIHRoZSBtZW51IG9wdGlvbnMgaW4gc3RhdGUgYXJlbid0IGNoYW5nZWQgd2hlbiB0aGVcbiAgICAgICAgLy8gZm9jdXNlZCBvcHRpb24gY2hhbmdlcyBzbyB3ZSBjYWxjdWxhdGUgYWRkaXRpb25hbCBwcm9wcyBiYXNlZCBvbiB0aGF0XG4gICAgICAgIHZhciBpc0ZvY3VzZWQgPSBmb2N1c2VkT3B0aW9uID09PSBwcm9wcy5kYXRhO1xuICAgICAgICBwcm9wcy5pbm5lclJlZiA9IGlzRm9jdXNlZCA/IF90aGlzNS5nZXRGb2N1c2VkT3B0aW9uUmVmIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChPcHRpb24sIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywgcHJvcHMsIHtcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZFxuICAgICAgICB9KSwgX3RoaXM1LmZvcm1hdE9wdGlvbkxhYmVsKHByb3BzLmRhdGEsICdtZW51JykpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1lbnVVSTtcblxuICAgICAgaWYgKHRoaXMuaGFzT3B0aW9ucygpKSB7XG4gICAgICAgIG1lbnVVSSA9IG1lbnVPcHRpb25zLnJlbmRlci5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGl0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICBncm91cCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhpdGVtLCBbXCJ0eXBlXCJdKTtcblxuICAgICAgICAgICAgdmFyIGhlYWRpbmdJZCA9IFwiXCIuY29uY2F0KGl0ZW0ua2V5LCBcIi1oZWFkaW5nXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JvdXAsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywgZ3JvdXAsIHtcbiAgICAgICAgICAgICAgSGVhZGluZzogR3JvdXBIZWFkaW5nLFxuICAgICAgICAgICAgICBoZWFkaW5nUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBpZDogaGVhZGluZ0lkXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiBfdGhpczUuZm9ybWF0R3JvdXBMYWJlbChpdGVtLmRhdGEpXG4gICAgICAgICAgICB9KSwgaXRlbS5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZW5kZXIob3B0aW9uKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ29wdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXIoaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNMb2FkaW5nKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gbG9hZGluZ01lc3NhZ2Uoe1xuICAgICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbWVudVVJID0gUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nTWVzc2FnZSQkMSwgY29tbW9uUHJvcHMsIG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9tZXNzYWdlID0gbm9PcHRpb25zTWVzc2FnZSh7XG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoX21lc3NhZ2UgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBtZW51VUkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KE5vT3B0aW9uc01lc3NhZ2UkJDEsIGNvbW1vblByb3BzLCBfbWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtZW51UGxhY2VtZW50UHJvcHMgPSB7XG4gICAgICAgIG1pbk1lbnVIZWlnaHQ6IG1pbk1lbnVIZWlnaHQsXG4gICAgICAgIG1heE1lbnVIZWlnaHQ6IG1heE1lbnVIZWlnaHQsXG4gICAgICAgIG1lbnVQbGFjZW1lbnQ6IG1lbnVQbGFjZW1lbnQsXG4gICAgICAgIG1lbnVQb3NpdGlvbjogbWVudVBvc2l0aW9uLFxuICAgICAgICBtZW51U2hvdWxkU2Nyb2xsSW50b1ZpZXc6IG1lbnVTaG91bGRTY3JvbGxJbnRvVmlld1xuICAgICAgfTtcbiAgICAgIHZhciBtZW51RWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudVBsYWNlciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCBtZW51UGxhY2VtZW50UHJvcHMpLCBmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgICAgdmFyIHJlZiA9IF9yZWY2LnJlZixcbiAgICAgICAgICAgIF9yZWY2JHBsYWNlclByb3BzID0gX3JlZjYucGxhY2VyUHJvcHMsXG4gICAgICAgICAgICBwbGFjZW1lbnQgPSBfcmVmNiRwbGFjZXJQcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBfcmVmNiRwbGFjZXJQcm9wcy5tYXhIZWlnaHQ7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUkJDEsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywgbWVudVBsYWNlbWVudFByb3BzLCB7XG4gICAgICAgICAgaW5uZXJSZWY6IHJlZixcbiAgICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgICBvbk1vdXNlRG93bjogX3RoaXM1Lm9uTWVudU1vdXNlRG93bixcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBfdGhpczUub25NZW51TW91c2VNb3ZlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZyxcbiAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxDYXB0b3JTd2l0Y2gsIHtcbiAgICAgICAgICBpc0VuYWJsZWQ6IGNhcHR1cmVNZW51U2Nyb2xsLFxuICAgICAgICAgIG9uVG9wQXJyaXZlOiBvbk1lbnVTY3JvbGxUb1RvcCxcbiAgICAgICAgICBvbkJvdHRvbUFycml2ZTogb25NZW51U2Nyb2xsVG9Cb3R0b21cbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxCbG9jaywge1xuICAgICAgICAgIGlzRW5hYmxlZDogbWVudVNob3VsZEJsb2NrU2Nyb2xsXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudUxpc3QkJDEsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICAgIGlubmVyUmVmOiBfdGhpczUuZ2V0TWVudUxpc3RSZWYsXG4gICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHRcbiAgICAgICAgfSksIG1lbnVVSSkpKSk7XG4gICAgICB9KTsgLy8gcG9zaXRpb25pbmcgYmVoYXZpb3VyIGlzIGFsbW9zdCBpZGVudGljYWwgZm9yIHBvcnRhbGxlZCBhbmQgZml4ZWQsXG4gICAgICAvLyBzbyB3ZSB1c2UgdGhlIHNhbWUgY29tcG9uZW50LiB0aGUgYWN0dWFsIHBvcnRhbGxpbmcgbG9naWMgaXMgZm9ya2VkXG4gICAgICAvLyB3aXRoaW4gdGhlIGNvbXBvbmVudCBiYXNlZCBvbiBgbWVudVBvc2l0aW9uYFxuXG4gICAgICByZXR1cm4gbWVudVBvcnRhbFRhcmdldCB8fCBtZW51UG9zaXRpb24gPT09ICdmaXhlZCcgPyBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVQb3J0YWwkJDEsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBhcHBlbmRUbzogbWVudVBvcnRhbFRhcmdldCxcbiAgICAgICAgY29udHJvbEVsZW1lbnQ6IHRoaXMuY29udHJvbFJlZixcbiAgICAgICAgbWVudVBsYWNlbWVudDogbWVudVBsYWNlbWVudCxcbiAgICAgICAgbWVudVBvc2l0aW9uOiBtZW51UG9zaXRpb25cbiAgICAgIH0pLCBtZW51RWxlbWVudCkgOiBtZW51RWxlbWVudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRm9ybUZpZWxkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckZvcm1GaWVsZCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMxOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGVsaW1pdGVyID0gX3RoaXMkcHJvcHMxOS5kZWxpbWl0ZXIsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMTkuaXNEaXNhYmxlZCxcbiAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMxOS5pc011bHRpLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczE5Lm5hbWU7XG4gICAgICB2YXIgc2VsZWN0VmFsdWUgPSB0aGlzLnN0YXRlLnNlbGVjdFZhbHVlO1xuICAgICAgaWYgKCFuYW1lIHx8IGlzRGlzYWJsZWQpIHJldHVybjtcblxuICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgaWYgKGRlbGltaXRlcikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHNlbGVjdFZhbHVlLm1hcChmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM2LmdldE9wdGlvblZhbHVlKG9wdCk7XG4gICAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBzZWxlY3RWYWx1ZS5sZW5ndGggPiAwID8gc2VsZWN0VmFsdWUubWFwKGZ1bmN0aW9uIChvcHQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBrZXk6IFwiaS1cIi5jb25jYXQoaSksXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdGhpczYuZ2V0T3B0aW9uVmFsdWUob3B0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHR5cGU6IFwiaGlkZGVuXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBzZWxlY3RWYWx1ZVswXSA/IHRoaXMuZ2V0T3B0aW9uVmFsdWUoc2VsZWN0VmFsdWVbMF0pIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICB0eXBlOiBcImhpZGRlblwiLFxuICAgICAgICAgIHZhbHVlOiBfdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckxpdmVSZWdpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGl2ZVJlZ2lvbigpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5pc0ZvY3VzZWQpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQTExeVRleHQsIHtcbiAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJhc3NlcnRpdmVcIlxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICBpZDogXCJhcmlhLXNlbGVjdGlvbi1ldmVudFwiXG4gICAgICB9LCBcIlxceEEwXCIsIHRoaXMuc3RhdGUuYXJpYUxpdmVTZWxlY3Rpb24pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgICAgIGlkOiBcImFyaWEtY29udGV4dFwiXG4gICAgICB9LCBcIlxceEEwXCIsIHRoaXMuY29uc3RydWN0QXJpYUxpdmVNZXNzYWdlKCkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRjb21wb25lbnRzNCA9IHRoaXMuY29tcG9uZW50cyxcbiAgICAgICAgICBDb250cm9sID0gX3RoaXMkY29tcG9uZW50czQuQ29udHJvbCxcbiAgICAgICAgICBJbmRpY2F0b3JzQ29udGFpbmVyID0gX3RoaXMkY29tcG9uZW50czQuSW5kaWNhdG9yc0NvbnRhaW5lcixcbiAgICAgICAgICBTZWxlY3RDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5TZWxlY3RDb250YWluZXIsXG4gICAgICAgICAgVmFsdWVDb250YWluZXIgPSBfdGhpcyRjb21wb25lbnRzNC5WYWx1ZUNvbnRhaW5lcjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIwLmNsYXNzTmFtZSxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzMjAuaWQsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzMjAuaXNEaXNhYmxlZCxcbiAgICAgICAgICBtZW51SXNPcGVuID0gX3RoaXMkcHJvcHMyMC5tZW51SXNPcGVuO1xuICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNGb2N1c2VkO1xuICAgICAgdmFyIGNvbW1vblByb3BzID0gdGhpcy5jb21tb25Qcm9wcyA9IHRoaXMuZ2V0Q29tbW9uUHJvcHMoKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdENvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBpbm5lclByb3BzOiB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd25cbiAgICAgICAgfSxcbiAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlckxpdmVSZWdpb24oKSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb250cm9sLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuZ2V0Q29udHJvbFJlZixcbiAgICAgICAgaW5uZXJQcm9wczoge1xuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uQ29udHJvbE1vdXNlRG93bixcbiAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uQ29udHJvbFRvdWNoRW5kXG4gICAgICAgIH0sXG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICBtZW51SXNPcGVuOiBtZW51SXNPcGVuXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChWYWx1ZUNvbnRhaW5lciwgX2V4dGVuZHMoe30sIGNvbW1vblByb3BzLCB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWRcbiAgICAgIH0pLCB0aGlzLnJlbmRlclBsYWNlaG9sZGVyT3JWYWx1ZSgpLCB0aGlzLnJlbmRlcklucHV0KCkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEluZGljYXRvcnNDb250YWluZXIsIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSwgdGhpcy5yZW5kZXJDbGVhckluZGljYXRvcigpLCB0aGlzLnJlbmRlckxvYWRpbmdJbmRpY2F0b3IoKSwgdGhpcy5yZW5kZXJJbmRpY2F0b3JTZXBhcmF0b3IoKSwgdGhpcy5yZW5kZXJEcm9wZG93bkluZGljYXRvcigpKSksIHRoaXMucmVuZGVyTWVudSgpLCB0aGlzLnJlbmRlckZvcm1GaWVsZCgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VsZWN0LCBcImRlZmF1bHRQcm9wc1wiLCBkZWZhdWx0UHJvcHMpO1xuXG52YXIgZGVmYXVsdFByb3BzJDEgPSB7XG4gIGRlZmF1bHRJbnB1dFZhbHVlOiAnJyxcbiAgZGVmYXVsdE1lbnVJc09wZW46IGZhbHNlLFxuICBkZWZhdWx0VmFsdWU6IG51bGxcbn07XG5cbnZhciBtYW5hZ2VTdGF0ZSA9IGZ1bmN0aW9uIG1hbmFnZVN0YXRlKFNlbGVjdENvbXBvbmVudCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFN0YXRlTWFuYWdlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTdGF0ZU1hbmFnZXIoKSB7XG4gICAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGVNYW5hZ2VyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU3RhdGVNYW5hZ2VyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInN0YXRlXCIsIHtcbiAgICAgICAgaW5wdXRWYWx1ZTogX3RoaXMucHJvcHMuaW5wdXRWYWx1ZSAhPT0gdW5kZWZpbmVkID8gX3RoaXMucHJvcHMuaW5wdXRWYWx1ZSA6IF90aGlzLnByb3BzLmRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgICBtZW51SXNPcGVuOiBfdGhpcy5wcm9wcy5tZW51SXNPcGVuICE9PSB1bmRlZmluZWQgPyBfdGhpcy5wcm9wcy5tZW51SXNPcGVuIDogX3RoaXMucHJvcHMuZGVmYXVsdE1lbnVJc09wZW4sXG4gICAgICAgIHZhbHVlOiBfdGhpcy5wcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gX3RoaXMucHJvcHMudmFsdWUgOiBfdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25DaGFuZ2VcIiwgZnVuY3Rpb24gKHZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIF90aGlzLmNhbGxQcm9wKCdvbkNoYW5nZScsIHZhbHVlLCBhY3Rpb25NZXRhKTtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvbklucHV0Q2hhbmdlXCIsIGZ1bmN0aW9uICh2YWx1ZSwgYWN0aW9uTWV0YSkge1xuICAgICAgICAvLyBUT0RPOiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIGFsbG93IHRoZSBwcm9wIHRvIHJldHVybiBhIG5ld1xuICAgICAgICAvLyB2YWx1ZSwgYnV0IG5vdyBpbnB1dFZhbHVlIGlzIGEgY29udHJvbGxhYmxlIHByb3Agd2UgcHJvYmFibHkgc2hvdWxkbid0XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IF90aGlzLmNhbGxQcm9wKCdvbklucHV0Q2hhbmdlJywgdmFsdWUsIGFjdGlvbk1ldGEpO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbnB1dFZhbHVlOiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbmV3VmFsdWUgOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwib25NZW51T3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmNhbGxQcm9wKCdvbk1lbnVPcGVuJyk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVJc09wZW46IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uTWVudUNsb3NlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2FsbFByb3AoJ29uTWVudUNsb3NlJyk7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVJc09wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3RhdGVNYW5hZ2VyLCBbe1xuICAgICAga2V5OiBcImZvY3VzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJsdXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgICB0aGlzLnNlbGVjdC5ibHVyKCk7XG4gICAgICB9IC8vIEZJWE1FOiB1bnR5cGVkIGZsb3cgY29kZSwgcmV0dXJuIGFueVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9wKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzLnByb3BzW2tleV0gOiB0aGlzLnN0YXRlW2tleV07XG4gICAgICB9IC8vIEZJWE1FOiB1bnR5cGVkIGZsb3cgY29kZSwgcmV0dXJuIGFueVxuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNhbGxQcm9wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2FsbFByb3AobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKF90aGlzJHByb3BzID0gdGhpcy5wcm9wcylbbmFtZV0uYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBkZWZhdWx0SW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzMi5kZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRNZW51SXNPcGVuID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRNZW51SXNPcGVuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gX3RoaXMkcHJvcHMyLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1wiZGVmYXVsdElucHV0VmFsdWVcIiwgXCJkZWZhdWx0TWVudUlzT3BlblwiLCBcImRlZmF1bHRWYWx1ZVwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICBfdGhpczIuc2VsZWN0ID0gX3JlZjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlucHV0VmFsdWU6IHRoaXMuZ2V0UHJvcCgnaW5wdXRWYWx1ZScpLFxuICAgICAgICAgIG1lbnVJc09wZW46IHRoaXMuZ2V0UHJvcCgnbWVudUlzT3BlbicpLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uSW5wdXRDaGFuZ2U6IHRoaXMub25JbnB1dENoYW5nZSxcbiAgICAgICAgICBvbk1lbnVDbG9zZTogdGhpcy5vbk1lbnVDbG9zZSxcbiAgICAgICAgICBvbk1lbnVPcGVuOiB0aGlzLm9uTWVudU9wZW4sXG4gICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0UHJvcCgndmFsdWUnKVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN0YXRlTWFuYWdlcjtcbiAgfShDb21wb25lbnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImRlZmF1bHRQcm9wc1wiLCBkZWZhdWx0UHJvcHMkMSksIF90ZW1wO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyQyID0ge1xuICBjYWNoZU9wdGlvbnM6IGZhbHNlLFxuICBkZWZhdWx0T3B0aW9uczogZmFsc2UsXG4gIGZpbHRlck9wdGlvbjogbnVsbFxufTtcbnZhciBtYWtlQXN5bmNTZWxlY3QgPSBmdW5jdGlvbiBtYWtlQXN5bmNTZWxlY3QoU2VsZWN0Q29tcG9uZW50KSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHJldHVybiBfdGVtcCA9IF9jbGFzcyA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQXN5bmMsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQXN5bmMocHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFzeW5jKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXN5bmMpLmNhbGwodGhpcykpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2VsZWN0XCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJsYXN0UmVxdWVzdFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwibW91bnRlZFwiLCBmYWxzZSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJvcHRpb25zQ2FjaGVcIiwge30pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlSW5wdXRDaGFuZ2VcIiwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBhY3Rpb25NZXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgY2FjaGVPcHRpb25zID0gX3RoaXMkcHJvcHMuY2FjaGVPcHRpb25zLFxuICAgICAgICAgICAgb25JbnB1dENoYW5nZSA9IF90aGlzJHByb3BzLm9uSW5wdXRDaGFuZ2U7IC8vIFRPRE9cblxuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IGhhbmRsZUlucHV0Q2hhbmdlKG5ld1ZhbHVlLCBhY3Rpb25NZXRhLCBvbklucHV0Q2hhbmdlKTtcblxuICAgICAgICBpZiAoIWlucHV0VmFsdWUpIHtcbiAgICAgICAgICBkZWxldGUgX3RoaXMubGFzdFJlcXVlc3Q7XG5cbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbnB1dFZhbHVlOiAnJyxcbiAgICAgICAgICAgIGxvYWRlZElucHV0VmFsdWU6ICcnLFxuICAgICAgICAgICAgbG9hZGVkT3B0aW9uczogW10sXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgcGFzc0VtcHR5T3B0aW9uczogZmFsc2VcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWNoZU9wdGlvbnMgJiYgX3RoaXMub3B0aW9uc0NhY2hlW2lucHV0VmFsdWVdKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGxvYWRlZElucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICBsb2FkZWRPcHRpb25zOiBfdGhpcy5vcHRpb25zQ2FjaGVbaW5wdXRWYWx1ZV0sXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgcGFzc0VtcHR5T3B0aW9uczogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IF90aGlzLmxhc3RSZXF1ZXN0ID0ge307XG5cbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgcGFzc0VtcHR5T3B0aW9uczogIV90aGlzLnN0YXRlLmxvYWRlZElucHV0VmFsdWVcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLm1vdW50ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIF90aGlzLm9wdGlvbnNDYWNoZVtpbnB1dFZhbHVlXSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocmVxdWVzdCAhPT0gX3RoaXMubGFzdFJlcXVlc3QpIHJldHVybjtcbiAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLmxhc3RSZXF1ZXN0O1xuXG4gICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRlZElucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICAgICAgbG9hZGVkT3B0aW9uczogb3B0aW9ucyB8fCBbXSxcbiAgICAgICAgICAgICAgICBwYXNzRW1wdHlPcHRpb25zOiBmYWxzZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBBcnJheS5pc0FycmF5KHByb3BzLmRlZmF1bHRPcHRpb25zKSA/IHByb3BzLmRlZmF1bHRPcHRpb25zIDogdW5kZWZpbmVkLFxuICAgICAgICBpbnB1dFZhbHVlOiB0eXBlb2YgcHJvcHMuaW5wdXRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9wcy5pbnB1dFZhbHVlIDogJycsXG4gICAgICAgIGlzTG9hZGluZzogcHJvcHMuZGVmYXVsdE9wdGlvbnMgPT09IHRydWUgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgIGxvYWRlZE9wdGlvbnM6IFtdLFxuICAgICAgICBwYXNzRW1wdHlPcHRpb25zOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQXN5bmMsIFt7XG4gICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRlZmF1bHRPcHRpb25zID0gdGhpcy5wcm9wcy5kZWZhdWx0T3B0aW9ucztcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSB0aGlzLnN0YXRlLmlucHV0VmFsdWU7XG5cbiAgICAgICAgaWYgKGRlZmF1bHRPcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5sb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFfdGhpczIubW91bnRlZCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGlzTG9hZGluZyA9ICEhX3RoaXMyLmxhc3RSZXF1ZXN0O1xuXG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9ucyB8fCBbXSxcbiAgICAgICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICAvLyBpZiB0aGUgY2FjaGVPcHRpb25zIHByb3AgY2hhbmdlcywgY2xlYXIgdGhlIGNhY2hlXG4gICAgICAgIGlmIChuZXh0UHJvcHMuY2FjaGVPcHRpb25zICE9PSB0aGlzLnByb3BzLmNhY2hlT3B0aW9ucykge1xuICAgICAgICAgIHRoaXMub3B0aW9uc0NhY2hlID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFByb3BzLmRlZmF1bHRPcHRpb25zICE9PSB0aGlzLnByb3BzLmRlZmF1bHRPcHRpb25zKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9uczogQXJyYXkuaXNBcnJheShuZXh0UHJvcHMuZGVmYXVsdE9wdGlvbnMpID8gbmV4dFByb3BzLmRlZmF1bHRPcHRpb25zIDogdW5kZWZpbmVkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZvY3VzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJsdXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgICB0aGlzLnNlbGVjdC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxvYWRPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGxvYWRPcHRpb25zID0gdGhpcy5wcm9wcy5sb2FkT3B0aW9ucztcbiAgICAgICAgaWYgKCFsb2FkT3B0aW9ucykgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIHZhciBsb2FkZXIgPSBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCBjYWxsYmFjayk7XG5cbiAgICAgICAgaWYgKGxvYWRlciAmJiB0eXBlb2YgbG9hZGVyLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBsb2FkZXIudGhlbihjYWxsYmFjaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGxvYWRPcHRpb25zID0gX3RoaXMkcHJvcHMyLmxvYWRPcHRpb25zLFxuICAgICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJsb2FkT3B0aW9uc1wiXSk7XG5cbiAgICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zID0gX3RoaXMkc3RhdGUuZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkc3RhdGUuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHN0YXRlLmlzTG9hZGluZyxcbiAgICAgICAgICAgIGxvYWRlZElucHV0VmFsdWUgPSBfdGhpcyRzdGF0ZS5sb2FkZWRJbnB1dFZhbHVlLFxuICAgICAgICAgICAgbG9hZGVkT3B0aW9ucyA9IF90aGlzJHN0YXRlLmxvYWRlZE9wdGlvbnMsXG4gICAgICAgICAgICBwYXNzRW1wdHlPcHRpb25zID0gX3RoaXMkc3RhdGUucGFzc0VtcHR5T3B0aW9ucztcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBwYXNzRW1wdHlPcHRpb25zID8gW10gOiBpbnB1dFZhbHVlICYmIGxvYWRlZElucHV0VmFsdWUgPyBsb2FkZWRPcHRpb25zIDogZGVmYXVsdE9wdGlvbnMgfHwgW107XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgX3RoaXMzLnNlbGVjdCA9IF9yZWY7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLFxuICAgICAgICAgIG9uSW5wdXRDaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBc3luYztcbiAgfShDb21wb25lbnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImRlZmF1bHRQcm9wc1wiLCBkZWZhdWx0UHJvcHMkMiksIF90ZW1wO1xufTtcbnZhciBTZWxlY3RTdGF0ZSA9IG1hbmFnZVN0YXRlKFNlbGVjdCk7XG52YXIgQXN5bmMgPSBtYWtlQXN5bmNTZWxlY3QoU2VsZWN0U3RhdGUpO1xuXG52YXIgY29tcGFyZU9wdGlvbiA9IGZ1bmN0aW9uIGNvbXBhcmVPcHRpb24oKSB7XG4gIHZhciBpbnB1dFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgY2FuZGlkYXRlID0gU3RyaW5nKGlucHV0VmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBvcHRpb25WYWx1ZSA9IFN0cmluZyhvcHRpb24udmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBvcHRpb25MYWJlbCA9IFN0cmluZyhvcHRpb24ubGFiZWwpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBvcHRpb25WYWx1ZSA9PT0gY2FuZGlkYXRlIHx8IG9wdGlvbkxhYmVsID09PSBjYW5kaWRhdGU7XG59O1xuXG52YXIgYnVpbHRpbnMgPSB7XG4gIGZvcm1hdENyZWF0ZUxhYmVsOiBmdW5jdGlvbiBmb3JtYXRDcmVhdGVMYWJlbChpbnB1dFZhbHVlKSB7XG4gICAgcmV0dXJuIFwiQ3JlYXRlIFxcXCJcIi5jb25jYXQoaW5wdXRWYWx1ZSwgXCJcXFwiXCIpO1xuICB9LFxuICBpc1ZhbGlkTmV3T3B0aW9uOiBmdW5jdGlvbiBpc1ZhbGlkTmV3T3B0aW9uKGlucHV0VmFsdWUsIHNlbGVjdFZhbHVlLCBzZWxlY3RPcHRpb25zKSB7XG4gICAgcmV0dXJuICEoIWlucHV0VmFsdWUgfHwgc2VsZWN0VmFsdWUuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICByZXR1cm4gY29tcGFyZU9wdGlvbihpbnB1dFZhbHVlLCBvcHRpb24pO1xuICAgIH0pIHx8IHNlbGVjdE9wdGlvbnMuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICByZXR1cm4gY29tcGFyZU9wdGlvbihpbnB1dFZhbHVlLCBvcHRpb24pO1xuICAgIH0pKTtcbiAgfSxcbiAgZ2V0TmV3T3B0aW9uRGF0YTogZnVuY3Rpb24gZ2V0TmV3T3B0aW9uRGF0YShpbnB1dFZhbHVlLCBvcHRpb25MYWJlbCkge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogb3B0aW9uTGFiZWwsXG4gICAgICB2YWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgIF9faXNOZXdfXzogdHJ1ZVxuICAgIH07XG4gIH1cbn07XG52YXIgZGVmYXVsdFByb3BzJDMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgYWxsb3dDcmVhdGVXaGlsZUxvYWRpbmc6IGZhbHNlLFxuICBjcmVhdGVPcHRpb25Qb3NpdGlvbjogJ2xhc3QnXG59LCBidWlsdGlucyk7XG52YXIgbWFrZUNyZWF0YWJsZVNlbGVjdCA9IGZ1bmN0aW9uIG1ha2VDcmVhdGFibGVTZWxlY3QoU2VsZWN0Q29tcG9uZW50KSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHJldHVybiBfdGVtcCA9IF9jbGFzcyA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ3JlYXRhYmxlLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIENyZWF0YWJsZShwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3JlYXRhYmxlKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ3JlYXRhYmxlKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZWxlY3RcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcIm9uQ2hhbmdlXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgYWN0aW9uTWV0YSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGdldE5ld09wdGlvbkRhdGEgPSBfdGhpcyRwcm9wcy5nZXROZXdPcHRpb25EYXRhLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IF90aGlzJHByb3BzLmlucHV0VmFsdWUsXG4gICAgICAgICAgICBpc011bHRpID0gX3RoaXMkcHJvcHMuaXNNdWx0aSxcbiAgICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgICBvbkNyZWF0ZU9wdGlvbiA9IF90aGlzJHByb3BzLm9uQ3JlYXRlT3B0aW9uLFxuICAgICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZTtcblxuICAgICAgICBpZiAoYWN0aW9uTWV0YS5hY3Rpb24gIT09ICdzZWxlY3Qtb3B0aW9uJykge1xuICAgICAgICAgIHJldHVybiBvbkNoYW5nZShuZXdWYWx1ZSwgYWN0aW9uTWV0YSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3T3B0aW9uID0gX3RoaXMuc3RhdGUubmV3T3B0aW9uO1xuICAgICAgICB2YXIgdmFsdWVBcnJheSA9IEFycmF5LmlzQXJyYXkobmV3VmFsdWUpID8gbmV3VmFsdWUgOiBbbmV3VmFsdWVdO1xuXG4gICAgICAgIGlmICh2YWx1ZUFycmF5W3ZhbHVlQXJyYXkubGVuZ3RoIC0gMV0gPT09IG5ld09wdGlvbikge1xuICAgICAgICAgIGlmIChvbkNyZWF0ZU9wdGlvbikgb25DcmVhdGVPcHRpb24oaW5wdXRWYWx1ZSk7ZWxzZSB7XG4gICAgICAgICAgICB2YXIgbmV3T3B0aW9uRGF0YSA9IGdldE5ld09wdGlvbkRhdGEoaW5wdXRWYWx1ZSwgaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgbmV3QWN0aW9uTWV0YSA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiAnY3JlYXRlLW9wdGlvbidcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChpc011bHRpKSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2xlYW5WYWx1ZSh2YWx1ZSkpLCBbbmV3T3B0aW9uRGF0YV0pLCBuZXdBY3Rpb25NZXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlKG5ld09wdGlvbkRhdGEsIG5ld0FjdGlvbk1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvbkNoYW5nZShuZXdWYWx1ZSwgYWN0aW9uTWV0YSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zIHx8IFtdO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIG5ld09wdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDcmVhdGFibGUsIFt7XG4gICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBhbGxvd0NyZWF0ZVdoaWxlTG9hZGluZyA9IG5leHRQcm9wcy5hbGxvd0NyZWF0ZVdoaWxlTG9hZGluZyxcbiAgICAgICAgICAgIGNyZWF0ZU9wdGlvblBvc2l0aW9uID0gbmV4dFByb3BzLmNyZWF0ZU9wdGlvblBvc2l0aW9uLFxuICAgICAgICAgICAgZm9ybWF0Q3JlYXRlTGFiZWwgPSBuZXh0UHJvcHMuZm9ybWF0Q3JlYXRlTGFiZWwsXG4gICAgICAgICAgICBnZXROZXdPcHRpb25EYXRhID0gbmV4dFByb3BzLmdldE5ld09wdGlvbkRhdGEsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gbmV4dFByb3BzLmlucHV0VmFsdWUsXG4gICAgICAgICAgICBpc0xvYWRpbmcgPSBuZXh0UHJvcHMuaXNMb2FkaW5nLFxuICAgICAgICAgICAgaXNWYWxpZE5ld09wdGlvbiA9IG5leHRQcm9wcy5pc1ZhbGlkTmV3T3B0aW9uLFxuICAgICAgICAgICAgdmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBvcHRpb25zID0gbmV4dFByb3BzLm9wdGlvbnMgfHwgW107XG4gICAgICAgIHZhciBuZXdPcHRpb24gPSB0aGlzLnN0YXRlLm5ld09wdGlvbjtcblxuICAgICAgICBpZiAoaXNWYWxpZE5ld09wdGlvbihpbnB1dFZhbHVlLCBjbGVhblZhbHVlKHZhbHVlKSwgb3B0aW9ucykpIHtcbiAgICAgICAgICBuZXdPcHRpb24gPSBnZXROZXdPcHRpb25EYXRhKGlucHV0VmFsdWUsIGZvcm1hdENyZWF0ZUxhYmVsKGlucHV0VmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBuZXdPcHRpb246IG5ld09wdGlvbixcbiAgICAgICAgICBvcHRpb25zOiAoYWxsb3dDcmVhdGVXaGlsZUxvYWRpbmcgfHwgIWlzTG9hZGluZykgJiYgbmV3T3B0aW9uID8gY3JlYXRlT3B0aW9uUG9zaXRpb24gPT09ICdmaXJzdCcgPyBbbmV3T3B0aW9uXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9wdGlvbnMpKSA6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob3B0aW9ucyksIFtuZXdPcHRpb25dKSA6IG9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZvY3VzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJsdXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgICB0aGlzLnNlbGVjdC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5zdGF0ZS5vcHRpb25zO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZWxlY3QgPSBfcmVmO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENyZWF0YWJsZTtcbiAgfShDb21wb25lbnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImRlZmF1bHRQcm9wc1wiLCBkZWZhdWx0UHJvcHMkMyksIF90ZW1wO1xufTsgLy8gVE9ETzogZG8gdGhpcyBpbiBwYWNrYWdlIGVudHJ5cG9pbnRcblxudmFyIFNlbGVjdENyZWF0YWJsZSA9IG1ha2VDcmVhdGFibGVTZWxlY3QoU2VsZWN0KTtcbnZhciBDcmVhdGFibGUgPSBtYW5hZ2VTdGF0ZShTZWxlY3RDcmVhdGFibGUpO1xuXG52YXIgU2VsZWN0Q3JlYXRhYmxlJDEgPSBtYWtlQ3JlYXRhYmxlU2VsZWN0KFNlbGVjdCk7XG52YXIgU2VsZWN0Q3JlYXRhYmxlU3RhdGUgPSBtYW5hZ2VTdGF0ZShTZWxlY3RDcmVhdGFibGUkMSk7XG52YXIgQXN5bmNDcmVhdGFibGUgPSBtYWtlQXN5bmNTZWxlY3QoU2VsZWN0Q3JlYXRhYmxlU3RhdGUpO1xuXG4vLyBzdHJpcCB0cmFuc2l0aW9uIHByb3BzIG9mZiBiZWZvcmUgc3ByZWFkaW5nIG9udG8gc2VsZWN0IGNvbXBvbmVudFxuLy8gbm90ZSB3ZSBuZWVkIHRvIGJlIGV4cGxpY2l0IGFib3V0IGlubmVyUmVmIGZvciBmbG93XG52YXIgQW5pbWF0ZWRJbnB1dCA9IGZ1bmN0aW9uIEFuaW1hdGVkSW5wdXQoV3JhcHBlZENvbXBvbmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgaW5Qcm9wID0gX3JlZi5pbixcbiAgICAgICAgb25FeGl0ZWQgPSBfcmVmLm9uRXhpdGVkLFxuICAgICAgICBhcHBlYXIgPSBfcmVmLmFwcGVhcixcbiAgICAgICAgZW50ZXIgPSBfcmVmLmVudGVyLFxuICAgICAgICBleGl0ID0gX3JlZi5leGl0LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJpblwiLCBcIm9uRXhpdGVkXCIsIFwiYXBwZWFyXCIsIFwiZW50ZXJcIiwgXCJleGl0XCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHByb3BzKTtcbiAgfTtcbn07XG5cbnZhciBGYWRlID0gZnVuY3Rpb24gRmFkZShfcmVmKSB7XG4gIHZhciBUYWcgPSBfcmVmLmNvbXBvbmVudCxcbiAgICAgIF9yZWYkZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb24gPSBfcmVmJGR1cmF0aW9uID09PSB2b2lkIDAgPyAxIDogX3JlZiRkdXJhdGlvbixcbiAgICAgIGluUHJvcCA9IF9yZWYuaW4sXG4gICAgICBvbkV4aXRlZCA9IF9yZWYub25FeGl0ZWQsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJjb21wb25lbnRcIiwgXCJkdXJhdGlvblwiLCBcImluXCIsIFwib25FeGl0ZWRcIl0pO1xuXG4gIHZhciB0cmFuc2l0aW9uID0ge1xuICAgIGVudGVyaW5nOiB7XG4gICAgICBvcGFjaXR5OiAwXG4gICAgfSxcbiAgICBlbnRlcmVkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IFwiLmNvbmNhdChkdXJhdGlvbiwgXCJtc1wiKVxuICAgIH0sXG4gICAgZXhpdGluZzoge1xuICAgICAgb3BhY2l0eTogMFxuICAgIH0sXG4gICAgZXhpdGVkOiB7XG4gICAgICBvcGFjaXR5OiAwXG4gICAgfVxuICB9O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgbW91bnRPbkVudGVyOiB0cnVlLFxuICAgIHVubW91bnRPbkV4aXQ6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiBkdXJhdGlvblxuICB9LCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgaW5uZXJQcm9wcyA9IHtcbiAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCB0cmFuc2l0aW9uW3N0YXRlXSlcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe1xuICAgICAgaW5uZXJQcm9wczogaW5uZXJQcm9wc1xuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDb2xsYXBzZSBUcmFuc2l0aW9uXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGNvbGxhcHNlRHVyYXRpb24gPSAyNjA7XG4vLyB3cmFwIGVhY2ggTXVsdGlWYWx1ZSB3aXRoIGEgY29sbGFwc2UgdHJhbnNpdGlvbjsgZGVjcmVhc2VzIHdpZHRoIHVudGlsXG4vLyBmaW5hbGx5IHJlbW92aW5nIGZyb20gRE9NXG52YXIgQ29sbGFwc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbGxhcHNlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb2xsYXBzZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsYXBzZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihDb2xsYXBzZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImR1cmF0aW9uXCIsIGNvbGxhcHNlRHVyYXRpb24pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInJhZklEXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInRyYW5zaXRpb25cIiwge1xuICAgICAgZXhpdGluZzoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogXCJ3aWR0aCBcIi5jb25jYXQoX3RoaXMuZHVyYXRpb24sIFwibXMgZWFzZS1vdXRcIilcbiAgICAgIH0sXG4gICAgICBleGl0ZWQ6IHtcbiAgICAgICAgd2lkdGg6IDBcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRXaWR0aFwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBpZiAocmVmICYmIGlzTmFOKF90aGlzLnN0YXRlLndpZHRoKSkge1xuICAgICAgICAvKlxuICAgICAgICAgIEhlcmUgd2UncmUgaW52b2tpbmcgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdpdGggYSBjYWxsYmFjayBpbnZva2luZyBvdXJcbiAgICAgICAgICBjYWxsIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBhbmQgc2V0U3RhdGUgaW4gb3JkZXIgdG8gcmVzb2x2ZSBhbiBlZGdlIGNhc2VcbiAgICAgICAgICBhcm91bmQgcG9ydGFsbGluZy4gQ2VydGFpbiBwb3J0YWxsaW5nIHNvbHV0aW9ucyBicmllZmx5IHJlbW92ZSBjaGlsZHJlbiBmcm9tIHRoZSBET01cbiAgICAgICAgICBiZWZvcmUgYXBwZW5kaW5nIHRoZW0gdG8gdGhlIHRhcmdldCBub2RlLiBUaGlzIGlzIHRvIGF2b2lkIHVzIHRyeWluZyB0byBjYWxsIGdldEJvdW5kaW5nQ2xpZW50cmVjdFxuICAgICAgICAgIHdoaWxlIHRoZSBTZWxlY3QgY29tcG9uZW50IGlzIGluIHRoaXMgc3RhdGUuXG4gICAgICAgICovXG4gICAgICAgIC8vIGNhbm5vdCB1c2UgYG9mZnNldFdpZHRoYCBiZWNhdXNlIGl0IGlzIHJvdW5kZWRcbiAgICAgICAgX3RoaXMucmFmSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX3JlZiRnZXRCb3VuZGluZ0NsaWVuID0gcmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICB3aWR0aCA9IF9yZWYkZ2V0Qm91bmRpbmdDbGllbi53aWR0aDtcblxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRTdHlsZVwiLCBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRUcmFuc2l0aW9uXCIsIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnRyYW5zaXRpb25bc3RhdGVdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnJhZklEKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZklEKTtcbiAgICAgIH1cbiAgICB9IC8vIHdpZHRoIG11c3QgYmUgY2FsY3VsYXRlZDsgY2Fubm90IHRyYW5zaXRpb24gZnJvbSBgdW5kZWZpbmVkYCB0byBgbnVtYmVyYFxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaW5Qcm9wID0gX3RoaXMkcHJvcHMuaW47XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLnN0YXRlLndpZHRoO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgICBlbnRlcjogZmFsc2UsXG4gICAgICAgIG1vdW50T25FbnRlcjogdHJ1ZSxcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICAgICAgaW46IGluUHJvcCxcbiAgICAgICAgdGltZW91dDogdGhpcy5kdXJhdGlvblxuICAgICAgfSwgZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IF9vYmplY3RTcHJlYWQoe30sIF90aGlzMi5nZXRTdHlsZSh3aWR0aCksIF90aGlzMi5nZXRUcmFuc2l0aW9uKHN0YXRlKSk7XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIHJlZjogX3RoaXMyLmdldFdpZHRoLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9LCBjaGlsZHJlbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sbGFwc2U7XG59KENvbXBvbmVudCk7XG5cbnZhciBBbmltYXRlZE11bHRpVmFsdWUgPSBmdW5jdGlvbiBBbmltYXRlZE11bHRpVmFsdWUoV3JhcHBlZENvbXBvbmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgaW5Qcm9wID0gX3JlZi5pbixcbiAgICAgICAgb25FeGl0ZWQgPSBfcmVmLm9uRXhpdGVkLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJpblwiLCBcIm9uRXhpdGVkXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbGxhcHNlLCB7XG4gICAgICBpbjogaW5Qcm9wLFxuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjcm9wV2l0aEVsbGlwc2lzOiBpblByb3BcbiAgICB9LCBwcm9wcykpKTtcbiAgfTtcbn07XG5cbnZhciBBbmltYXRlZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gQW5pbWF0ZWRQbGFjZWhvbGRlcihXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBfZXh0ZW5kcyh7XG4gICAgICBjb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnQsXG4gICAgICBkdXJhdGlvbjogcHJvcHMuaXNNdWx0aSA/IGNvbGxhcHNlRHVyYXRpb24gOiAxXG4gICAgfSwgcHJvcHMpKTtcbiAgfTtcbn07XG5cbnZhciBBbmltYXRlZFNpbmdsZVZhbHVlID0gZnVuY3Rpb24gQW5pbWF0ZWRTaW5nbGVWYWx1ZShXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBfZXh0ZW5kcyh7XG4gICAgICBjb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9LCBwcm9wcykpO1xuICB9O1xufTtcblxuLy8gbWFrZSBWYWx1ZUNvbnRhaW5lciBhIHRyYW5zaXRpb24gZ3JvdXBcbnZhciBBbmltYXRlZFZhbHVlQ29udGFpbmVyID0gZnVuY3Rpb24gQW5pbWF0ZWRWYWx1ZUNvbnRhaW5lcihXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXAsIF9leHRlbmRzKHtcbiAgICAgIGNvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0sIHByb3BzKSk7XG4gIH07XG59O1xuXG52YXIgbWFrZUFuaW1hdGVkID0gZnVuY3Rpb24gbWFrZUFuaW1hdGVkKCkge1xuICB2YXIgZXh0ZXJuYWxDb21wb25lbnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGNvbXBvbmVudHMkJDEgPSBkZWZhdWx0Q29tcG9uZW50cyh7XG4gICAgY29tcG9uZW50czogZXh0ZXJuYWxDb21wb25lbnRzXG4gIH0pO1xuXG4gIHZhciBJbnB1dCA9IGNvbXBvbmVudHMkJDEuSW5wdXQsXG4gICAgICBNdWx0aVZhbHVlID0gY29tcG9uZW50cyQkMS5NdWx0aVZhbHVlLFxuICAgICAgUGxhY2Vob2xkZXIgPSBjb21wb25lbnRzJCQxLlBsYWNlaG9sZGVyLFxuICAgICAgU2luZ2xlVmFsdWUgPSBjb21wb25lbnRzJCQxLlNpbmdsZVZhbHVlLFxuICAgICAgVmFsdWVDb250YWluZXIgPSBjb21wb25lbnRzJCQxLlZhbHVlQ29udGFpbmVyLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhjb21wb25lbnRzJCQxLCBbXCJJbnB1dFwiLCBcIk11bHRpVmFsdWVcIiwgXCJQbGFjZWhvbGRlclwiLCBcIlNpbmdsZVZhbHVlXCIsIFwiVmFsdWVDb250YWluZXJcIl0pO1xuXG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICBJbnB1dDogQW5pbWF0ZWRJbnB1dChJbnB1dCksXG4gICAgTXVsdGlWYWx1ZTogQW5pbWF0ZWRNdWx0aVZhbHVlKE11bHRpVmFsdWUpLFxuICAgIFBsYWNlaG9sZGVyOiBBbmltYXRlZFBsYWNlaG9sZGVyKFBsYWNlaG9sZGVyKSxcbiAgICBTaW5nbGVWYWx1ZTogQW5pbWF0ZWRTaW5nbGVWYWx1ZShTaW5nbGVWYWx1ZSksXG4gICAgVmFsdWVDb250YWluZXI6IEFuaW1hdGVkVmFsdWVDb250YWluZXIoVmFsdWVDb250YWluZXIpXG4gIH0sIHJlc3QpO1xufTtcblxudmFyIEFuaW1hdGVkQ29tcG9uZW50cyA9IG1ha2VBbmltYXRlZCgpO1xudmFyIElucHV0JDEgPSBBbmltYXRlZENvbXBvbmVudHMuSW5wdXQ7XG52YXIgTXVsdGlWYWx1ZSQxID0gQW5pbWF0ZWRDb21wb25lbnRzLk11bHRpVmFsdWU7XG52YXIgUGxhY2Vob2xkZXIkMSA9IEFuaW1hdGVkQ29tcG9uZW50cy5QbGFjZWhvbGRlcjtcbnZhciBTaW5nbGVWYWx1ZSQxID0gQW5pbWF0ZWRDb21wb25lbnRzLlNpbmdsZVZhbHVlO1xudmFyIFZhbHVlQ29udGFpbmVyJDEgPSBBbmltYXRlZENvbXBvbmVudHMuVmFsdWVDb250YWluZXI7XG52YXIgaW5kZXggPSBtZW1vaXplT25lKG1ha2VBbmltYXRlZCwgZXhwb3J0ZWRFcXVhbCk7XG5cbnZhciBpbmRleCQxID0gbWFuYWdlU3RhdGUoU2VsZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXgkMTtcbmV4cG9ydCB7IFNlbGVjdCBhcyBTZWxlY3RCYXNlLCBBc3luYywgbWFrZUFzeW5jU2VsZWN0LCBBc3luY0NyZWF0YWJsZSwgQ3JlYXRhYmxlLCBtYWtlQ3JlYXRhYmxlU2VsZWN0LCBjcmVhdGVGaWx0ZXIsIGluZGV4IGFzIG1ha2VBbmltYXRlZCwgY29tcG9uZW50cywgbWVyZ2VTdHlsZXMsIGRlZmF1bHRUaGVtZSB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcblxuaW1wb3J0ICcuL0lucHV0LmNzcyc7XG5cbmNvbnN0IElucHV0ID0gKHtcbiAgaGFuZGxlQ2hhbmdlLCBvcHRpb25zLFxufSkgPT4gKFxuICA8RnJhZ21lbnQ+XG4gICAgPGhlYWRlcj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIndyYXBwZXItc2VhcmNoXCI+XG4gICAgICAgIDxTZWxlY3QgaWQ9XCJzZWFyY2gtdGVybVwiIG9wdGlvbnM9e29wdGlvbnN9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IC8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9oZWFkZXI+XG4gICAgPGhyIC8+XG4gIDwvRnJhZ21lbnQ+XG4pO1xuXG5JbnB1dC5wcm9wVHlwZXMgPSB7XG4gIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb3B0aW9uczogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLFxufTtcblxuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICBvcHRpb25zOiB7XG4gICAgdmFsdWU6ICfQktGL0LHQtdGA0LjRgtC1INC40LzRjycsXG4gICAgbGFiZWw6ICfQktGL0LHQtdGA0LjRgtC1INC40LzRjycsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL3ByZXNlbnRhdGlvbmFsL0lucHV0L0lucHV0JztcblxuY2xhc3MgSW5wdXRDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBoYW5kbGVDaGFuZ2UgPSAoaW5wdXRWYWx1ZSkgPT4ge1xuICAgIGNvbnN0IHRleHQgPSBpbnB1dFZhbHVlLnZhbHVlO1xuICAgIGNvbnN0IHsgc2V0VmFsdWVJbnB1dCB9ID0gdGhpcy5wcm9wcztcbiAgICBzZXRWYWx1ZUlucHV0KHRleHQpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPElucHV0XG4gICAgICAgIGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuSW5wdXRDb250YWluZXIucHJvcFR5cGVzID0ge1xuICBzZXRWYWx1ZUlucHV0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvcHRpb25zOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSksXG59O1xuXG5JbnB1dENvbnRhaW5lci5kZWZhdWx0UHJvcHMgPSB7XG4gIG9wdGlvbnM6IHtcbiAgICB2YWx1ZTogJ9CS0YvQsdC10YDQuNGC0LUg0LjQvNGPJyxcbiAgICBsYWJlbDogJ9CS0YvQsdC10YDQuNGC0LUg0LjQvNGPJyxcbiAgfSxcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRDb250YWluZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0ICcuL1RhYmxlLmNzcyc7XG5cbmNvbnN0IFRhYmxlID0gKHsgbGlzdFRhc2tzLCBjdXJyZW50TWVudG9yIH0pID0+IHtcbiAgaWYgKGN1cnJlbnRNZW50b3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPG1haW4+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIndyYXBwZXItdGFibGVcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidmlzdWFsbHloaWRkZW5cIj5SU1Mg0JTQsNGI0LHQvtGA0LQg0LzQtdC90YLQvtGA0LA8L2gxPlxuICAgICAgICAgIDx0YWJsZT5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ0YXNrLW5hbWVcIj5UYXNrL05hbWU8L3RkPlxuICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhjdXJyZW50TWVudG9yLnN0dWRlbnRzKVxuICAgICAgICAgICAgICAgICAgLm1hcCgoa2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gT2JqZWN0LmtleXMoY3VycmVudE1lbnRvci5zdHVkZW50c1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpZCB9ID0gY3VycmVudE1lbnRvci5zdHVkZW50c1tpbmRleF1bbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17aWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17YGh0dHBzOi8vZ2l0aHViLmNvbS8ke25hbWV9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAge2xpc3RUYXNrcy5tYXAodGFzayA9PiAoXG4gICAgICAgICAgICAgICAgPHRyIGtleT17dGFzay5pbmQudG9TdHJpbmcoKX0+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwidGFzay1uYW1lXCI+PGEgaHJlZj17dGFzay5saW5rfT57dGFzay5uYW1lfTwvYT48L3RkPlxuICAgICAgICAgICAgICAgICAge2N1cnJlbnRNZW50b3Iuc3R1ZGVudHMubWFwKChzdHVkZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0dWRlbnRbT2JqZWN0LmtleXMoc3R1ZGVudCldLmlkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0dWRlbnRbT2JqZWN0LmtleXMoc3R1ZGVudCldLmFyclN0YXR1c1Rhc2tzW3Rhc2suaW5kXX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvbWFpbj5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPG1haW4+XG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJ3cmFwcGVyLXRhYmxlXCI+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJ2aXN1YWxseWhpZGRlblwiPlJTUyDQlNCw0YjQsdC+0YDQtCDQvNC10L3RgtC+0YDQsDwvaDE+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9tYWluPlxuICApO1xufTtcblxuVGFibGUucHJvcFR5cGVzID0ge1xuICBsaXN0VGFza3M6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEFycmF5KSxcbiAgY3VycmVudE1lbnRvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KV0pLFxufTtcblxuVGFibGUuZGVmYXVsdFByb3BzID0ge1xuICBsaXN0VGFza3M6IFt7XG4gICAgaW5kOiAnMCcsXG4gICAgbGluazogJy8nLFxuICAgIG5hbWU6ICcnLFxuICB9XSxcbiAgY3VycmVudE1lbnRvcjoge1xuICAgIG1lbnRvcjogJycsXG4gICAgbWVudG9yR2l0aHViOiAnJyxcbiAgICBzdHVkZW50czogW10sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYWJsZTtcbiIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL0FwcC5jc3MnO1xuXG5pbXBvcnQgSW5wdXRDb250YWluZXIgZnJvbSAnLi9jb250YWluZXIvSW5wdXRDb250YWluZXInO1xuaW1wb3J0IFRhYmxlIGZyb20gJy4vcHJlc2VudGF0aW9uYWwvVGFibGUvVGFibGUnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxpc3RNZW50b3JzOiBbXSxcbiAgICAgIGxpc3RUYXNrczogW10sXG4gICAgICBkYXRhTWVudG9yczogW10sXG4gICAgICBjdXJyZW50TWVudG9yOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgYXdhaXQgdGhpcy5nZXREYXRhKFsnbGlzdE1lbnRvcnMnLCAnbGlzdFRhc2tzJywgJ2RhdGFNZW50b3JzJ10pO1xuXG4gICAgY29uc3QgbWVudG9yRnJvbUxvY2FsZVN0b3JhZGdlID0gdGhpcy5nZXRMb2NhbGVTdG9yYWRnZSgnbWVudG9yJyk7XG4gICAgaWYgKG1lbnRvckZyb21Mb2NhbGVTdG9yYWRnZSkge1xuICAgICAgdGhpcy5zZXRDdXJyZW50TWVudG9yKG1lbnRvckZyb21Mb2NhbGVTdG9yYWRnZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0RGF0YSA9IGFzeW5jIChwYXJhbVN0YXRlKSA9PiB7XG4gICAgY29uc3QgYXJyTWVudG9ycyA9IFtdO1xuICAgIGNvbnN0IGFyclRhc2sgPSBbXTtcbiAgICBjb25zdCBhcnJEYXRhTWVudG9ycyA9IFtdO1xuICAgIGNvbnN0IGFyclBhcmFtcyA9IFthcnJNZW50b3JzLCBhcnJUYXNrLCBhcnJEYXRhTWVudG9yc107XG4gICAgYXdhaXQgZmV0Y2goJ2RhdGEvZGF0YU1lbnRvcnMuanNvbicpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgYXJyTWVudG9ycy5wdXNoKHsgdmFsdWU6IGVsZW1lbnQubWVudG9yLCBsYWJlbDogZWxlbWVudC5tZW50b3JHaXRodWIgfSk7XG4gICAgICAgICAgYXJyRGF0YU1lbnRvcnMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKGVsZW1lbnQuc3R1ZGVudHNbMF0pWzBdO1xuICAgICAgICAgICAgY29uc3QgaW5mb1N0dWRlbnRzID0gZWxlbWVudC5zdHVkZW50c1swXVtrZXldO1xuICAgICAgICAgICAgaW5mb1N0dWRlbnRzLmFyck5hbWVUYXNrcy5mb3JFYWNoKChuYW1lLCBpbmQpID0+IHtcbiAgICAgICAgICAgICAgYXJyVGFzay5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBsaW5rOiBpbmZvU3R1ZGVudHMuYXJyTGlua1Rhc2tzW2luZF0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgcGFyYW1TdGF0ZS5mb3JFYWNoKChwYXJhbSwgaW5keCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IFtwYXJhbV06IGFyclBhcmFtc1tpbmR4XSB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldFZhbHVlSW5wdXQgPSAodGV4dCkgPT4ge1xuICAgIHRoaXMuc2V0Q3VycmVudE1lbnRvcih0ZXh0KTtcbiAgICB0aGlzLnNldExvY2FsZVN0b3JhZGdlKCdtZW50b3InLCB0ZXh0KTtcbiAgfTtcblxuICBzZXRDdXJyZW50TWVudG9yID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgeyBkYXRhTWVudG9ycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjdXJyZW50TWVudG9yID0gZGF0YU1lbnRvcnMuZmlsdGVyKGUgPT4gZS5tZW50b3IgPT09IHZhbHVlKVswXTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50TWVudG9yIH0pO1xuICB9XG5cbiAgc2V0TG9jYWxlU3RvcmFkZ2UgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gIH1cblxuICBnZXRMb2NhbGVTdG9yYWRnZSA9IGtleSA9PiBsb2NhbFN0b3JhZ2Vba2V5XTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbGlzdE1lbnRvcnMsIGxpc3RUYXNrcywgY3VycmVudE1lbnRvcixcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8RnJhZ21lbnQ+XG4gICAgICAgIDxJbnB1dENvbnRhaW5lclxuICAgICAgICAgIHNldFZhbHVlSW5wdXQ9e3RoaXMuc2V0VmFsdWVJbnB1dH1cbiAgICAgICAgICBvcHRpb25zPXtsaXN0TWVudG9yc31cbiAgICAgICAgLz5cbiAgICAgICAgPFRhYmxlIGxpc3RUYXNrcz17bGlzdFRhc2tzfSBjdXJyZW50TWVudG9yPXtjdXJyZW50TWVudG9yfSAvPlxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCAncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCAnYm9vdHN0cmFwJztcclxuaW1wb3J0ICcuL2luZGV4LmNzcyc7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcCc7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9